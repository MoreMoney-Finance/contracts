{
  "address": "0x6cC0DD3D2dBF11c26BA580206251D09185caa4eF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_accounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldCheckptIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trancheToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "_listenForOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_oracleCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "_viewTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sourceStrategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "acceptMigration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apfSmoothingPer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "approvedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "burnTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        }
      ],
      "name": "checkApprovedAndEncode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "collectYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_yieldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "collectYieldValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "disapproveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "migrateAllTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetStrategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldRecipient",
          "type": "address"
        }
      ],
      "name": "migrateStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "newCurrentOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "registerDepositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "registerMintTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "smoothing",
          "type": "uint256"
        }
      ],
      "name": "setApfSmoothingPer10k",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "yearlyFeePer10k",
          "type": "uint256"
        }
      ],
      "name": "setStabilityFeePer10k",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "stabilityFeePer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenMetadata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cumulYieldPerCollateralFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralPast",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralNow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apfLastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apf",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "tranche",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "trancheToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trancheTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "viewAPF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllApprovedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllStrategyMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "APF",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowablePer10k",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "valuePer1e18",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "strategyName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "tvl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "harvestBalance2Tally",
              "type": "uint256"
            },
            {
              "internalType": "enum IStrategy.YieldType",
              "name": "yieldType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStrategy.StrategyMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllTokensEver",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "viewBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "viewHarvestBalance2Tally",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewStrategyMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "APF",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowablePer10k",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "valuePer1e18",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "strategyName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "tvl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "harvestBalance2Tally",
              "type": "uint256"
            },
            {
              "internalType": "enum IStrategy.YieldType",
              "name": "yieldType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStrategy.StrategyMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "viewTargetCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        }
      ],
      "name": "viewValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        }
      ],
      "name": "viewValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "viewYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_yieldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        }
      ],
      "name": "viewYieldValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldType",
      "outputs": [
        {
          "internalType": "enum IStrategy.YieldType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb440968a884fe76b2b29f940bacdeccf34a5f3c32d1622a7dc9a4d2d0517b1c3",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x6cC0DD3D2dBF11c26BA580206251D09185caa4eF",
    "transactionIndex": 13,
    "gasUsed": "3414082",
    "logsBloom": "0x
    "blockHash": "0xfe25708fba92c4c828ddf333f46f85f7bd77846a922ad10ecb7cdeca3dfe7932",
    "transactionHash": "0xb440968a884fe76b2b29f940bacdeccf34a5f3c32d1622a7dc9a4d2d0517b1c3",
    "logs": [],
    "blockNumber": 6657183,
    "cumulativeGasUsed": "5041888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x70429C9357D150E3a9088f94b8D91d944106137B"
  ],
  "solcInputHash": "28c9fd7028c7235019505a3b598cc36a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldCheckptIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trancheToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"_listenForOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_oracleCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_viewTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acceptMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apfSmoothingPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approvedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burnTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"}],\"name\":\"checkApprovedAndEncode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"collectYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_yieldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"collectYieldValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"disapproveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrateAllTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldRecipient\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"newCurrentOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerDepositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"registerMintTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"smoothing\",\"type\":\"uint256\"}],\"name\":\"setApfSmoothingPer10k\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yearlyFeePer10k\",\"type\":\"uint256\"}],\"name\":\"setStabilityFeePer10k\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"stabilityFeePer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cumulYieldPerCollateralFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralPast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralNow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apfLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"tranche\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"trancheToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"viewAPF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllApprovedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllStrategyMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"APF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuePer1e18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"strategyName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestBalance2Tally\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategy.YieldType\",\"name\":\"yieldType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.StrategyMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllTokensEver\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"viewBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"viewHarvestBalance2Tally\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewStrategyMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"APF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuePer1e18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"strategyName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestBalance2Tally\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategy.YieldType\",\"name\":\"yieldType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.StrategyMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"viewTargetCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"}],\"name\":\"viewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"}],\"name\":\"viewValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"viewYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_yieldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"}],\"name\":\"viewYieldValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldType\",\"outputs\":[{\"internalType\":\"enum IStrategy.YieldType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/SimpleHoldingStrategy.sol\":\"SimpleHoldingStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/OracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./oracles/OracleAware.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./roles/DependsOnOracleListener.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract OracleRegistry is RoleAware, DependsOracleListener {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    mapping(address => mapping(address => address)) public tokenOracle;\\n    mapping(address => mapping(address => EnumerableSet.AddressSet)) _listeners;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(ORACLE_REGISTRY);\\n    }\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        address oracle,\\n        uint256 borrowablePer10k,\\n        bytes calldata data\\n    ) external onlyOwnerExecActivator {\\n        tokenOracle[token][pegCurrency] = oracle;\\n        IOracle(oracle).setOracleParams(\\n            token,\\n            pegCurrency,\\n            borrowablePer10k,\\n            data\\n        );\\n    }\\n\\n    function listenForCurrentOracleUpdates(address token, address pegCurrency)\\n        external\\n    {\\n        require(isOracleListener(msg.sender), \\\"Not allowed to listen\\\");\\n        _listeners[token][pegCurrency].add(msg.sender);\\n        OracleAware(msg.sender).newCurrentOracle(token, pegCurrency);\\n    }\\n}\\n\",\"keccak256\":\"0x59041f3c52118ff8b2fbd314006956c830bd6edade5df461fefcca32cba86125\",\"license\":\"BUSL-1.1\"},\"contracts/ProxyOwnershipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IProxyOwnership.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nabstract contract ProxyOwnershipERC721 is ERC721Enumerable, IProxyOwnership {\\n    using Address for address;\\n\\n    mapping(uint256 => uint256) public _containedIn;\\n\\n    function containedIn(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address owner, uint256 containerId)\\n    {\\n        return (ownerOf(tokenId), _containedIn[tokenId]);\\n    }\\n\\n    function isAuthorized(address spender, uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        address tokenOwner = ownerOf(tokenId);\\n        return\\n            _isApprovedOrOwner(spender, tokenId) ||\\n            (tokenOwner.isContract() &&\\n                IProxyOwnership(tokenOwner).isAuthorized(\\n                    spender,\\n                    _containedIn[tokenId]\\n                ));\\n    }\\n}\\n\",\"keccak256\":\"0x19d4011ef6556f94466bc4d3c6d5ef12a349b07a3a3b9b3786de24a7ee3c5b59\",\"license\":\"BUSL-1.1\"},\"contracts/Stablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnMinterBurner.sol\\\";\\n\\ncontract Stablecoin is\\n    RoleAware,\\n    ERC20,\\n    ReentrancyGuard,\\n    DependsOnMinterBurner\\n{\\n    uint256 public globalDebtCeiling = 100_000 ether;\\n\\n    constructor(address _roles) RoleAware(_roles) ERC20(\\\"USD Money\\\", \\\"USDM\\\") {\\n        _charactersPlayed.push(STABLECOIN);\\n    }\\n\\n    function mint(address account, uint256 amount) external nonReentrant {\\n        require(isMinterBurner(msg.sender), \\\"Not an autorized minter/burner\\\");\\n        _mint(account, amount);\\n\\n        require(\\n            globalDebtCeiling > totalSupply(),\\n            \\\"Total supply exceeds global debt ceiling\\\"\\n        );\\n    }\\n\\n    function burn(address account, uint256 amount) external nonReentrant {\\n        require(isMinterBurner(msg.sender), \\\"Not an authorized minter/burner\\\");\\n        _burn(account, amount);\\n    }\\n\\n    function setGlobalDebtCeiling(uint256 debtCeiling) external onlyOwnerExec {\\n        globalDebtCeiling = debtCeiling;\\n    }\\n}\\n\",\"keccak256\":\"0xe5ae20707d793ededbc85bd4ca411cf3accd48c9e5dee82cf87163b23a5916cf\",\"license\":\"BUSL-1.1\"},\"contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"./oracles/OracleAware.sol\\\";\\nimport \\\"./Tranche.sol\\\";\\nimport \\\"./roles/DependsOnStrategyRegistry.sol\\\";\\nimport \\\"./roles/CallsStableCoinMintBurn.sol\\\";\\nimport \\\"./roles/DependsOnTranche.sol\\\";\\nimport \\\"./roles/DependsOnFundTransferer.sol\\\";\\n\\nabstract contract Strategy is\\n    IStrategy,\\n    OracleAware,\\n    CallsStableCoinMintBurn,\\n    DependsOnStrategyRegistry,\\n    DependsOnTranche,\\n    DependsOnFundTransferer,\\n    TrancheIDAware\\n{\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bool public override isActive = true;\\n\\n    bytes32 public immutable override strategyName;\\n\\n    EnumerableSet.AddressSet _approvedTokens;\\n    EnumerableSet.AddressSet _allTokensEver;\\n\\n    struct CollateralAccount {\\n        uint256 collateral;\\n        uint256 yieldCheckptIdx;\\n        address trancheToken;\\n    }\\n\\n    mapping(uint256 => CollateralAccount) public _accounts;\\n\\n    struct TokenMetadata {\\n        uint256[] yieldCheckpoints;\\n        uint256 cumulYieldPerCollateralFP;\\n        uint256 totalCollateralPast;\\n        uint256 totalCollateralNow;\\n        uint256 apfLastUpdated;\\n        uint256 apf;\\n    }\\n\\n    uint256 public apfSmoothingPer10k = 5000;\\n\\n    mapping(address => TokenMetadata) public tokenMetadata;\\n\\n    uint256 internal constant FP64 = 2**64;\\n\\n    constructor(bytes32 stratName) {\\n        strategyName = stratName;\\n    }\\n\\n    modifier onlyActive() {\\n        require(isActive, \\\"Strategy is not active\\\");\\n        _;\\n    }\\n\\n    function registerMintTranche(\\n        address minter,\\n        uint256 trancheId,\\n        address assetToken,\\n        uint256,\\n        uint256 assetAmount\\n    ) external override onlyActive {\\n        require(\\n            isTranche(msg.sender) && tranche(trancheId) == msg.sender,\\n            \\\"Invalid tranche\\\"\\n        );\\n\\n        _accounts[trancheId].yieldCheckptIdx = tokenMetadata[assetToken]\\n            .yieldCheckpoints\\n            .length;\\n        _setAndCheckTrancheToken(trancheId, assetToken);\\n        _deposit(minter, trancheId, assetAmount);\\n    }\\n\\n    function deposit(uint256 trancheId, uint256 amount) external override {\\n        _deposit(msg.sender, trancheId, amount);\\n    }\\n\\n    function registerDepositFor(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 amount\\n    ) external virtual override onlyActive {\\n        require(\\n            isTranche(msg.sender) || isFundTransferer(msg.sender),\\n            \\\"Not authorized to transfer user funds\\\"\\n        );\\n        _deposit(depositor, trancheId, amount);\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 amount\\n    ) internal virtual {\\n        address token = trancheToken(trancheId);\\n        _applyCompounding(trancheId);\\n\\n        collectCollateral(depositor, token, amount);\\n        _accounts[trancheId].collateral += amount;\\n        tokenMetadata[token].totalCollateralNow += amount;\\n    }\\n\\n    function withdraw(\\n        uint256 trancheId,\\n        uint256 amount,\\n        address recipient\\n    ) external virtual override onlyActive {\\n        require(\\n            isFundTransferer(msg.sender) ||\\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\\n            \\\"Not authorized to withdraw\\\"\\n        );\\n        // todo: should we collect yield here?\\n        _withdraw(trancheId, amount, recipient);\\n    }\\n\\n    function _withdraw(\\n        uint256 trancheId,\\n        uint256 amount,\\n        address recipient\\n    ) internal virtual {\\n        address token = trancheToken(trancheId);\\n        _applyCompounding(trancheId);\\n\\n        amount = min(amount, viewTargetCollateralAmount(trancheId));\\n        returnCollateral(recipient, token, amount);\\n        _accounts[trancheId].collateral -= amount;\\n        tokenMetadata[token].totalCollateralNow -= amount;\\n    }\\n\\n    function burnTranche(\\n        uint256 trancheId,\\n        address yieldToken,\\n        address recipient\\n    ) external virtual override onlyActive {\\n        require(\\n            isFundTransferer(msg.sender) ||\\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\\n            \\\"Not authorized to burn tranche\\\"\\n        );\\n\\n        _collectYield(trancheId, yieldToken, recipient);\\n        _withdraw(trancheId, viewTargetCollateralAmount(trancheId), recipient);\\n        delete _accounts[trancheId];\\n    }\\n\\n    function migrateStrategy(\\n        uint256 trancheId,\\n        address targetStrategy,\\n        address yieldToken,\\n        address yieldRecipient\\n    )\\n        external\\n        virtual\\n        override\\n        onlyActive\\n        returns (\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(msg.sender == tranche(trancheId), \\\"Not authorized to migrate\\\");\\n\\n        address token = trancheToken(trancheId);\\n        uint256 targetAmount = viewTargetCollateralAmount(trancheId);\\n        IERC20(token).approve(targetStrategy, targetAmount);\\n        _collectYield(trancheId, yieldToken, yieldRecipient);\\n        uint256 subCollateral = returnCollateral(\\n            address(this),\\n            token,\\n            targetAmount\\n        );\\n        tokenMetadata[token].totalCollateralNow -= subCollateral;\\n\\n        return (token, 0, targetAmount);\\n    }\\n\\n    function acceptMigration(\\n        uint256 trancheId,\\n        address sourceStrategy,\\n        address tokenContract,\\n        uint256,\\n        uint256 amount\\n    ) external virtual override {\\n        require(msg.sender == tranche(trancheId), \\\"Not authorized to migrate\\\");\\n\\n        _setAndCheckTrancheToken(trancheId, tokenContract);\\n        _deposit(sourceStrategy, trancheId, amount);\\n    }\\n\\n    function migrateAllTo(address destination)\\n        external\\n        override\\n        onlyActive\\n        onlyOwnerExecDisabler\\n    {\\n        tallyHarvestBalance();\\n\\n        for (uint256 i; _allTokensEver.length() > i; i++) {\\n            address token = _allTokensEver.at(i);\\n\\n            uint256 totalAmount = _viewTVL(token);\\n            StrategyRegistry registry = strategyRegistry();\\n            returnCollateral(address(registry), token, totalAmount);\\n            IERC20(token).approve(address(registry), type(uint256).max);\\n\\n            registry.migrateTokenTo(destination, token);\\n        }\\n        isActive = false;\\n    }\\n\\n    function tallyHarvestBalance() internal virtual returns (uint256 balance) {}\\n\\n    function collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) public virtual override returns (uint256) {\\n        require(\\n            isFundTransferer(msg.sender) ||\\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\\n            \\\"Not authorized to collect yield\\\"\\n        );\\n\\n        return _collectYield(trancheId, currency, recipient);\\n    }\\n\\n    function collectYieldValueBorrowable(\\n        uint256 trancheId,\\n        address _yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        external\\n        override\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        )\\n    {\\n        require(\\n            isFundTransferer(msg.sender) ||\\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\\n            \\\"Not authorized to collect yield\\\"\\n        );\\n\\n        yield = _collectYield(trancheId, _yieldCurrency, recipient);\\n        (value, borrowablePer10k) = _getValueBorrowable(\\n            trancheToken(trancheId),\\n            viewTargetCollateralAmount(trancheId),\\n            valueCurrency\\n        );\\n    }\\n\\n    function viewYieldValueBorrowable(\\n        uint256 trancheId,\\n        address _yieldCurrency,\\n        address valueCurrency\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        )\\n    {\\n        yield = viewYield(trancheId, _yieldCurrency);\\n        (value, borrowablePer10k) = _viewValueBorrowable(\\n            trancheToken(trancheId),\\n            viewTargetCollateralAmount(trancheId),\\n            valueCurrency\\n        );\\n    }\\n\\n    function viewValue(uint256 trancheId, address valueCurrency)\\n        external\\n        view\\n        override\\n        returns (uint256 value)\\n    {\\n        (value, ) = _viewValueBorrowable(\\n            trancheToken(trancheId),\\n            viewTargetCollateralAmount(trancheId),\\n            valueCurrency\\n        );\\n    }\\n\\n    function viewValueBorrowable(uint256 trancheId, address valueCurrency)\\n        external\\n        view\\n        override\\n        returns (uint256 value, uint256 borrowable)\\n    {\\n        return\\n            _viewValueBorrowable(\\n                trancheToken(trancheId),\\n                viewTargetCollateralAmount(trancheId),\\n                valueCurrency\\n            );\\n    }\\n\\n    function viewBorrowable(uint256 trancheId)\\n        external\\n        view\\n        override\\n        returns (uint256 borrowablePer10k)\\n    {\\n        (, borrowablePer10k) = _viewValueBorrowable(\\n            trancheToken(trancheId),\\n            viewTargetCollateralAmount(trancheId),\\n            yieldCurrency()\\n        );\\n    }\\n\\n    /// Withdraw collateral from source account\\n    function collectCollateral(\\n        address source,\\n        address token,\\n        uint256 collateralAmount\\n    ) internal virtual returns (uint256 collateral2Add);\\n\\n    /// Return collateral to user\\n    function returnCollateral(\\n        address recipient,\\n        address token,\\n        uint256 collateralAmount\\n    ) internal virtual returns (uint256 collteral2Subtract);\\n\\n    function trancheToken(uint256 trancheId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return _accounts[trancheId].trancheToken;\\n    }\\n\\n    function _setAndCheckTrancheToken(uint256 trancheId, address token)\\n        internal\\n        virtual\\n    {\\n        require(_approvedTokens.contains(token), \\\"Not an approved token\\\");\\n        _accounts[trancheId].trancheToken = token;\\n    }\\n\\n    function approvedToken(address token) public view override returns (bool) {\\n        return _approvedTokens.contains(token);\\n    }\\n\\n    function _collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) internal virtual returns (uint256 yieldEarned) {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        TokenMetadata storage tokenMeta = tokenMetadata[\\n            trancheToken(trancheId)\\n        ];\\n        if (account.collateral > 0) {\\n            yieldEarned = _viewYield(account, tokenMeta, currency);\\n            Stablecoin(yieldCurrency()).mint(recipient, yieldEarned);\\n        }\\n\\n        account.yieldCheckptIdx = tokenMeta.yieldCheckpoints.length;\\n    }\\n\\n    function _viewYield(\\n        CollateralAccount storage account,\\n        TokenMetadata storage tokenMeta,\\n        address currency\\n    ) internal view returns (uint256) {\\n        require(currency == yieldCurrency(), \\\"Wrong yield currency\\\");\\n        if (tokenMeta.yieldCheckpoints.length > account.yieldCheckptIdx) {\\n            uint256 yieldDelta = tokenMeta.cumulYieldPerCollateralFP -\\n                tokenMeta.yieldCheckpoints[account.yieldCheckptIdx];\\n            return (account.collateral * yieldDelta) / FP64;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function viewYield(uint256 trancheId, address currency)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        return\\n            _viewYield(\\n                account,\\n                tokenMetadata[trancheToken(trancheId)],\\n                currency\\n            );\\n    }\\n\\n    function yieldCurrency() public view virtual returns (address) {\\n        return address(stableCoin());\\n    }\\n\\n    function approveToken(address token, bytes calldata data)\\n        external\\n        virtual\\n        onlyOwnerExecActivator\\n    {\\n        _approveToken(token, data);\\n    }\\n\\n    function _approveToken(address token, bytes calldata) internal virtual {\\n        _approvedTokens.add(token);\\n        _allTokensEver.add(token);\\n\\n        strategyRegistry().updateTokenCount(address(this));\\n    }\\n\\n    function disapproveToken(address token, bytes calldata)\\n        external\\n        virtual\\n        onlyOwnerExec\\n    {\\n        _approvedTokens.remove(token);\\n    }\\n\\n    function viewTargetCollateralAmount(uint256 trancheId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        return account.collateral;\\n    }\\n\\n    function trancheTokenID(uint256) external pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function viewAllTokensEver() external view returns (address[] memory) {\\n        return _allTokensEver.values();\\n    }\\n\\n    function viewAllApprovedTokens()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _approvedTokens.values();\\n    }\\n\\n    function approvedTokensCount() external view override returns (uint256) {\\n        return _approvedTokens.length();\\n    }\\n\\n    function viewStrategyMetadata(address token)\\n        public\\n        view\\n        override\\n        returns (IStrategy.StrategyMetadata memory)\\n    {\\n        (uint256 value, uint256 borrowablePer10k) = _viewValueBorrowable(\\n            token,\\n            1 ether,\\n            address(stableCoin())\\n        );\\n\\n        return\\n            IStrategy.StrategyMetadata({\\n                strategy: address(this),\\n                token: token,\\n                APF: viewAPF(token),\\n                totalCollateral: tokenMetadata[token].totalCollateralNow,\\n                borrowablePer10k: borrowablePer10k,\\n                valuePer1e18: value,\\n                strategyName: strategyName,\\n                tvl: _viewTVL(token),\\n                harvestBalance2Tally: viewHarvestBalance2Tally(token),\\n                yieldType: yieldType(),\\n                stabilityFee: stabilityFeePer10k(token)\\n            });\\n    }\\n\\n    function viewAllStrategyMetadata()\\n        external\\n        view\\n        override\\n        returns (IStrategy.StrategyMetadata[] memory)\\n    {\\n        uint256 tokenCount = _approvedTokens.length();\\n        IStrategy.StrategyMetadata[]\\n            memory result = new IStrategy.StrategyMetadata[](tokenCount);\\n        for (uint256 i; tokenCount > i; i++) {\\n            result[i] = viewStrategyMetadata(_approvedTokens.at(i));\\n        }\\n        return result;\\n    }\\n\\n    function viewAPF(address) public view virtual override returns (uint256) {\\n        // TODO\\n        return 10_000;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    function _applyCompounding(uint256 trancheId) internal virtual {}\\n\\n    function _viewTVL(address token) public view virtual returns (uint256) {\\n        return tokenMetadata[token].totalCollateralNow;\\n    }\\n\\n    function stabilityFeePer10k(address) public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _updateAPF(\\n        address token,\\n        uint256 addedBalance,\\n        uint256 basisValue\\n    ) internal {\\n        TokenMetadata storage tokenMeta = tokenMetadata[token];\\n        require(addedBalance > 0, \\\"No balance to update APF\\\");\\n        uint256 lastUpdated = tokenMeta.apfLastUpdated;\\n        uint256 timeDelta = lastUpdated > 0\\n            ? block.timestamp - lastUpdated\\n            : 1 weeks;\\n\\n        uint256 newRate = ((addedBalance + basisValue) * 10_000 * (365 days)) /\\n            basisValue /\\n            timeDelta;\\n\\n        uint256 smoothing = lastUpdated > 0 ? apfSmoothingPer10k : 0;\\n        tokenMeta.apf =\\n            (tokenMeta.apf * smoothing) /\\n            10_000 +\\n            (newRate * (10_000 - smoothing)) /\\n            10_000;\\n        tokenMeta.apfLastUpdated = block.timestamp;\\n    }\\n\\n    function setApfSmoothingPer10k(uint256 smoothing) external onlyOwnerExec {\\n        apfSmoothingPer10k = smoothing;\\n    }\\n\\n    function _updateAPF(\\n        uint256 timeDelta,\\n        address token,\\n        uint256 addedBalance,\\n        uint256 basisValue\\n    ) internal {\\n        TokenMetadata storage tokenMeta = tokenMetadata[token];\\n        require(addedBalance > 0, \\\"No balance to update APF\\\");\\n\\n        uint256 lastUpdated = tokenMeta.apfLastUpdated;\\n\\n        uint256 newRate = ((addedBalance + basisValue) * 10_000 * (365 days)) /\\n            basisValue /\\n            timeDelta;\\n\\n        uint256 smoothing = lastUpdated > 0 ? apfSmoothingPer10k : 0;\\n        tokenMeta.apf =\\n            (tokenMeta.apf * smoothing) /\\n            10_000 +\\n            (newRate * (10_000 - smoothing)) /\\n            10_000;\\n        tokenMeta.apfLastUpdated = block.timestamp;\\n    }\\n\\n    function viewHarvestBalance2Tally(address)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return 0;\\n    }\\n\\n    function yieldType() public view virtual override returns (YieldType);\\n}\\n\",\"keccak256\":\"0xf1309de72de08d04c1c2b37faf65bd4e237b2457e16864e7e2eeaa0ee656e65a\",\"license\":\"BUSL-1.1\"},\"contracts/StrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// TODO: handle non-ERC20 migrations\\n\\ncontract StrategyRegistry is RoleAware {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    mapping(address => address) public replacementStrategy;\\n\\n    EnumerableSet.AddressSet enabledStrategies;\\n    EnumerableSet.AddressSet allStrategiesEver;\\n\\n    mapping(address => uint256) public _tokenCount;\\n    uint256 public totalTokenStratRows;\\n    uint256 public enabledTokenStratRows;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(STRATEGY_REGISTRY);\\n    }\\n\\n    function allEnabledStrategies() external view returns (address[] memory) {\\n        return enabledStrategies.values();\\n    }\\n\\n    function enableStrategy(address strat) external onlyOwnerExec {\\n        enabledStrategies.add(strat);\\n        allStrategiesEver.add(strat);\\n        updateTokenCount(strat);\\n    }\\n\\n    function disableStrategy(address strat) external onlyOwnerExec {\\n        totalTokenStratRows -= _tokenCount[strat];\\n        enabledStrategies.remove(strat);\\n    }\\n\\n    function enabledStrategy(address strat) external view returns (bool) {\\n        return enabledStrategies.contains(strat);\\n    }\\n\\n    function replaceStrategy(address legacyStrat, address replacementStrat)\\n        external\\n        onlyOwnerExec\\n    {\\n        require(\\n            enabledStrategies.contains(replacementStrat),\\n            \\\"Replacement strategy is not enabled\\\"\\n        );\\n        IStrategy(legacyStrat).migrateAllTo(replacementStrat);\\n        enabledStrategies.remove(legacyStrat);\\n        replacementStrategy[legacyStrat] = replacementStrat;\\n    }\\n\\n    function getCurrentStrategy(address strat) external view returns (address) {\\n        address result = strat;\\n        while (replacementStrategy[result] != address(0)) {\\n            result = replacementStrategy[result];\\n        }\\n        return result;\\n    }\\n\\n    function migrateTokenTo(address destination, address token) external {\\n        uint256 amount = IERC20(token).balanceOf(msg.sender);\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        IERC20(token).approve(destination, amount);\\n    }\\n\\n    function updateTokenCount(address strat) public {\\n        require(enabledStrategies.contains(strat), \\\"Not an enabled strategy!\\\");\\n        uint256 oldCount = _tokenCount[strat];\\n        uint256 newCount = IStrategy(strat).approvedTokensCount();\\n        totalTokenStratRows = totalTokenStratRows + newCount - oldCount;\\n        _tokenCount[strat] = newCount;\\n    }\\n\\n    function viewAllEnabledStrategyMetadata()\\n        external\\n        view\\n        returns (IStrategy.StrategyMetadata[] memory)\\n    {\\n        IStrategy.StrategyMetadata[]\\n            memory result = new IStrategy.StrategyMetadata[](\\n                totalTokenStratRows\\n            );\\n        uint256 enabledTotal = enabledStrategies.length();\\n        uint256 resultI;\\n        for (uint256 stratI; enabledTotal > stratI; stratI++) {\\n            IStrategy strat = IStrategy(enabledStrategies.at(stratI));\\n            IStrategy.StrategyMetadata[] memory meta = strat\\n                .viewAllStrategyMetadata();\\n            for (uint256 i; meta.length > i; i++) {\\n                result[resultI + i] = meta[i];\\n            }\\n            resultI += meta.length;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xeb51459b4bb1950b80c20c74608b4e2ca49e0f0f6d2347e60ea5f99d9c763743\",\"license\":\"BUSL-1.1\"},\"contracts/Tranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ProxyOwnershipERC721.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./StrategyRegistry.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnStrategyRegistry.sol\\\";\\nimport \\\"./roles/DependsOnFundTransferer.sol\\\";\\n\\ncontract Tranche is\\n    ProxyOwnershipERC721,\\n    DependsOnTrancheIDService,\\n    DependsOnStrategyRegistry,\\n    DependsOnFundTransferer,\\n    RoleAware,\\n    IAsset\\n{\\n    using Address for address;\\n\\n    mapping(uint256 => address) public _holdingStrategies;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _roles\\n    ) ERC721(_name, _symbol) RoleAware(_roles) {\\n        _rolesPlayed.push(TRANCHE);\\n    }\\n\\n    function _mintTranche(\\n        address minter,\\n        uint256 vaultId,\\n        address strategy,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) internal returns (uint256 trancheId) {\\n        require(\\n            strategyRegistry().enabledStrategy(strategy),\\n            \\\"Strategy not approved\\\"\\n        );\\n\\n        trancheId = trancheIdService().getNextTrancheId();\\n\\n        _holdingStrategies[trancheId] = strategy;\\n        _containedIn[trancheId] = vaultId;\\n        _checkAssetToken(assetToken);\\n        _safeMint(minter, trancheId, abi.encode(vaultId));\\n\\n        IStrategy(strategy).registerMintTranche(\\n            minter,\\n            trancheId,\\n            assetToken,\\n            assetTokenId,\\n            assetAmount\\n        );\\n    }\\n\\n    function mintTranche(\\n        uint256 vaultId,\\n        address strategy,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) external returns (uint256 trancheId) {\\n        return\\n            _mintTranche(\\n                msg.sender,\\n                vaultId,\\n                strategy,\\n                assetToken,\\n                assetTokenId,\\n                assetAmount\\n            );\\n    }\\n\\n    function deposit(uint256 trancheId, uint256 tokenAmount) external override {\\n        _deposit(msg.sender, trancheId, tokenAmount);\\n    }\\n\\n    function registerDepositFor(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 tokenAmount\\n    ) external override {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Not authorized to transfer user funds\\\"\\n        );\\n        _deposit(depositor, trancheId, tokenAmount);\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 tokenAmount\\n    ) internal virtual {\\n        IStrategy(getCurrentHoldingStrategy(trancheId)).registerDepositFor(\\n            depositor,\\n            trancheId,\\n            tokenAmount\\n        );\\n    }\\n\\n    function withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address recipient\\n    ) external override {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw\\\"\\n        );\\n        _withdraw(trancheId, tokenAmount, recipient);\\n    }\\n\\n    function _withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address recipient\\n    ) internal virtual {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        IStrategy(holdingStrategy).withdraw(trancheId, tokenAmount, recipient);\\n\\n        require(isViable(trancheId), \\\"Tranche not viable after withdraw\\\");\\n    }\\n\\n    function burnTranche(\\n        uint256 trancheId,\\n        address yieldToken,\\n        address recipient\\n    ) external override {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw\\\"\\n        );\\n\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        IStrategy(holdingStrategy).burnTranche(\\n            trancheId,\\n            yieldToken,\\n            recipient\\n        );\\n\\n        require(isViable(trancheId), \\\"Tranche not viable after withdraw\\\");\\n    }\\n\\n    function _collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) internal returns (uint256) {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        return\\n            IStrategy(holdingStrategy).collectYield(\\n                trancheId,\\n                currency,\\n                recipient\\n            );\\n    }\\n\\n    function collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) public virtual override returns (uint256) {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw yield\\\"\\n        );\\n        return _collectYield(trancheId, currency, recipient);\\n    }\\n\\n    function batchCollectYield(\\n        uint256[] calldata trancheIds,\\n        address currency,\\n        address recipient\\n    ) public returns (uint256) {\\n        uint256 yield;\\n\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n            require(\\n                isAuthorized(msg.sender, trancheId),\\n                \\\"not authorized to withdraw yield\\\"\\n            );\\n\\n            yield += _collectYield(trancheId, currency, recipient);\\n        }\\n        return yield;\\n    }\\n\\n    function viewYield(uint256 trancheId, address currency)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return IStrategy(holdingStrategy).viewYield(trancheId, currency);\\n    }\\n\\n    function batchViewYield(uint256[] calldata trancheIds, address currency)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 yield;\\n\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            yield += viewYield(trancheId, currency);\\n        }\\n        return yield;\\n    }\\n\\n    function viewValue(uint256 trancheId, address currency)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return IStrategy(holdingStrategy).viewValue(trancheId, currency);\\n    }\\n\\n    function batchViewValue(uint256[] calldata trancheIds, address currency)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 value;\\n\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            value += viewValue(trancheId, currency);\\n        }\\n\\n        return value;\\n    }\\n\\n    function viewBorrowable(uint256 trancheId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return IStrategy(holdingStrategy).viewBorrowable(trancheId);\\n    }\\n\\n    function batchViewValueBorrowable(\\n        uint256[] calldata trancheIds,\\n        address currency\\n    ) public view returns (uint256, uint256) {\\n        uint256 totalValue;\\n        uint256 totalBorrowablePer10k;\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            (uint256 value, uint256 borrowablePer10k) = IStrategy(\\n                _holdingStrategies[trancheId]\\n            ).viewValueBorrowable(trancheId, currency);\\n            totalBorrowablePer10k += value * borrowablePer10k;\\n        }\\n\\n        return (totalValue, totalBorrowablePer10k / totalValue);\\n    }\\n\\n    function collectYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        public\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(\\n            isAuthorized(msg.sender, trancheId) || isFundTransferer(msg.sender),\\n            \\\"not authorized to withdraw yield\\\"\\n        );\\n        return\\n            _collectYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency,\\n                recipient\\n            );\\n    }\\n\\n    function _collectYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        return\\n            IStrategy(holdingStrategy).collectYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency,\\n                recipient\\n            );\\n    }\\n\\n    function batchCollectYieldValueBorrowable(\\n        uint256[] calldata trancheIds,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        public\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        )\\n    {\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n            (\\n                uint256 _yield,\\n                uint256 _value,\\n                uint256 _borrowablePer10k\\n            ) = collectYieldValueBorrowable(\\n                    trancheId,\\n                    yieldCurrency,\\n                    valueCurrency,\\n                    recipient\\n                );\\n            yield += _yield;\\n            value += _value;\\n            borrowablePer10k += _borrowablePer10k * _value;\\n        }\\n        borrowablePer10k = borrowablePer10k / value;\\n    }\\n\\n    function viewYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return\\n            IStrategy(holdingStrategy).viewYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency\\n            );\\n    }\\n\\n    function isViable(uint256 trancheId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        address tokenOwner = ownerOf(trancheId);\\n        if (tokenOwner.isContract()) {\\n            IProxyOwnership bearer = IProxyOwnership(tokenOwner);\\n            return bearer.isViable(_containedIn[trancheId]);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function migrateStrategy(\\n        uint256 trancheId,\\n        address destination,\\n        address yieldToken,\\n        address yieldRecipient\\n    )\\n        external\\n        override\\n        returns (\\n            address token,\\n            uint256 tokenId,\\n            uint256 targetAmount\\n        )\\n    {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to migrate tranche\\\"\\n        );\\n\\n        require(\\n            strategyRegistry().enabledStrategy(destination),\\n            \\\"Strategy not approved\\\"\\n        );\\n\\n        address sourceStrategy = getCurrentHoldingStrategy(trancheId);\\n        (token, tokenId, targetAmount) = IStrategy(sourceStrategy)\\n            .migrateStrategy(\\n                trancheId,\\n                destination,\\n                yieldToken,\\n                yieldRecipient\\n            );\\n\\n        _acceptStrategyMigration(\\n            trancheId,\\n            sourceStrategy,\\n            destination,\\n            token,\\n            tokenId,\\n            targetAmount\\n        );\\n    }\\n\\n    function _acceptStrategyMigration(\\n        uint256 trancheId,\\n        address tokenSource,\\n        address destination,\\n        address token,\\n        uint256 tokenId,\\n        uint256 targetAmount\\n    ) internal {\\n        IStrategy(destination).acceptMigration(\\n            trancheId,\\n            tokenSource,\\n            token,\\n            tokenId,\\n            targetAmount\\n        );\\n\\n        _holdingStrategies[trancheId] = destination;\\n    }\\n\\n    function getCurrentHoldingStrategy(uint256 trancheId)\\n        public\\n        returns (address)\\n    {\\n        address oldStrat = _holdingStrategies[trancheId];\\n        StrategyRegistry registry = strategyRegistry();\\n        address newStrat = registry.getCurrentStrategy(oldStrat);\\n\\n        if (oldStrat != newStrat) {\\n            _acceptStrategyMigration(\\n                trancheId,\\n                address(registry),\\n                newStrat,\\n                IStrategy(oldStrat).trancheToken(trancheId),\\n                IStrategy(oldStrat).trancheTokenID(trancheId),\\n                IStrategy(oldStrat).viewTargetCollateralAmount(trancheId)\\n            );\\n        }\\n\\n        return newStrat;\\n    }\\n\\n    function viewCurrentHoldingStrategy(uint256 trancheId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return\\n            StrategyRegistry(strategyRegistry()).getCurrentStrategy(\\n                _holdingStrategies[trancheId]\\n            );\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal override {\\n        super._safeTransfer(from, to, tokenId, _data);\\n        _containedIn[tokenId] = abi.decode(_data, (uint256));\\n    }\\n\\n    function setupTrancheSlot() external {\\n        trancheIdService().setupTrancheSlot();\\n    }\\n\\n    function _checkAssetToken(address token) internal view virtual {}\\n\\n    function viewTranchesByOwner(address owner)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        uint256 num = balanceOf(owner);\\n        uint256[] memory result = new uint256[](num);\\n        for (uint256 i; num > i; i++) {\\n            result[i] = tokenOfOwnerByIndex(owner, i);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4787a8f465a1ab391e9f154b45bb2d7bdcdaa639401a89152f7e9e2b51b444e8\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\n\\nabstract contract TrancheIDAware is RoleAware, DependsOnTrancheIDService {\\n    uint256 immutable totalTrancheSlots;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        totalTrancheSlots = TrancheIDService(\\n            Roles(_roles).mainCharacters(TRANCHE_ID_SERVICE)\\n        ).totalTrancheSlots();\\n    }\\n\\n    mapping(uint256 => address) _slotTranches;\\n\\n    function tranche(uint256 trancheId) public view returns (address) {\\n        uint256 slot = trancheId % totalTrancheSlots;\\n        address trancheContract = _slotTranches[slot];\\n        if (trancheContract == address(0)) {\\n            trancheContract = trancheIdService().slotTranches(slot);\\n        }\\n\\n        return trancheContract;\\n    }\\n}\\n\",\"keccak256\":\"0x5bb76f49729b9c9f20e09c82bd52888c63eece2d947b81141b5c4dec4caf4fa6\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnTranche.sol\\\";\\n\\ncontract TrancheIDService is RoleAware, DependsOnTranche {\\n    uint256 public constant totalTrancheSlots = 1e8;\\n    uint256 public nextTrancheSlot = 1;\\n\\n    struct TrancheSlot {\\n        uint256 nextTrancheIdRange;\\n        uint256 trancheSlot;\\n    }\\n\\n    mapping(address => TrancheSlot) public trancheSlots;\\n    mapping(uint256 => address) public slotTranches;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function getNextTrancheId() external returns (uint256 id) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        TrancheSlot storage slot = trancheSlots[msg.sender];\\n        require(slot.trancheSlot != 0, \\\"Caller doesn't have a slot\\\");\\n        id = slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n        slot.nextTrancheIdRange++;\\n    }\\n\\n    function setupTrancheSlot() external returns (TrancheSlot memory) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        require(\\n            trancheSlots[msg.sender].trancheSlot == 0,\\n            \\\"Tranche already has a slot\\\"\\n        );\\n        trancheSlots[msg.sender] = TrancheSlot({\\n            nextTrancheIdRange: 1,\\n            trancheSlot: nextTrancheSlot\\n        });\\n        slotTranches[nextTrancheSlot] = msg.sender;\\n        nextTrancheSlot++;\\n        return trancheSlots[msg.sender];\\n    }\\n\\n    function viewNextTrancheId(address trancheContract)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheSlot storage slot = trancheSlots[trancheContract];\\n        return slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n    }\\n\\n    function viewTrancheContractByID(uint256 trancheId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return slotTranches[trancheId % totalTrancheSlots];\\n    }\\n\\n    function viewSlotByTrancheContract(address tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return trancheSlots[tranche].trancheSlot;\\n    }\\n}\\n\",\"keccak256\":\"0x2ff50771604993c3d0c405e26e33a054d55c7e5291e41993086c0c911a9d97fc\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../TrancheIDAware.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\nabstract contract OracleAware is RoleAware, DependsOnOracleRegistry {\\n    mapping(address => mapping(address => address)) public _oracleCache;\\n\\n    constructor() {\\n        _rolesPlayed.push(ORACLE_LISTENER);\\n    }\\n\\n    function newCurrentOracle(address token, address pegCurrency) external {\\n        if (_oracleCache[token][pegCurrency] != address(0)) {\\n            // make sure we don't init cache without listening\\n            _oracleCache[token][pegCurrency] = oracleRegistry().tokenOracle(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    function _listenForOracle(address token, address pegCurrency)\\n        public\\n        returns (address oracle)\\n    {\\n        if (_oracleCache[token][pegCurrency] == address(0)) {\\n            oracleRegistry().listenForCurrentOracleUpdates(token, pegCurrency);\\n            oracle = oracleRegistry().tokenOracle(token, pegCurrency);\\n            _oracleCache[token][pegCurrency] = oracle;\\n        }\\n    }\\n\\n    function _viewValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        return IOracle(oracle).viewAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    function _getValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = _listenForOracle(token, valueCurrency);\\n        }\\n\\n        return IOracle(oracle).getAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    function _viewValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value, uint256 borrowablePer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        (value, borrowablePer10k) = IOracle(oracle).viewPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n\\n        require(borrowablePer10k > 0, \\\"Uninitialized borrowable per 10k\\\");\\n    }\\n\\n    function _getValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value, uint256 borrowablerPer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = _listenForOracle(token, valueCurrency);\\n        }\\n\\n        (value, borrowablerPer10k) = IOracle(oracle).getPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n\\n        require(borrowablerPer10k > 0, \\\"Uninitialized borrowable per 10k\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3f43392a8cd1fb540b3da7a87c4cd64b42851d3b74b971c882325395ef891339\",\"license\":\"BUSL-1.1\"},\"contracts/roles/CallsStableCoinMintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependsOnStableCoin.sol\\\";\\n\\nabstract contract CallsStableCoinMintBurn is DependsOnStableCoin {\\n    constructor() {\\n        _rolesPlayed.push(MINTER_BURNER);\\n    }\\n\\n    function _mintStable(address account, uint256 amount) internal {\\n        stableCoin().mint(account, amount);\\n    }\\n\\n    function _burnStable(address account, uint256 amount) internal {\\n        stableCoin().burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc68e2165d8db32702b8a69155ff5acfc3db5dd72c18b648dc002fdc3aef7f3f1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xe60ca0ee32e5ddbb66bf65cd9358f7cd5bcee3de9e78c8427e8fe58a7d5d94e4\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnFeeRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnFeeRecipient is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(FEE_RECIPIENT);\\n    }\\n\\n    function feeRecipient() internal view returns (address) {\\n        return mainCharacterCache[FEE_RECIPIENT];\\n    }\\n}\\n\",\"keccak256\":\"0x9d1ad57c63532b22e883defa9e768e775e2da690f03978b5ca3cb4357b213e76\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnFundTransferer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnFundTransferer is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(FUND_TRANSFERER);\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n}\\n\",\"keccak256\":\"0x0d6d42f9d7e5a3643f7b1da53be3773fb93100906665f91d27fe258431b9f610\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnMinterBurner.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnMinterBurner is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(MINTER_BURNER);\\n    }\\n\\n    function isMinterBurner(address contr) internal view returns (bool) {\\n        return roleCache[contr][MINTER_BURNER];\\n    }\\n}\\n\",\"keccak256\":\"0x5863a6fd5193f04eec8e572cedc8060133d109445f4147d16ff528355eceb211\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleListener.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOracleListener is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(ORACLE_LISTENER);\\n    }\\n\\n    function isOracleListener(address contr) internal view returns (bool) {\\n        return roleCache[contr][ORACLE_LISTENER];\\n    }\\n}\\n\",\"keccak256\":\"0x12ae03a26b336364f75b3e9f720808e9685e7e18d52d71b4f7e166a0cce87540\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\n\\nabstract contract DependsOnOracleRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(ORACLE_REGISTRY);\\n    }\\n\\n    function oracleRegistry() internal view returns (OracleRegistry) {\\n        return OracleRegistry(mainCharacterCache[ORACLE_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xfbac5de676c7a5e178c70f897c70e366c39de56fe07c830ca8733a2ff1ebcfd3\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnStableCoin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../Stablecoin.sol\\\";\\n\\nabstract contract DependsOnStableCoin is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(STABLECOIN);\\n    }\\n\\n    function stableCoin() internal view returns (Stablecoin) {\\n        return Stablecoin(mainCharacterCache[STABLECOIN]);\\n    }\\n}\\n\",\"keccak256\":\"0x153e3a51fe0c85849aeaea0599ef716f540d5fcee309e822670fe951ecce9bf1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnStrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../StrategyRegistry.sol\\\";\\n\\nabstract contract DependsOnStrategyRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(STRATEGY_REGISTRY);\\n    }\\n\\n    function strategyRegistry() internal view returns (StrategyRegistry) {\\n        return StrategyRegistry(mainCharacterCache[STRATEGY_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xe863f111fb83af25b55b7899cb1c22cbe6cb316921f6f5a73077f18bbd54375b\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnTranche is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(TRANCHE);\\n    }\\n\\n    function isTranche(address contr) internal view returns (bool) {\\n        return roleCache[contr][TRANCHE];\\n    }\\n}\\n\",\"keccak256\":\"0x6e67b0afd0d3fc00998b226343fef13aeca167d19eb8cec8b8a55ebf96063962\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../TrancheIDService.sol\\\";\\n\\nabstract contract DependsOnTrancheIDService is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function trancheIdService() internal view returns (TrancheIDService) {\\n        return TrancheIDService(mainCharacterCache[TRANCHE_ID_SERVICE]);\\n    }\\n}\\n\",\"keccak256\":\"0x88e728c6f64f4e84351f9eaa921bfca6f3dc22b58d433d8077a844edb9bd93c1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.getRole(ACTIVATOR, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x51333b30c6d7814d5f8cbd86fef19cde8732cda16c96f4e2e069d659e89a6dc4\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant LIQUIDATOR = 5;\\n\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x46e286203c6188b0ed8c67d09a1158acb2dcd5b931ba51e7d6f980fcc8b42714\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/SimpleHoldingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../roles/DependsOnFeeRecipient.sol\\\";\\n\\ncontract SimpleHoldingStrategy is Strategy, DependsOnFeeRecipient {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => uint256) private _stabilityFeePer10k;\\n    mapping(uint256 => uint256) public depositTime;\\n\\n    constructor(address _roles)\\n        Strategy(\\\"Simple holding strategy\\\")\\n        TrancheIDAware(_roles)\\n    {}\\n\\n    function collectCollateral(\\n        address source,\\n        address token,\\n        uint256 collateralAmount\\n    ) internal override returns (uint256) {\\n        IERC20(token).safeTransferFrom(source, address(this), collateralAmount);\\n        return collateralAmount;\\n    }\\n\\n    function returnCollateral(\\n        address recipient,\\n        address token,\\n        uint256 collateralAmount\\n    ) internal override returns (uint256) {\\n        IERC20(token).safeTransfer(recipient, collateralAmount);\\n        return collateralAmount;\\n    }\\n\\n    function viewTargetCollateralAmount(uint256 trancheId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        uint256 amount = account.collateral;\\n        uint256 delta = (amount *\\n            (block.timestamp - depositTime[trancheId]) *\\n            _stabilityFeePer10k[account.trancheToken]) /\\n            (365 days) /\\n            10_000;\\n        if (amount > delta) {\\n            return amount - delta;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _applyCompounding(uint256 trancheId) internal override {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        if (account.collateral > 0) {\\n            address token = account.trancheToken;\\n            TokenMetadata storage tokenMeta = tokenMetadata[token];\\n            uint256 newAmount = viewTargetCollateralAmount(trancheId);\\n            uint256 oldAmount = account.collateral;\\n\\n            if (oldAmount > newAmount) {\\n                returnCollateral(feeRecipient(), token, oldAmount - newAmount);\\n\\n                tokenMeta.totalCollateralNow =\\n                    tokenMeta.totalCollateralNow +\\n                    newAmount -\\n                    oldAmount;\\n            }\\n\\n            account.collateral = newAmount;\\n            depositTime[trancheId] = block.timestamp;\\n        }\\n    }\\n\\n    function setStabilityFeePer10k(address token, uint256 yearlyFeePer10k)\\n        external\\n        onlyOwnerExec\\n    {\\n        _stabilityFeePer10k[token] = yearlyFeePer10k;\\n    }\\n\\n    function _approveToken(address token, bytes calldata data)\\n        internal\\n        override\\n    {\\n        uint256 stabilityFee = abi.decode(data, (uint256));\\n        _stabilityFeePer10k[token] = stabilityFee;\\n\\n        super._approveToken(token, data);\\n    }\\n\\n    function checkApprovedAndEncode(address token, uint256 stabilityFee)\\n        public\\n        view\\n        returns (bool, bytes memory)\\n    {\\n        return (approvedToken(token), abi.encode(stabilityFee));\\n    }\\n\\n    function yieldType() public pure override returns (IStrategy.YieldType) {\\n        return IStrategy.YieldType.NOYIELD;\\n    }\\n\\n    function stabilityFeePer10k(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _stabilityFeePer10k[token];\\n    }\\n}\\n\",\"keccak256\":\"0x2e1d08951029ec7b168fb6d9f7163502884b48b2087a4aef3440bf4cb5ae3d91\",\"license\":\"BUSL-1.1\"},\"interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IAsset {\\n    function deposit(uint256 trancheId, uint256 tokenAmount) external;\\n\\n    function registerDepositFor(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 amount\\n    ) external;\\n\\n    function withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address recipient\\n    ) external;\\n\\n    function burnTranche(\\n        uint256 trancheId,\\n        address yieldToken,\\n        address recipient\\n    ) external;\\n\\n    function migrateStrategy(\\n        uint256 trancheId,\\n        address targetStrategy,\\n        address yieldToken,\\n        address yieldRecipient\\n    )\\n        external\\n        returns (\\n            address token,\\n            uint256 tokenId,\\n            uint256 targetAmount\\n        );\\n\\n    function collectYield(\\n        uint256 tokenId,\\n        address currency,\\n        address recipient\\n    ) external returns (uint256);\\n\\n    function viewYield(uint256 tokenId, address currency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function viewValue(uint256 tokenId, address currency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function viewBorrowable(uint256 tokenId) external view returns (uint256);\\n\\n    function collectYieldValueBorrowable(\\n        uint256 tokenId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        external\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        );\\n\\n    function viewYieldValueBorrowable(\\n        uint256 tokenId,\\n        address yieldCurrency,\\n        address valueCurrency\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        );\\n}\\n\",\"keccak256\":\"0xe04c6e881d622edcea8d935ce7ae521f7378618d1af7783c9b8351e33125240d\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256);\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256, uint256);\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256, uint256);\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        uint256 borrowable,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// TODO: compatible with NFTs\\n\",\"keccak256\":\"0x58b453d894b93c6fbd184ebfb39c3fda3f89843c38a6d84fcb5d2f75cbc243d8\",\"license\":\"BUSL-1.1\"},\"interfaces/IProxyOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// TODO naming of these different proxy functions\\n\\ninterface IProxyOwnership {\\n    function containedIn(uint256 tokenId)\\n        external\\n        view\\n        returns (address containerAddress, uint256 containerId);\\n\\n    function isAuthorized(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isViable(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaadb532483d1abca0ae2c47a496ad810e510119a64db56b4adb2d619ebd14d7c\",\"license\":\"BUSL-1.1\"},\"interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IStrategy is IAsset {\\n    enum YieldType {\\n        REPAYING,\\n        COMPOUNDING,\\n        NOYIELD\\n    }\\n\\n    struct StrategyMetadata {\\n        address strategy;\\n        address token;\\n        uint256 APF;\\n        uint256 totalCollateral;\\n        uint256 borrowablePer10k;\\n        uint256 valuePer1e18;\\n        bytes32 strategyName;\\n        uint256 tvl;\\n        uint256 harvestBalance2Tally;\\n        YieldType yieldType;\\n        uint256 stabilityFee;\\n    }\\n\\n    function acceptMigration(\\n        uint256 trancheId,\\n        address sourceStrategy,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function registerMintTranche(\\n        address minter,\\n        uint256 trancheId,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) external;\\n\\n    function strategyName() external view returns (bytes32);\\n\\n    function isActive() external returns (bool);\\n\\n    function migrateAllTo(address destination) external;\\n\\n    function trancheToken(uint256 trancheId)\\n        external\\n        view\\n        returns (address token);\\n\\n    function trancheTokenID(uint256 trancheId)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    function viewTargetCollateralAmount(uint256 trancheId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approvedToken(address token) external view returns (bool);\\n\\n    function viewAllApprovedTokens() external view returns (address[] memory);\\n\\n    function approvedTokensCount() external view returns (uint256);\\n\\n    function viewStrategyMetadata(address token)\\n        external\\n        view\\n        returns (StrategyMetadata memory);\\n\\n    function viewAllStrategyMetadata()\\n        external\\n        view\\n        returns (StrategyMetadata[] memory);\\n\\n    function viewAPF(address token) external view returns (uint256);\\n\\n    function viewValueBorrowable(uint256 trancheId, address valueCurrency)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function yieldType() external view returns (YieldType);\\n}\\n\",\"keccak256\":\"0xfab05ed30c888207fdcad40784148f6d0009898774a0bb4fbbd2b22e3d1234b7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e06040526008805460ff19166001179055611388600e553480156200002457600080fd5b5060405162003a6a38038062003a6a8339810160408190526200004791620002cb565b7f53696d706c6520686f6c64696e6720737472617465677900000000000000000081806001600160a01b038116620000d05760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b0319166080526002805460018082018355606a60008051602062003a4a8339815191529283015560058054808301825560047f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db09182018190558554808501875560669086015582548085019093559101849055835480830185556068908401556003805480840182557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b908101829055815480850190925501829055835491820184556000939093526069910181905560405163b4ed0b6d60e01b8152918201526001600160a01b0382169063b4ed0b6d9060240160206040518083038186803b158015620001e857600080fd5b505afa158015620001fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002239190620002cb565b6001600160a01b031663fae794e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025c57600080fd5b505afa15801562000271573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002979190620002fb565b60a0525060c0525060028054600181018255600091909152606760008051602062003a4a8339815191529091015562000314565b600060208284031215620002dd578081fd5b81516001600160a01b0381168114620002f4578182fd5b9392505050565b6000602082840312156200030d578081fd5b5051919050565b60805160601c60a05160c0516136d2620003786000396000818161082e0152610c33015260006118ae01526000818161050d015281816109c90152818161103a015281816122eb0152818161237e0152818161241501526127e901526136d26000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c80638496e891116101de578063d9cb512c1161010f578063e8ea4fae116100ad578063fa98a4ba1161007c578063fa98a4ba14610942578063fabee7db14610955578063fac82e8c14610968578063fd80d0c31461097b5761038e565b8063e8ea4fae146108eb578063e9c3f77d146108f3578063f12ba3811461091c578063f8903fb71461092f5761038e565b8063e173ad25116100e9578063e173ad2514610829578063e22d284514610850578063e2bbb158146108ac578063e2e730f6146108bf5761038e565b8063d9cb512c14610806578063d9d4afe11461080e578063dc94cb7d146108215761038e565b8063aeb38d8b1161017c578063b832799311610156578063b8327993146107ba578063bf184ea4146107cd578063c5c72dc3146107e0578063d241c9c0146107f35761038e565b8063aeb38d8b14610766578063b06ea8f014610779578063b23d66c2146107825761038e565b8063a4d77f90116101b8578063a4d77f9014610703578063a51c8fab1461072b578063a9bad7b814610740578063abcbc4fc146107535761038e565b80638496e891146106b85780639470505f146106e65780639b0f09ae146106f45761038e565b80633a3db435116102c35780634df87c09116102615780637268d1c0116102305780637268d1c0146106675780637a1a04df1461067a5780637b2c9279146106a85780637dad209b146106b05761038e565b80634df87c09146105b85780635e8762f8146105cb5780636caa9c11146105ec5780636fecdf24146105ff5761038e565b8063447d52ba1161029d578063447d52ba14610575578063459ba127146105885780634a7a7f411461059b5780634d9d01b2146105b05761038e565b80633a3db4351461052f5780633ace96ec146105425780633ff2fa71146105555761038e565b80631f7ea881116103305780632642b6061161030a5780632642b6061461048057806326473a8f146104cc57806328f3fc73146104f5578063392f5f64146105085761038e565b80631f7ea8811461043b57806321fa0f1f1461044e57806322f3e2d4146104635761038e565b80630ad58d2f1161036c5780630ad58d2f146103e1578063110acb23146103f45780631c5eba2b146104145780631dc3a759146104275761038e565b806301c7b9f814610393578063071060a6146103b95780630a3017d9146103ce575b600080fd5b6103a66103a13660046131c5565b61098e565b6040519081526020015b60405180910390f35b6103cc6103c73660046131ad565b6109b3565b005b6103a66103dc366004612fed565b610a79565b6103cc6103ef3660046132f9565b610a82565b610407610402366004612fed565b610ba1565b6040516103b0919061358c565b6103cc6104223660046130dd565b610c82565b6103a66104353660046131ad565b50600090565b6103cc61044936600461305d565b610ce7565b610456610da0565b6040516103b0919061346e565b6008546104709060ff1681565b60405190151581526020016103b0565b6104b461048e366004613025565b60066020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b0390911681526020016103b0565b6103a66104da366004612fed565b6001600160a01b031660009081526010602052604090205490565b6103cc610503366004613025565b610e73565b6104b47f000000000000000000000000000000000000000000000000000000000000000081565b6103cc61053d3660046131ad565b610f6c565b6103cc61055036600461305d565b610fba565b6103a66105633660046131ad565b60116020526000908152604090205481565b6103cc6105833660046131c5565b611014565b6103cc61059636600461327c565b6110ec565b6105a361116d565b6040516103b091906134b1565b6103a66111c5565b6104706105c6366004612fed565b6111d6565b6105de6105d93660046130dd565b6111e9565b6040516103b09291906134e9565b6103a66105fa3660046131ad565b61121c565b61063f61060d366004612fed565b600f60205260009081526040902060018101546002820154600383015460048401546005909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016103b0565b6103a66106753660046131ad565b61123d565b6104706106883660046130dd565b600160209081526000928352604080842090915290825290205460ff1681565b6104b4611263565b6105a361126d565b6106cb6106c636600461322a565b6112c3565b604080519384526020840192909252908201526060016103b0565b6103a6610435366004612fed565b60026040516103b09190613504565b6107166107113660046131c5565b6113e4565b604080519283526020830191909152016103b0565b61073361140d565b6040516103b09190613421565b6103cc61074e3660046131e9565b611419565b6103a66107613660046131ad565b61156c565b6103a66107743660046131ad565b61157c565b6103a6600e5481565b61079561079036600461322a565b61158c565b604080516001600160a01b0390941684526020840192909252908201526060016103b0565b6103cc6107c8366004613108565b61171a565b6103a66107db3660046131ad565b6117f5565b6103a66107ee3660046131ad565b611805565b6104b46108013660046131ad565b6118a6565b6107336119a0565b6104b461081c366004613025565b6119ac565b6105a3611b15565b6103a67f000000000000000000000000000000000000000000000000000000000000000081565b61088861085e3660046131ad565b600d602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b0316908201526060016103b0565b6103cc6108ba3660046132b5565b611b6b565b6103a66108cd366004612fed565b6001600160a01b03166000908152600f602052604090206003015490565b6105a3611b76565b6104b46109013660046131ad565b6000602081905290815260409020546001600160a01b031681565b6103cc61092a366004613159565b611bcc565b6103a661093d3660046131e9565b611c81565b6106cb6109503660046131e9565b611d72565b6104b46109633660046131ad565b611dad565b6103cc610976366004612fed565b611dcb565b6103a66109893660046131c5565b612012565b60006109ab61099c84611dad565b6109a585611805565b84612056565b509392505050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b158015610a1357600080fd5b505afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190613009565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6127105b919050565b60085460ff16610aad5760405162461bcd60e51b8152600401610aa490613525565b60405180910390fd5b610ab6336121f7565b80610b455750610ac5836118a6565b6040516302972b0f60e41b8152336004820152602481018590526001600160a01b039190911690632972b0f09060440160206040518083038186803b158015610b0d57600080fd5b505afa158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b45919061318d565b610b915760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420617574686f72697a656420746f2077697468647261770000000000006044820152606401610aa4565b610b9c838383612220565b505050565b610ba9612f5f565b600080610bc684670de0b6b3a7640000610bc16122af565b612056565b91509150604051806101600160405280306001600160a01b03168152602001856001600160a01b03168152602001610bfd86610a79565b81526001600160a01b0386166000818152600f6020908152604080832060030154828601819052818601889052606086018990527f0000000000000000000000000000000000000000000000000000000000000000608087015260a086015260c08501839052600260e086015292825260109052205461010090910152949350505050565b33610c8b6122e7565b6001600160a01b03161480610caf575033610ca461237a565b6001600160a01b0316145b610ccb5760405162461bcd60e51b8152600401610aa490613555565b6001600160a01b03909116600090815260106020526040902055565b33610cf06122e7565b6001600160a01b03161480610d14575033610d0961237a565b6001600160a01b0316145b80610d235750610d23336123eb565b610d955760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610aa4565b610b9c838383612491565b60606000610dae60096124c7565b905060008167ffffffffffffffff811115610dd957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e1257816020015b610dff612f5f565b815260200190600190039081610df75790505b50905060005b80831115610e6c57610e2e6104026009836124d1565b828281518110610e4e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610e6490613629565b915050610e18565b5091505090565b6001600160a01b03828116600090815260066020908152604080832085851684529091529020541615610f6857610ea86124dd565b60405163179ce80d60e21b81526001600160a01b03848116600483015283811660248301529190911690635e73a0349060440160206040518083038186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190613009565b6001600160a01b0383811660009081526006602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b33610f756122e7565b6001600160a01b03161480610f99575033610f8e61237a565b6001600160a01b0316145b610fb55760405162461bcd60e51b8152600401610aa490613555565b600e55565b33610fc36122e7565b6001600160a01b03161480610fe7575033610fdc61237a565b6001600160a01b0316145b6110035760405162461bcd60e51b8152600401610aa490613555565b61100e600984612515565b50505050565b6040516393552a3d60e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b4919061318d565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b6110f5856118a6565b6001600160a01b0316336001600160a01b0316146111515760405162461bcd60e51b81526020600482015260196024820152784e6f7420617574686f72697a656420746f206d69677261746560381b6044820152606401610aa4565b61115b858461252a565b6111668486836125aa565b5050505050565b606060038054806020026020016040519081016040528092919081815260200182805480156111bb57602002820191906000526020600020905b8154815260200190600101908083116111a7575b5050505050905090565b60006111d160096124c7565b905090565b60006111e360098361261a565b92915050565b600060606111f6846111d6565b604080516020810186905201604051602081830303815290604052915091509250929050565b6005818154811061122c57600080fd5b600091825260209091200154905081565b600061125c61124b83611dad565b61125484611805565b610bc1611263565b9392505050565b60006111d16122af565b606060048054806020026020016040519081016040528092919081815260200182805480156111bb57602002820191906000526020600020908154815260200190600101908083116111a7575050505050905090565b60008060006112d1336121f7565b8061136057506112e0876118a6565b6040516302972b0f60e41b8152336004820152602481018990526001600160a01b039190911690632972b0f09060440160206040518083038186803b15801561132857600080fd5b505afa15801561133c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611360919061318d565b6113ac5760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420617574686f72697a656420746f20636f6c6c656374207969656c64006044820152606401610aa4565b6113b787878661263c565b92506113d46113c588611dad565b6113ce89611805565b87612702565b9398909750929550919350505050565b6000806114026113f385611dad565b6113fc86611805565b85612056565b915091509250929050565b60606111d160096127a5565b60085460ff1661143b5760405162461bcd60e51b8152600401610aa490613525565b611444336121f7565b806114d35750611453836118a6565b6040516302972b0f60e41b8152336004820152602481018590526001600160a01b039190911690632972b0f09060440160206040518083038186803b15801561149b57600080fd5b505afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d3919061318d565b61151f5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420617574686f72697a656420746f206275726e207472616e63686500006044820152606401610aa4565b61152a83838361263c565b5061153e8361153885611805565b83612220565b50506000908152600d60205260408120818155600181019190915560020180546001600160a01b0319169055565b6002818154811061122c57600080fd5b6004818154811061122c57600080fd5b6008546000908190819060ff166115b55760405162461bcd60e51b8152600401610aa490613525565b6115be876118a6565b6001600160a01b0316336001600160a01b03161461161a5760405162461bcd60e51b81526020600482015260196024820152784e6f7420617574686f72697a656420746f206d69677261746560381b6044820152606401610aa4565b600061162588611dad565b9050600061163289611805565b60405163095ea7b360e01b81526001600160a01b038a81166004830152602482018390529192509083169063095ea7b390604401602060405180830381600087803b15801561168057600080fd5b505af1158015611694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b8919061318d565b506116c489888861263c565b5060006116d23084846127b2565b6001600160a01b0384166000908152600f60205260408120600301805492935083929091906117029084906135e6565b90915550929a60009a50919850909650505050505050565b60085460ff1661173c5760405162461bcd60e51b8152600401610aa490613525565b3360009081526001602090815260408083206003845290915290205460ff16801561177757503361176c856118a6565b6001600160a01b0316145b6117b55760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207472616e63686560881b6044820152606401610aa4565b6001600160a01b0383166000908152600f6020908152604080832054878452600d909252909120600101556117ea848461252a565b6111668585836125aa565b6003818154811061122c57600080fd5b6000818152600d60209081526040808320805460028201546001600160a01b03168552601084528285205486865260119094529184205490928491612710916301e133809161185490426135e6565b61185e90866135c7565b61186891906135c7565b61187291906135b3565b61187c91906135b3565b90508082111561189a5761189081836135e6565b9350505050610a7d565b60009350505050610a7d565b6000806118d37f000000000000000000000000000000000000000000000000000000000000000084613644565b6000818152600760205260409020549091506001600160a01b03168061125c57606960009081526020527f366a7b92acda364086cc991f618bf9f10b629ec0f7ae94543f96b691b69ec9925460405163043b4d2f60e51b8152600481018490526001600160a01b0390911690638769a5e09060240160206040518083038186803b15801561196057600080fd5b505afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190613009565b949350505050565b60606111d1600b6127a5565b6001600160a01b03828116600090815260066020908152604080832085851684529091528120549091166111e3576119e26124dd565b6040516302eaec2d60e31b81526001600160a01b03858116600483015284811660248301529190911690631757616890604401600060405180830381600087803b158015611a2f57600080fd5b505af1158015611a43573d6000803e3d6000fd5b50505050611a4f6124dd565b60405163179ce80d60e21b81526001600160a01b03858116600483015284811660248301529190911690635e73a0349060440160206040518083038186803b158015611a9a57600080fd5b505afa158015611aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad29190613009565b6001600160a01b0384811660009081526006602090815260408083208785168452909152902080546001600160a01b031916918316919091179055905092915050565b606060028054806020026020016040519081016040528092919081815260200182805480156111bb57602002820191906000526020600020908154815260200190600101908083116111a7575050505050905090565b610f683383836125aa565b606060058054806020026020016040519081016040528092919081815260200182805480156111bb57602002820191906000526020600020908154815260200190600101908083116111a7575050505050905090565b60085460ff16611bee5760405162461bcd60e51b8152600401610aa490613525565b3360009081526001602090815260408083206003845290915290205460ff1680611c1c5750611c1c336121f7565b611c765760405162461bcd60e51b815260206004820152602560248201527f4e6f7420617574686f72697a656420746f207472616e7366657220757365722060448201526466756e647360d81b6064820152608401610aa4565b610b9c8383836125aa565b6000611c8c336121f7565b80611d1b5750611c9b846118a6565b6040516302972b0f60e41b8152336004820152602481018690526001600160a01b039190911690632972b0f09060440160206040518083038186803b158015611ce357600080fd5b505afa158015611cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1b919061318d565b611d675760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420617574686f72697a656420746f20636f6c6c656374207969656c64006044820152606401610aa4565b61199884848461263c565b6000806000611d818686612012565b9250611d9e611d8f87611dad565b611d9888611805565b86612056565b93979096509294509192505050565b6000908152600d60205260409020600201546001600160a01b031690565b60085460ff16611ded5760405162461bcd60e51b8152600401610aa490613525565b33611df66122e7565b6001600160a01b03161480611e1a575033611e0f61237a565b6001600160a01b0316145b80611e34575033611e296127cf565b6001600160a01b0316145b611ea65760405162461bcd60e51b815260206004820152603860248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a65642064697361626c657200000000000000006064820152608401610aa4565b60005b80611eb4600b6124c7565b1115612004576000611ec7600b836124d1565b90506000611eed826001600160a01b03166000908152600f602052604090206003015490565b90506000611ef9612833565b9050611f068184846127b2565b5060405163095ea7b360e01b81526001600160a01b038281166004830152600019602483015284169063095ea7b390604401602060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a919061318d565b506040516374f1c09760e11b81526001600160a01b038681166004830152848116602483015282169063e9e3812e90604401600060405180830381600087803b158015611fd657600080fd5b505af1158015611fea573d6000803e3d6000fd5b505050505050508080611ffc90613629565b915050611ea9565b50506008805460ff19169055565b6000828152600d6020526040812061199881600f8461203088611dad565b6001600160a01b03166001600160a01b031681526020019081526020016000208561286b565b6001600160a01b03808416600090815260066020908152604080832085851684529091528120549091829116806121155761208f6124dd565b60405163179ce80d60e21b81526001600160a01b03888116600483015286811660248301529190911690635e73a0349060440160206040518083038186803b1580156120da57600080fd5b505afa1580156120ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121129190613009565b90505b6040516313f3552960e21b81526001600160a01b038781166004830152602482018790528581166044830152821690634fcd54a490606401604080518083038186803b15801561216457600080fd5b505afa158015612178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219c91906132d6565b9093509150816121ee5760405162461bcd60e51b815260206004820181905260248201527f556e696e697469616c697a656420626f72726f7761626c65207065722031306b6044820152606401610aa4565b50935093915050565b6001600160a01b0316600090815260016020818152604080842092845291905290205460ff1690565b600061222b84611dad565b905061223684612952565b6122488361224386611805565b612a23565b92506122558282856127b2565b506000848152600d6020526040812080548592906122749084906135e6565b90915550506001600160a01b0381166000908152600f6020526040812060030180548592906122a49084906135e6565b909155505050505050565b606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561234257600080fd5b505afa158015612356573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190613009565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123d757600080fd5b505af1158015612356573d6000803e3d6000fd5b6040516393552a3d60e01b81526103eb60048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906393552a3d9060440160206040518083038186803b15801561245957600080fd5b505afa15801561246d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e3919061318d565b600061249f828401846131ad565b6001600160a01b0385166000908152601060205260409020819055905061100e848484612a3b565b60006111e3825490565b600061125c8383612abb565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b600061125c836001600160a01b038416612af3565b61253560098261261a565b6125795760405162461bcd60e51b81526020600482015260156024820152742737ba1030b71030b8383937bb32b2103a37b5b2b760591b6044820152606401610aa4565b6000918252600d602052604090912060020180546001600160a01b0319166001600160a01b03909216919091179055565b60006125b583611dad565b90506125c083612952565b6125cb848284612c10565b506000838152600d6020526040812080548492906125ea90849061359b565b90915550506001600160a01b0381166000908152600f6020526040812060030180548492906122a490849061359b565b6001600160a01b0381166000908152600183016020526040812054151561125c565b6000838152600d6020526040812081600f8161265788611dad565b6001600160a01b0316815260208101919091526040016000208254909150156126f45761268582828761286b565b925061268f611263565b6040516340c10f1960e01b81526001600160a01b0386811660048301526024820186905291909116906340c10f1990604401600060405180830381600087803b1580156126db57600080fd5b505af11580156126ef573d6000803e3d6000fd5b505050505b546001909101559392505050565b6001600160a01b03808416600090815260066020908152604080832085851684529091528120549091829116806127405761273d86856119ac565b90505b60405163442fd02b60e11b81526001600160a01b03878116600483015260248201879052858116604483015282169063885fa056906064016040805180830381600087803b15801561279157600080fd5b505af1158015612178573d6000803e3d6000fd5b6060600061125c83612c27565b60006127c86001600160a01b0384168584612c83565b5092915050565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561234257600080fd5b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6000612875611263565b6001600160a01b0316826001600160a01b0316146128cc5760405162461bcd60e51b815260206004820152601460248201527357726f6e67207969656c642063757272656e637960601b6044820152606401610aa4565b60018401548354111561294a5760008360000185600101548154811061290257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154846001015461291c91906135e6565b90506801000000000000000081866000015461293891906135c7565b61294291906135b3565b91505061125c565b50600061125c565b6000818152600d60205260409020805415610f685760028101546001600160a01b03166000818152600f602052604081209061298d85611805565b845490915081811115612a0a576129e86129d8606760009081526020527f682158d08466d11c566d5712d4396197fdd67e65be71d83c97ef719ec468867b546001600160a01b031690565b856129e385856135e6565b6127b2565b50808284600301546129fa919061359b565b612a0491906135e6565b60038401555b5090925550506000908152601160205260409020429055565b600081831115612a345750806111e3565b50816111e3565b612a46600984612ce6565b50612a52600b84612ce6565b50612a5b612833565b6040516311848c4560e01b81523060048201526001600160a01b0391909116906311848c4590602401600060405180830381600087803b158015612a9e57600080fd5b505af1158015612ab2573d6000803e3d6000fd5b50505050505050565b6000826000018281548110612ae057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120548015612c06576000612b176001836135e6565b8554909150600090612b2b906001906135e6565b9050818114612bac576000866000018281548110612b5957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612b8a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612bcb57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111e3565b60009150506111e3565b60006127c86001600160a01b038416853085612cfb565b606081600001805480602002602001604051908101604052809291908181526020018280548015612c7757602002820191906000526020600020905b815481526020019060010190808311612c63575b50505050509050919050565b6040516001600160a01b038316602482015260448101829052610b9c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d33565b600061125c836001600160a01b038416612e05565b6040516001600160a01b038085166024830152831660448201526064810182905261100e9085906323b872dd60e01b90608401612caf565b6000612d88826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e549092919063ffffffff16565b805190915015610b9c5780806020019051810190612da6919061318d565b610b9c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aa4565b6000818152600183016020526040812054612e4c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111e3565b5060006111e3565b6060611998848460008585843b612ead5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aa4565b600080866001600160a01b03168587604051612ec99190613405565b60006040518083038185875af1925050503d8060008114612f06576040519150601f19603f3d011682016040523d82523d6000602084013e612f0b565b606091505b5091509150612f1b828286612f26565b979650505050505050565b60608315612f3557508161125c565b825115612f455782518084602001fd5b8160405162461bcd60e51b8152600401610aa49190613512565b60405180610160016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008019168152602001600081526020016000815260200160006002811115612fe057634e487b7160e01b600052602160045260246000fd5b8152602001600081525090565b600060208284031215612ffe578081fd5b813561125c81613684565b60006020828403121561301a578081fd5b815161125c81613684565b60008060408385031215613037578081fd5b823561304281613684565b9150602083013561305281613684565b809150509250929050565b600080600060408486031215613071578081fd5b833561307c81613684565b9250602084013567ffffffffffffffff80821115613098578283fd5b818601915086601f8301126130ab578283fd5b8135818111156130b9578384fd5b8760208285010111156130ca578384fd5b6020830194508093505050509250925092565b600080604083850312156130ef578182fd5b82356130fa81613684565b946020939093013593505050565b600080600080600060a0868803121561311f578081fd5b853561312a81613684565b945060208601359350604086013561314181613684565b94979396509394606081013594506080013592915050565b60008060006060848603121561316d578283fd5b833561317881613684565b95602085013595506040909401359392505050565b60006020828403121561319e578081fd5b8151801515811461125c578182fd5b6000602082840312156131be578081fd5b5035919050565b600080604083850312156131d7578182fd5b82359150602083013561305281613684565b6000806000606084860312156131fd578283fd5b83359250602084013561320f81613684565b9150604084013561321f81613684565b809150509250925092565b6000806000806080858703121561323f578384fd5b84359350602085013561325181613684565b9250604085013561326181613684565b9150606085013561327181613684565b939692955090935050565b600080600080600060a08688031215613293578081fd5b8535945060208601356132a581613684565b9350604086013561314181613684565b600080604083850312156132c7578182fd5b50508035926020909101359150565b600080604083850312156132e8578182fd5b505080516020909101519092909150565b60008060006060848603121561330d578081fd5b8335925060208401359150604084013561321f81613684565b6000815180845261333e8160208601602086016135fd565b601f01601f19169290920160200192915050565b6003811061337057634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252602081015161339b60208401826001600160a01b03169052565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201516133f782850182613352565b505061014090810151910152565b600082516134178184602087016135fd565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156134625783516001600160a01b03168352928401929184019160010161343d565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156134625761349d838551613374565b92840192610160929092019160010161348a565b6020808252825182820181905260009190848201906040850190845b81811015613462578351835292840192918401916001016134cd565b60008315158252604060208301526119986040830184613326565b602081016111e38284613352565b60006020825261125c6020830184613326565b6020808252601690820152755374726174656779206973206e6f742061637469766560501b604082015260600190565b6020808252601e908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e65720000604082015260600190565b61016081016111e38284613374565b600082198211156135ae576135ae613658565b500190565b6000826135c2576135c261366e565b500490565b60008160001904831182151516156135e1576135e1613658565b500290565b6000828210156135f8576135f8613658565b500390565b60005b83811015613618578181015183820152602001613600565b8381111561100e5750506000910152565b600060001982141561363d5761363d613658565b5060010190565b6000826136535761365361366e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461369957600080fd5b5056fea2646970667358221220c82e3b68182e32a66360e48e868d357b1d9c50b5a12e469ad42ff33368a4110564736f6c63430008030033405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038e5760003560e01c80638496e891116101de578063d9cb512c1161010f578063e8ea4fae116100ad578063fa98a4ba1161007c578063fa98a4ba14610942578063fabee7db14610955578063fac82e8c14610968578063fd80d0c31461097b5761038e565b8063e8ea4fae146108eb578063e9c3f77d146108f3578063f12ba3811461091c578063f8903fb71461092f5761038e565b8063e173ad25116100e9578063e173ad2514610829578063e22d284514610850578063e2bbb158146108ac578063e2e730f6146108bf5761038e565b8063d9cb512c14610806578063d9d4afe11461080e578063dc94cb7d146108215761038e565b8063aeb38d8b1161017c578063b832799311610156578063b8327993146107ba578063bf184ea4146107cd578063c5c72dc3146107e0578063d241c9c0146107f35761038e565b8063aeb38d8b14610766578063b06ea8f014610779578063b23d66c2146107825761038e565b8063a4d77f90116101b8578063a4d77f9014610703578063a51c8fab1461072b578063a9bad7b814610740578063abcbc4fc146107535761038e565b80638496e891146106b85780639470505f146106e65780639b0f09ae146106f45761038e565b80633a3db435116102c35780634df87c09116102615780637268d1c0116102305780637268d1c0146106675780637a1a04df1461067a5780637b2c9279146106a85780637dad209b146106b05761038e565b80634df87c09146105b85780635e8762f8146105cb5780636caa9c11146105ec5780636fecdf24146105ff5761038e565b8063447d52ba1161029d578063447d52ba14610575578063459ba127146105885780634a7a7f411461059b5780634d9d01b2146105b05761038e565b80633a3db4351461052f5780633ace96ec146105425780633ff2fa71146105555761038e565b80631f7ea881116103305780632642b6061161030a5780632642b6061461048057806326473a8f146104cc57806328f3fc73146104f5578063392f5f64146105085761038e565b80631f7ea8811461043b57806321fa0f1f1461044e57806322f3e2d4146104635761038e565b80630ad58d2f1161036c5780630ad58d2f146103e1578063110acb23146103f45780631c5eba2b146104145780631dc3a759146104275761038e565b806301c7b9f814610393578063071060a6146103b95780630a3017d9146103ce575b600080fd5b6103a66103a13660046131c5565b61098e565b6040519081526020015b60405180910390f35b6103cc6103c73660046131ad565b6109b3565b005b6103a66103dc366004612fed565b610a79565b6103cc6103ef3660046132f9565b610a82565b610407610402366004612fed565b610ba1565b6040516103b0919061358c565b6103cc6104223660046130dd565b610c82565b6103a66104353660046131ad565b50600090565b6103cc61044936600461305d565b610ce7565b610456610da0565b6040516103b0919061346e565b6008546104709060ff1681565b60405190151581526020016103b0565b6104b461048e366004613025565b60066020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b0390911681526020016103b0565b6103a66104da366004612fed565b6001600160a01b031660009081526010602052604090205490565b6103cc610503366004613025565b610e73565b6104b47f000000000000000000000000000000000000000000000000000000000000000081565b6103cc61053d3660046131ad565b610f6c565b6103cc61055036600461305d565b610fba565b6103a66105633660046131ad565b60116020526000908152604090205481565b6103cc6105833660046131c5565b611014565b6103cc61059636600461327c565b6110ec565b6105a361116d565b6040516103b091906134b1565b6103a66111c5565b6104706105c6366004612fed565b6111d6565b6105de6105d93660046130dd565b6111e9565b6040516103b09291906134e9565b6103a66105fa3660046131ad565b61121c565b61063f61060d366004612fed565b600f60205260009081526040902060018101546002820154600383015460048401546005909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016103b0565b6103a66106753660046131ad565b61123d565b6104706106883660046130dd565b600160209081526000928352604080842090915290825290205460ff1681565b6104b4611263565b6105a361126d565b6106cb6106c636600461322a565b6112c3565b604080519384526020840192909252908201526060016103b0565b6103a6610435366004612fed565b60026040516103b09190613504565b6107166107113660046131c5565b6113e4565b604080519283526020830191909152016103b0565b61073361140d565b6040516103b09190613421565b6103cc61074e3660046131e9565b611419565b6103a66107613660046131ad565b61156c565b6103a66107743660046131ad565b61157c565b6103a6600e5481565b61079561079036600461322a565b61158c565b604080516001600160a01b0390941684526020840192909252908201526060016103b0565b6103cc6107c8366004613108565b61171a565b6103a66107db3660046131ad565b6117f5565b6103a66107ee3660046131ad565b611805565b6104b46108013660046131ad565b6118a6565b6107336119a0565b6104b461081c366004613025565b6119ac565b6105a3611b15565b6103a67f000000000000000000000000000000000000000000000000000000000000000081565b61088861085e3660046131ad565b600d602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b0316908201526060016103b0565b6103cc6108ba3660046132b5565b611b6b565b6103a66108cd366004612fed565b6001600160a01b03166000908152600f602052604090206003015490565b6105a3611b76565b6104b46109013660046131ad565b6000602081905290815260409020546001600160a01b031681565b6103cc61092a366004613159565b611bcc565b6103a661093d3660046131e9565b611c81565b6106cb6109503660046131e9565b611d72565b6104b46109633660046131ad565b611dad565b6103cc610976366004612fed565b611dcb565b6103a66109893660046131c5565b612012565b60006109ab61099c84611dad565b6109a585611805565b84612056565b509392505050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b158015610a1357600080fd5b505afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190613009565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6127105b919050565b60085460ff16610aad5760405162461bcd60e51b8152600401610aa490613525565b60405180910390fd5b610ab6336121f7565b80610b455750610ac5836118a6565b6040516302972b0f60e41b8152336004820152602481018590526001600160a01b039190911690632972b0f09060440160206040518083038186803b158015610b0d57600080fd5b505afa158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b45919061318d565b610b915760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420617574686f72697a656420746f2077697468647261770000000000006044820152606401610aa4565b610b9c838383612220565b505050565b610ba9612f5f565b600080610bc684670de0b6b3a7640000610bc16122af565b612056565b91509150604051806101600160405280306001600160a01b03168152602001856001600160a01b03168152602001610bfd86610a79565b81526001600160a01b0386166000818152600f6020908152604080832060030154828601819052818601889052606086018990527f0000000000000000000000000000000000000000000000000000000000000000608087015260a086015260c08501839052600260e086015292825260109052205461010090910152949350505050565b33610c8b6122e7565b6001600160a01b03161480610caf575033610ca461237a565b6001600160a01b0316145b610ccb5760405162461bcd60e51b8152600401610aa490613555565b6001600160a01b03909116600090815260106020526040902055565b33610cf06122e7565b6001600160a01b03161480610d14575033610d0961237a565b6001600160a01b0316145b80610d235750610d23336123eb565b610d955760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610aa4565b610b9c838383612491565b60606000610dae60096124c7565b905060008167ffffffffffffffff811115610dd957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e1257816020015b610dff612f5f565b815260200190600190039081610df75790505b50905060005b80831115610e6c57610e2e6104026009836124d1565b828281518110610e4e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610e6490613629565b915050610e18565b5091505090565b6001600160a01b03828116600090815260066020908152604080832085851684529091529020541615610f6857610ea86124dd565b60405163179ce80d60e21b81526001600160a01b03848116600483015283811660248301529190911690635e73a0349060440160206040518083038186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190613009565b6001600160a01b0383811660009081526006602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b33610f756122e7565b6001600160a01b03161480610f99575033610f8e61237a565b6001600160a01b0316145b610fb55760405162461bcd60e51b8152600401610aa490613555565b600e55565b33610fc36122e7565b6001600160a01b03161480610fe7575033610fdc61237a565b6001600160a01b0316145b6110035760405162461bcd60e51b8152600401610aa490613555565b61100e600984612515565b50505050565b6040516393552a3d60e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b4919061318d565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b6110f5856118a6565b6001600160a01b0316336001600160a01b0316146111515760405162461bcd60e51b81526020600482015260196024820152784e6f7420617574686f72697a656420746f206d69677261746560381b6044820152606401610aa4565b61115b858461252a565b6111668486836125aa565b5050505050565b606060038054806020026020016040519081016040528092919081815260200182805480156111bb57602002820191906000526020600020905b8154815260200190600101908083116111a7575b5050505050905090565b60006111d160096124c7565b905090565b60006111e360098361261a565b92915050565b600060606111f6846111d6565b604080516020810186905201604051602081830303815290604052915091509250929050565b6005818154811061122c57600080fd5b600091825260209091200154905081565b600061125c61124b83611dad565b61125484611805565b610bc1611263565b9392505050565b60006111d16122af565b606060048054806020026020016040519081016040528092919081815260200182805480156111bb57602002820191906000526020600020908154815260200190600101908083116111a7575050505050905090565b60008060006112d1336121f7565b8061136057506112e0876118a6565b6040516302972b0f60e41b8152336004820152602481018990526001600160a01b039190911690632972b0f09060440160206040518083038186803b15801561132857600080fd5b505afa15801561133c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611360919061318d565b6113ac5760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420617574686f72697a656420746f20636f6c6c656374207969656c64006044820152606401610aa4565b6113b787878661263c565b92506113d46113c588611dad565b6113ce89611805565b87612702565b9398909750929550919350505050565b6000806114026113f385611dad565b6113fc86611805565b85612056565b915091509250929050565b60606111d160096127a5565b60085460ff1661143b5760405162461bcd60e51b8152600401610aa490613525565b611444336121f7565b806114d35750611453836118a6565b6040516302972b0f60e41b8152336004820152602481018590526001600160a01b039190911690632972b0f09060440160206040518083038186803b15801561149b57600080fd5b505afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d3919061318d565b61151f5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420617574686f72697a656420746f206275726e207472616e63686500006044820152606401610aa4565b61152a83838361263c565b5061153e8361153885611805565b83612220565b50506000908152600d60205260408120818155600181019190915560020180546001600160a01b0319169055565b6002818154811061122c57600080fd5b6004818154811061122c57600080fd5b6008546000908190819060ff166115b55760405162461bcd60e51b8152600401610aa490613525565b6115be876118a6565b6001600160a01b0316336001600160a01b03161461161a5760405162461bcd60e51b81526020600482015260196024820152784e6f7420617574686f72697a656420746f206d69677261746560381b6044820152606401610aa4565b600061162588611dad565b9050600061163289611805565b60405163095ea7b360e01b81526001600160a01b038a81166004830152602482018390529192509083169063095ea7b390604401602060405180830381600087803b15801561168057600080fd5b505af1158015611694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b8919061318d565b506116c489888861263c565b5060006116d23084846127b2565b6001600160a01b0384166000908152600f60205260408120600301805492935083929091906117029084906135e6565b90915550929a60009a50919850909650505050505050565b60085460ff1661173c5760405162461bcd60e51b8152600401610aa490613525565b3360009081526001602090815260408083206003845290915290205460ff16801561177757503361176c856118a6565b6001600160a01b0316145b6117b55760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207472616e63686560881b6044820152606401610aa4565b6001600160a01b0383166000908152600f6020908152604080832054878452600d909252909120600101556117ea848461252a565b6111668585836125aa565b6003818154811061122c57600080fd5b6000818152600d60209081526040808320805460028201546001600160a01b03168552601084528285205486865260119094529184205490928491612710916301e133809161185490426135e6565b61185e90866135c7565b61186891906135c7565b61187291906135b3565b61187c91906135b3565b90508082111561189a5761189081836135e6565b9350505050610a7d565b60009350505050610a7d565b6000806118d37f000000000000000000000000000000000000000000000000000000000000000084613644565b6000818152600760205260409020549091506001600160a01b03168061125c57606960009081526020527f366a7b92acda364086cc991f618bf9f10b629ec0f7ae94543f96b691b69ec9925460405163043b4d2f60e51b8152600481018490526001600160a01b0390911690638769a5e09060240160206040518083038186803b15801561196057600080fd5b505afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190613009565b949350505050565b60606111d1600b6127a5565b6001600160a01b03828116600090815260066020908152604080832085851684529091528120549091166111e3576119e26124dd565b6040516302eaec2d60e31b81526001600160a01b03858116600483015284811660248301529190911690631757616890604401600060405180830381600087803b158015611a2f57600080fd5b505af1158015611a43573d6000803e3d6000fd5b50505050611a4f6124dd565b60405163179ce80d60e21b81526001600160a01b03858116600483015284811660248301529190911690635e73a0349060440160206040518083038186803b158015611a9a57600080fd5b505afa158015611aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad29190613009565b6001600160a01b0384811660009081526006602090815260408083208785168452909152902080546001600160a01b031916918316919091179055905092915050565b606060028054806020026020016040519081016040528092919081815260200182805480156111bb57602002820191906000526020600020908154815260200190600101908083116111a7575050505050905090565b610f683383836125aa565b606060058054806020026020016040519081016040528092919081815260200182805480156111bb57602002820191906000526020600020908154815260200190600101908083116111a7575050505050905090565b60085460ff16611bee5760405162461bcd60e51b8152600401610aa490613525565b3360009081526001602090815260408083206003845290915290205460ff1680611c1c5750611c1c336121f7565b611c765760405162461bcd60e51b815260206004820152602560248201527f4e6f7420617574686f72697a656420746f207472616e7366657220757365722060448201526466756e647360d81b6064820152608401610aa4565b610b9c8383836125aa565b6000611c8c336121f7565b80611d1b5750611c9b846118a6565b6040516302972b0f60e41b8152336004820152602481018690526001600160a01b039190911690632972b0f09060440160206040518083038186803b158015611ce357600080fd5b505afa158015611cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1b919061318d565b611d675760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420617574686f72697a656420746f20636f6c6c656374207969656c64006044820152606401610aa4565b61199884848461263c565b6000806000611d818686612012565b9250611d9e611d8f87611dad565b611d9888611805565b86612056565b93979096509294509192505050565b6000908152600d60205260409020600201546001600160a01b031690565b60085460ff16611ded5760405162461bcd60e51b8152600401610aa490613525565b33611df66122e7565b6001600160a01b03161480611e1a575033611e0f61237a565b6001600160a01b0316145b80611e34575033611e296127cf565b6001600160a01b0316145b611ea65760405162461bcd60e51b815260206004820152603860248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a65642064697361626c657200000000000000006064820152608401610aa4565b60005b80611eb4600b6124c7565b1115612004576000611ec7600b836124d1565b90506000611eed826001600160a01b03166000908152600f602052604090206003015490565b90506000611ef9612833565b9050611f068184846127b2565b5060405163095ea7b360e01b81526001600160a01b038281166004830152600019602483015284169063095ea7b390604401602060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a919061318d565b506040516374f1c09760e11b81526001600160a01b038681166004830152848116602483015282169063e9e3812e90604401600060405180830381600087803b158015611fd657600080fd5b505af1158015611fea573d6000803e3d6000fd5b505050505050508080611ffc90613629565b915050611ea9565b50506008805460ff19169055565b6000828152600d6020526040812061199881600f8461203088611dad565b6001600160a01b03166001600160a01b031681526020019081526020016000208561286b565b6001600160a01b03808416600090815260066020908152604080832085851684529091528120549091829116806121155761208f6124dd565b60405163179ce80d60e21b81526001600160a01b03888116600483015286811660248301529190911690635e73a0349060440160206040518083038186803b1580156120da57600080fd5b505afa1580156120ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121129190613009565b90505b6040516313f3552960e21b81526001600160a01b038781166004830152602482018790528581166044830152821690634fcd54a490606401604080518083038186803b15801561216457600080fd5b505afa158015612178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219c91906132d6565b9093509150816121ee5760405162461bcd60e51b815260206004820181905260248201527f556e696e697469616c697a656420626f72726f7761626c65207065722031306b6044820152606401610aa4565b50935093915050565b6001600160a01b0316600090815260016020818152604080842092845291905290205460ff1690565b600061222b84611dad565b905061223684612952565b6122488361224386611805565b612a23565b92506122558282856127b2565b506000848152600d6020526040812080548592906122749084906135e6565b90915550506001600160a01b0381166000908152600f6020526040812060030180548592906122a49084906135e6565b909155505050505050565b606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561234257600080fd5b505afa158015612356573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190613009565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123d757600080fd5b505af1158015612356573d6000803e3d6000fd5b6040516393552a3d60e01b81526103eb60048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906393552a3d9060440160206040518083038186803b15801561245957600080fd5b505afa15801561246d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e3919061318d565b600061249f828401846131ad565b6001600160a01b0385166000908152601060205260409020819055905061100e848484612a3b565b60006111e3825490565b600061125c8383612abb565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b600061125c836001600160a01b038416612af3565b61253560098261261a565b6125795760405162461bcd60e51b81526020600482015260156024820152742737ba1030b71030b8383937bb32b2103a37b5b2b760591b6044820152606401610aa4565b6000918252600d602052604090912060020180546001600160a01b0319166001600160a01b03909216919091179055565b60006125b583611dad565b90506125c083612952565b6125cb848284612c10565b506000838152600d6020526040812080548492906125ea90849061359b565b90915550506001600160a01b0381166000908152600f6020526040812060030180548492906122a490849061359b565b6001600160a01b0381166000908152600183016020526040812054151561125c565b6000838152600d6020526040812081600f8161265788611dad565b6001600160a01b0316815260208101919091526040016000208254909150156126f45761268582828761286b565b925061268f611263565b6040516340c10f1960e01b81526001600160a01b0386811660048301526024820186905291909116906340c10f1990604401600060405180830381600087803b1580156126db57600080fd5b505af11580156126ef573d6000803e3d6000fd5b505050505b546001909101559392505050565b6001600160a01b03808416600090815260066020908152604080832085851684529091528120549091829116806127405761273d86856119ac565b90505b60405163442fd02b60e11b81526001600160a01b03878116600483015260248201879052858116604483015282169063885fa056906064016040805180830381600087803b15801561279157600080fd5b505af1158015612178573d6000803e3d6000fd5b6060600061125c83612c27565b60006127c86001600160a01b0384168584612c83565b5092915050565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561234257600080fd5b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6000612875611263565b6001600160a01b0316826001600160a01b0316146128cc5760405162461bcd60e51b815260206004820152601460248201527357726f6e67207969656c642063757272656e637960601b6044820152606401610aa4565b60018401548354111561294a5760008360000185600101548154811061290257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154846001015461291c91906135e6565b90506801000000000000000081866000015461293891906135c7565b61294291906135b3565b91505061125c565b50600061125c565b6000818152600d60205260409020805415610f685760028101546001600160a01b03166000818152600f602052604081209061298d85611805565b845490915081811115612a0a576129e86129d8606760009081526020527f682158d08466d11c566d5712d4396197fdd67e65be71d83c97ef719ec468867b546001600160a01b031690565b856129e385856135e6565b6127b2565b50808284600301546129fa919061359b565b612a0491906135e6565b60038401555b5090925550506000908152601160205260409020429055565b600081831115612a345750806111e3565b50816111e3565b612a46600984612ce6565b50612a52600b84612ce6565b50612a5b612833565b6040516311848c4560e01b81523060048201526001600160a01b0391909116906311848c4590602401600060405180830381600087803b158015612a9e57600080fd5b505af1158015612ab2573d6000803e3d6000fd5b50505050505050565b6000826000018281548110612ae057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120548015612c06576000612b176001836135e6565b8554909150600090612b2b906001906135e6565b9050818114612bac576000866000018281548110612b5957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612b8a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612bcb57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111e3565b60009150506111e3565b60006127c86001600160a01b038416853085612cfb565b606081600001805480602002602001604051908101604052809291908181526020018280548015612c7757602002820191906000526020600020905b815481526020019060010190808311612c63575b50505050509050919050565b6040516001600160a01b038316602482015260448101829052610b9c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d33565b600061125c836001600160a01b038416612e05565b6040516001600160a01b038085166024830152831660448201526064810182905261100e9085906323b872dd60e01b90608401612caf565b6000612d88826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e549092919063ffffffff16565b805190915015610b9c5780806020019051810190612da6919061318d565b610b9c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aa4565b6000818152600183016020526040812054612e4c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111e3565b5060006111e3565b6060611998848460008585843b612ead5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aa4565b600080866001600160a01b03168587604051612ec99190613405565b60006040518083038185875af1925050503d8060008114612f06576040519150601f19603f3d011682016040523d82523d6000602084013e612f0b565b606091505b5091509150612f1b828286612f26565b979650505050505050565b60608315612f3557508161125c565b825115612f455782518084602001fd5b8160405162461bcd60e51b8152600401610aa49190613512565b60405180610160016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008019168152602001600081526020016000815260200160006002811115612fe057634e487b7160e01b600052602160045260246000fd5b8152602001600081525090565b600060208284031215612ffe578081fd5b813561125c81613684565b60006020828403121561301a578081fd5b815161125c81613684565b60008060408385031215613037578081fd5b823561304281613684565b9150602083013561305281613684565b809150509250929050565b600080600060408486031215613071578081fd5b833561307c81613684565b9250602084013567ffffffffffffffff80821115613098578283fd5b818601915086601f8301126130ab578283fd5b8135818111156130b9578384fd5b8760208285010111156130ca578384fd5b6020830194508093505050509250925092565b600080604083850312156130ef578182fd5b82356130fa81613684565b946020939093013593505050565b600080600080600060a0868803121561311f578081fd5b853561312a81613684565b945060208601359350604086013561314181613684565b94979396509394606081013594506080013592915050565b60008060006060848603121561316d578283fd5b833561317881613684565b95602085013595506040909401359392505050565b60006020828403121561319e578081fd5b8151801515811461125c578182fd5b6000602082840312156131be578081fd5b5035919050565b600080604083850312156131d7578182fd5b82359150602083013561305281613684565b6000806000606084860312156131fd578283fd5b83359250602084013561320f81613684565b9150604084013561321f81613684565b809150509250925092565b6000806000806080858703121561323f578384fd5b84359350602085013561325181613684565b9250604085013561326181613684565b9150606085013561327181613684565b939692955090935050565b600080600080600060a08688031215613293578081fd5b8535945060208601356132a581613684565b9350604086013561314181613684565b600080604083850312156132c7578182fd5b50508035926020909101359150565b600080604083850312156132e8578182fd5b505080516020909101519092909150565b60008060006060848603121561330d578081fd5b8335925060208401359150604084013561321f81613684565b6000815180845261333e8160208601602086016135fd565b601f01601f19169290920160200192915050565b6003811061337057634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252602081015161339b60208401826001600160a01b03169052565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201516133f782850182613352565b505061014090810151910152565b600082516134178184602087016135fd565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156134625783516001600160a01b03168352928401929184019160010161343d565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156134625761349d838551613374565b92840192610160929092019160010161348a565b6020808252825182820181905260009190848201906040850190845b81811015613462578351835292840192918401916001016134cd565b60008315158252604060208301526119986040830184613326565b602081016111e38284613352565b60006020825261125c6020830184613326565b6020808252601690820152755374726174656779206973206e6f742061637469766560501b604082015260600190565b6020808252601e908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e65720000604082015260600190565b61016081016111e38284613374565b600082198211156135ae576135ae613658565b500190565b6000826135c2576135c261366e565b500490565b60008160001904831182151516156135e1576135e1613658565b500290565b6000828210156135f8576135f8613658565b500390565b60005b83811015613618578181015183820152602001613600565b8381111561100e5750506000910152565b600060001982141561363d5761363d613658565b5060010190565b6000826136535761365361366e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461369957600080fd5b5056fea2646970667358221220c82e3b68182e32a66360e48e868d357b1d9c50b5a12e469ad42ff33368a4110564736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14106,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 14112,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 14115,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14118,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14121,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14124,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12200,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_oracleCache",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 9719,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_slotTranches",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6717,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "isActive",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 6723,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_approvedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(AddressSet)3278_storage"
      },
      {
        "astId": 6726,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_allTokensEver",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(AddressSet)3278_storage"
      },
      {
        "astId": 6738,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_accounts",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(CollateralAccount)6733_storage)"
      },
      {
        "astId": 6755,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "apfSmoothingPer10k",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6760,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "tokenMetadata",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(TokenMetadata)6752_storage)"
      },
      {
        "astId": 15185,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "_stabilityFeePer10k",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15189,
        "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
        "label": "depositTime",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(TokenMetadata)6752_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Strategy.TokenMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenMetadata)6752_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(CollateralAccount)6733_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Strategy.CollateralAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralAccount)6733_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3278_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3277,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2977_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CollateralAccount)6733_storage": {
        "encoding": "inplace",
        "label": "struct Strategy.CollateralAccount",
        "members": [
          {
            "astId": 6728,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "collateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6730,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "yieldCheckptIdx",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6732,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "trancheToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2977_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2972,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2976,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenMetadata)6752_storage": {
        "encoding": "inplace",
        "label": "struct Strategy.TokenMetadata",
        "members": [
          {
            "astId": 6741,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "yieldCheckpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 6743,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "cumulYieldPerCollateralFP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6745,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "totalCollateralPast",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6747,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "totalCollateralNow",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6749,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "apfLastUpdated",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6751,
            "contract": "contracts/strategies/SimpleHoldingStrategy.sol:SimpleHoldingStrategy",
            "label": "apf",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}