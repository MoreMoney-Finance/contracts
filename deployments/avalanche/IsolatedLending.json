{
  "address": "0x15F6405c71D68d31Ec303B7EC9617a79F0A869b1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_containedIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_holdingStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "_listenForOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_oracleCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtCeiling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feePer10k",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "trancheIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "batchCollectYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "trancheIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "yieldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "batchCollectYieldValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "trancheIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "batchViewValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "trancheIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "batchViewValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "trancheIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "batchViewYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "name": "borrowable2LiqThresh",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "burnTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "collectYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "collectYieldValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ceiling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "configureAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "containedIn",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "containerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "depositAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentHoldingStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "isViable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqThreshConversionFactorPer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "liquidateTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldRecipient",
          "type": "address"
        }
      ],
      "name": "migrateStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "mintDepositAndBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "mintTranche",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "mintingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "newCurrentOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "registerDepositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "repayAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ceiling",
          "type": "uint256"
        }
      ],
      "name": "setAssetDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setFeesPer10k",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "convFactor",
          "type": "uint256"
        }
      ],
      "name": "setLiqThreshConversionFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupTrancheSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trancheDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "viewAllILMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "debtCeiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowablePer10k",
              "type": "uint256"
            }
          ],
          "internalType": "struct IsolatedLending.ILMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllStrategyMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "debtCeiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintingFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "APF",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowablePer10k",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "valuePer1e18",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "strategyName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "liqThresh",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tvl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "harvestBalance2Tally",
              "type": "uint256"
            },
            {
              "internalType": "enum IStrategy.YieldType",
              "name": "yieldType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IsolatedLending.ILStrategyMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "viewBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "viewCurrentHoldingStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewILMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "debtCeiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowablePer10k",
              "type": "uint256"
            }
          ],
          "internalType": "struct IsolatedLending.ILMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "viewPositionsByOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "trancheId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct IsolatedLending.PositionMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "viewTranchesByOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "viewValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "viewYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        }
      ],
      "name": "viewYieldValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        }
      ],
      "name": "viewYieldValueBorrowableDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f321895bacc0077e103f0be70bd9ebc4abd454ea8c0b09c963eaea97156c731",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x15F6405c71D68d31Ec303B7EC9617a79F0A869b1",
    "transactionIndex": 1,
    "gasUsed": "5523441",
    "logsBloom": "0x
    "blockHash": "0x325a5638923c8c9a4cf00e62bea834df398525ce949e2b02719f78d347870035",
    "transactionHash": "0x5f321895bacc0077e103f0be70bd9ebc4abd454ea8c0b09c963eaea97156c731",
    "logs": [],
    "blockNumber": 6655112,
    "cumulativeGasUsed": "5657930",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x70429C9357D150E3a9088f94b8D91d944106137B"
  ],
  "solcInputHash": "28c9fd7028c7235019505a3b598cc36a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_containedIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_holdingStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"_listenForOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_oracleCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePer10k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"trancheIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"batchCollectYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"trancheIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"yieldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"batchCollectYieldValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"trancheIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"batchViewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"trancheIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"batchViewValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"trancheIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"batchViewYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"name\":\"borrowable2LiqThresh\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burnTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"collectYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"collectYieldValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"configureAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"containedIn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"containerId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"depositAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"getCurrentHoldingStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"isViable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqThreshConversionFactorPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"liquidateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldRecipient\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintDepositAndBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"mintTranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"newCurrentOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"registerDepositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"repayAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"}],\"name\":\"setAssetDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeesPer10k\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"convFactor\",\"type\":\"uint256\"}],\"name\":\"setLiqThreshConversionFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupTrancheSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"viewAllILMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"internalType\":\"struct IsolatedLending.ILMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllStrategyMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"APF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuePer1e18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"strategyName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"liqThresh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestBalance2Tally\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategy.YieldType\",\"name\":\"yieldType\",\"type\":\"uint8\"}],\"internalType\":\"struct IsolatedLending.ILStrategyMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"viewBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"viewCurrentHoldingStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewILMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"internalType\":\"struct IsolatedLending.ILMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewPositionsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IsolatedLending.PositionMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewTranchesByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"viewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"viewYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"}],\"name\":\"viewYieldValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"}],\"name\":\"viewYieldValueBorrowableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintingFee(uint256,address)\":{\"notice\":\"Minting fee per stable amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IsolatedLending.sol\":\"IsolatedLending\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/IsolatedLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./Tranche.sol\\\";\\nimport \\\"./roles/CallsStableCoinMintBurn.sol\\\";\\nimport \\\"./roles/DependsOnLiquidator.sol\\\";\\nimport \\\"./roles/DependsOnFeeRecipient.sol\\\";\\nimport \\\"./oracles/OracleAware.sol\\\";\\n\\ncontract IsolatedLending is\\n    OracleAware,\\n    Tranche,\\n    CallsStableCoinMintBurn,\\n    DependsOnLiquidator,\\n    DependsOnFeeRecipient\\n{\\n    struct AssetConfig {\\n        uint256 debtCeiling;\\n        uint256 feePer10k;\\n        uint256 totalDebt;\\n    }\\n    mapping(address => AssetConfig) public assetConfigs;\\n\\n    uint256 public liqThreshConversionFactorPer10k = 5_000;\\n\\n    mapping(uint256 => uint256) public trancheDebt;\\n    uint256 public pendingFees;\\n\\n    constructor(address _roles)\\n        Tranche(\\\"MoreMoney Isolated Lending\\\", \\\"MMIL\\\", _roles)\\n    {\\n        _charactersPlayed.push(ISOLATED_LENDING);\\n        _rolesPlayed.push(FUND_TRANSFERER);\\n    }\\n\\n    function setAssetDebtCeiling(address token, uint256 ceiling)\\n        external\\n        onlyOwnerExecDisabler\\n    {\\n        assetConfigs[token].debtCeiling = ceiling;\\n    }\\n\\n    function setFeesPer10k(address token, uint256 fee) external onlyOwnerExec {\\n        assetConfigs[token].feePer10k = fee;\\n    }\\n\\n    function configureAsset(\\n        address token,\\n        uint256 ceiling,\\n        uint256 fee\\n    ) external onlyOwnerExecActivator {\\n        AssetConfig storage config = assetConfigs[token];\\n        config.debtCeiling = ceiling;\\n        config.feePer10k = fee;\\n    }\\n\\n    function mintDepositAndBorrow(\\n        address collateralToken,\\n        address strategy,\\n        uint256 collateralAmount,\\n        uint256 borrowAmount,\\n        address recipient\\n    ) external virtual returns (uint256) {\\n        uint256 trancheId = _mintTranche(\\n            msg.sender,\\n            0,\\n            strategy,\\n            collateralToken,\\n            0,\\n            collateralAmount\\n        );\\n        _borrow(trancheId, borrowAmount, recipient);\\n        return trancheId;\\n    }\\n\\n    function depositAndBorrow(\\n        uint256 trancheId,\\n        uint256 collateralAmount,\\n        uint256 borrowAmount,\\n        address recipient\\n    ) external virtual {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw yield\\\"\\n        );\\n\\n        _deposit(msg.sender, trancheId, collateralAmount);\\n        _borrow(trancheId, borrowAmount, recipient);\\n    }\\n\\n    function _borrow(\\n        uint256 trancheId,\\n        uint256 borrowAmount,\\n        address recipient\\n    ) internal {\\n        if (borrowAmount > 0) {\\n            address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n            address token = IStrategy(holdingStrategy).trancheToken(trancheId);\\n            uint256 fee = mintingFee(borrowAmount, token);\\n\\n            trancheDebt[trancheId] += borrowAmount + fee;\\n\\n            AssetConfig storage assetConfig = assetConfigs[token];\\n            assetConfig.totalDebt += borrowAmount + fee;\\n            require(\\n                assetConfig.debtCeiling >= assetConfig.totalDebt,\\n                \\\"Exceeded debt ceiling\\\"\\n            );\\n            pendingFees += fee;\\n\\n            uint256 excessYield = _yieldAndViability(trancheId);\\n            _mintStable(recipient, borrowAmount + excessYield);\\n        }\\n    }\\n\\n    function _yieldAndViability(uint256 trancheId)\\n        internal\\n        returns (uint256 excessYield)\\n    {\\n        uint256 debt = trancheDebt[trancheId];\\n        address stable = address(stableCoin());\\n        (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        ) = _collectYieldValueBorrowable(\\n                trancheId,\\n                stable,\\n                stable,\\n                address(this)\\n            );\\n        require(\\n            _isViable(debt, yield, value, borrowablePer10k),\\n            \\\"Borow breaks min collateralization threshold\\\"\\n        );\\n\\n        if (yield > debt) {\\n            trancheDebt[trancheId] = 0;\\n            excessYield = yield - debt;\\n        } else {\\n            trancheDebt[trancheId] = debt - yield;\\n            excessYield = 0;\\n        }\\n        _burnStable(address(this), yield);\\n    }\\n\\n    function repayAndWithdraw(\\n        uint256 trancheId,\\n        uint256 collateralAmount,\\n        uint256 repayAmount,\\n        address recipient\\n    ) external virtual {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw yield\\\"\\n        );\\n\\n        repayAmount = min(repayAmount, trancheDebt[trancheId]);\\n        _repay(msg.sender, trancheId, repayAmount);\\n        _withdraw(trancheId, collateralAmount, recipient);\\n    }\\n\\n    function _withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address recipient\\n    ) internal virtual override {\\n        if (tokenAmount > 0) {\\n            uint256 excessYield = _yieldAndViability(trancheId);\\n            if (excessYield > 0) {\\n                _mintStable(recipient, excessYield);\\n            }\\n            super._withdraw(trancheId, tokenAmount, recipient);\\n        }\\n    }\\n\\n    function _repay(\\n        address payer,\\n        uint256 trancheId,\\n        uint256 repayAmount\\n    ) internal virtual {\\n        if (repayAmount > 0) {\\n            _burnStable(payer, repayAmount);\\n            trancheDebt[trancheId] -= repayAmount;\\n        }\\n    }\\n\\n    function _checkAssetToken(address token) internal view virtual override {\\n        require(\\n            assetConfigs[token].debtCeiling > 0,\\n            \\\"Token is not whitelisted\\\"\\n        );\\n    }\\n\\n    function _isViable(\\n        uint256 debt,\\n        uint256 yield,\\n        uint256 value,\\n        uint256 borrowablePer10k\\n    ) internal pure returns (bool) {\\n        // value / debt > 10k / borrowable\\n        return (value + yield) * borrowablePer10k >= debt * 10_000;\\n    }\\n\\n    function isViable(uint256 trancheId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        uint256 debt = trancheDebt[trancheId];\\n        // allow for tiny amounts of dust\\n        if (debt < 10_000) {\\n            return super.isViable(trancheId);\\n        } else {\\n            address stable = address(stableCoin());\\n            (\\n                uint256 yield,\\n                uint256 value,\\n                uint256 borrowablePer10k\\n            ) = viewYieldValueBorrowable(trancheId, stable, stable);\\n            bool collateralized = _isViable(\\n                trancheDebt[trancheId],\\n                yield,\\n                value,\\n                borrowablePer10k\\n            );\\n            return collateralized && super.isViable(trancheId);\\n        }\\n    }\\n\\n    /// Minting fee per stable amount\\n    function mintingFee(uint256 stableAmount, address collateral)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 feePer10k = assetConfigs[collateral].feePer10k;\\n        if (feePer10k > 0) {\\n            return (feePer10k * stableAmount) / 10_000;\\n        } else {\\n            return (assetConfigs[address(0)].feePer10k * stableAmount) / 10_000;\\n        }\\n    }\\n\\n    function withdrawFees() external {\\n        _mintStable(feeRecipient(), pendingFees);\\n        pendingFees = 0;\\n    }\\n\\n    function liquidateTo(\\n        uint256 trancheId,\\n        address recipient,\\n        bytes calldata _data\\n    ) external {\\n        require(isLiquidator(msg.sender), \\\"Not authorized to liquidate\\\");\\n        _safeTransfer(ownerOf(trancheId), recipient, trancheId, _data);\\n    }\\n\\n    function viewYieldValueBorrowableDebt(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k,\\n            uint256 debt\\n        )\\n    {\\n        (yield, value, borrowablePer10k) = viewYieldValueBorrowable(\\n            trancheId,\\n            yieldCurrency,\\n            valueCurrency\\n        );\\n        debt = trancheDebt[trancheId];\\n    }\\n\\n    struct ILMetadata {\\n        uint256 debtCeiling;\\n        uint256 totalDebt;\\n        uint256 mintingFee;\\n        uint256 borrowablePer10k;\\n    }\\n\\n    function viewILMetadata(address token)\\n        public\\n        view\\n        returns (ILMetadata memory)\\n    {\\n        AssetConfig storage assetConfig = assetConfigs[token];\\n        (, uint256 borrowablePer10k) = _viewValueBorrowable(\\n            token,\\n            0,\\n            address(stableCoin())\\n        );\\n        return\\n            ILMetadata({\\n                debtCeiling: assetConfig.debtCeiling,\\n                totalDebt: assetConfig.totalDebt,\\n                mintingFee: assetConfig.feePer10k,\\n                borrowablePer10k: borrowablePer10k\\n            });\\n    }\\n\\n    function viewAllILMetadata(address[] calldata tokens)\\n        public\\n        view\\n        returns (ILMetadata[] memory)\\n    {\\n        ILMetadata[] memory result = new ILMetadata[](tokens.length);\\n        for (uint256 i; tokens.length > i; i++) {\\n            result[i] = viewILMetadata(tokens[i]);\\n        }\\n\\n        return result;\\n    }\\n\\n    struct ILStrategyMetadata {\\n        uint256 debtCeiling;\\n        uint256 totalDebt;\\n        uint256 stabilityFee;\\n        uint256 mintingFee;\\n        address strategy;\\n        address token;\\n        uint256 APF;\\n        uint256 totalCollateral;\\n        uint256 borrowablePer10k;\\n        uint256 valuePer1e18;\\n        bytes32 strategyName;\\n        uint256 liqThresh;\\n        uint256 tvl;\\n        uint256 harvestBalance2Tally;\\n        IStrategy.YieldType yieldType;\\n    }\\n\\n    function viewAllStrategyMetadata()\\n        public\\n        view\\n        returns (ILStrategyMetadata[] memory)\\n    {\\n        IStrategy.StrategyMetadata[] memory stratMeta = strategyRegistry()\\n            .viewAllEnabledStrategyMetadata();\\n\\n        ILStrategyMetadata[] memory result = new ILStrategyMetadata[](\\n            stratMeta.length\\n        );\\n\\n        for (uint256 i; result.length > i; i++) {\\n            ILStrategyMetadata memory meta = result[i];\\n            IStrategy.StrategyMetadata memory sMeta = stratMeta[i];\\n            ILMetadata memory ilMeta = viewILMetadata(sMeta.token);\\n\\n            meta.debtCeiling = ilMeta.debtCeiling;\\n            meta.totalDebt = ilMeta.totalDebt;\\n            meta.mintingFee = ilMeta.mintingFee;\\n\\n            meta.strategy = sMeta.strategy;\\n            meta.token = sMeta.token;\\n            meta.APF = sMeta.APF;\\n            meta.totalCollateral = sMeta.totalCollateral;\\n            meta.borrowablePer10k = sMeta.borrowablePer10k;\\n            meta.valuePer1e18 = sMeta.valuePer1e18;\\n            meta.strategyName = sMeta.strategyName;\\n\\n            meta.liqThresh = borrowable2LiqThresh(sMeta.borrowablePer10k);\\n\\n            meta.tvl = sMeta.tvl;\\n            meta.harvestBalance2Tally = sMeta.harvestBalance2Tally;\\n            meta.yieldType = sMeta.yieldType;\\n            meta.stabilityFee = sMeta.stabilityFee;\\n        }\\n\\n        return result;\\n    }\\n\\n    function borrowable2LiqThresh(uint256 borrowablePer10k)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            min(\\n                10_000,\\n                borrowablePer10k +\\n                    (10_000 * (10_000 - borrowablePer10k)) /\\n                    liqThreshConversionFactorPer10k\\n            );\\n    }\\n\\n    function setLiqThreshConversionFactor(uint256 convFactor)\\n        external\\n        onlyOwnerExec\\n    {\\n        liqThreshConversionFactorPer10k = convFactor;\\n    }\\n\\n    struct PositionMetadata {\\n        uint256 trancheId;\\n        address strategy;\\n        uint256 collateral;\\n        uint256 debt;\\n        address token;\\n    }\\n\\n    function viewPositionsByOwner(address owner)\\n        external\\n        view\\n        returns (PositionMetadata[] memory)\\n    {\\n        uint256[] memory trancheIds = viewTranchesByOwner(owner);\\n        PositionMetadata[] memory result = new PositionMetadata[](\\n            trancheIds.length\\n        );\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 _trancheId = trancheIds[i];\\n            address holdingStrategy = _holdingStrategies[_trancheId];\\n            result[i] = PositionMetadata({\\n                trancheId: _trancheId,\\n                strategy: holdingStrategy,\\n                token: IStrategy(holdingStrategy).trancheToken(_trancheId),\\n                collateral: IStrategy(holdingStrategy)\\n                    .viewTargetCollateralAmount(_trancheId),\\n                debt: trancheDebt[_trancheId]\\n            });\\n        }\\n\\n        return result;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x122896534c66a5c83aa23f80eb7ff4f4e428b14577599eeb6f8afe8f40c15101\",\"license\":\"BUSL-1.1\"},\"contracts/OracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./oracles/OracleAware.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./roles/DependsOnOracleListener.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract OracleRegistry is RoleAware, DependsOracleListener {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    mapping(address => mapping(address => address)) public tokenOracle;\\n    mapping(address => mapping(address => EnumerableSet.AddressSet)) _listeners;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(ORACLE_REGISTRY);\\n    }\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        address oracle,\\n        uint256 borrowablePer10k,\\n        bytes calldata data\\n    ) external onlyOwnerExecActivator {\\n        tokenOracle[token][pegCurrency] = oracle;\\n        IOracle(oracle).setOracleParams(\\n            token,\\n            pegCurrency,\\n            borrowablePer10k,\\n            data\\n        );\\n    }\\n\\n    function listenForCurrentOracleUpdates(address token, address pegCurrency)\\n        external\\n    {\\n        require(isOracleListener(msg.sender), \\\"Not allowed to listen\\\");\\n        _listeners[token][pegCurrency].add(msg.sender);\\n        OracleAware(msg.sender).newCurrentOracle(token, pegCurrency);\\n    }\\n}\\n\",\"keccak256\":\"0x59041f3c52118ff8b2fbd314006956c830bd6edade5df461fefcca32cba86125\",\"license\":\"BUSL-1.1\"},\"contracts/ProxyOwnershipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IProxyOwnership.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nabstract contract ProxyOwnershipERC721 is ERC721Enumerable, IProxyOwnership {\\n    using Address for address;\\n\\n    mapping(uint256 => uint256) public _containedIn;\\n\\n    function containedIn(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address owner, uint256 containerId)\\n    {\\n        return (ownerOf(tokenId), _containedIn[tokenId]);\\n    }\\n\\n    function isAuthorized(address spender, uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        address tokenOwner = ownerOf(tokenId);\\n        return\\n            _isApprovedOrOwner(spender, tokenId) ||\\n            (tokenOwner.isContract() &&\\n                IProxyOwnership(tokenOwner).isAuthorized(\\n                    spender,\\n                    _containedIn[tokenId]\\n                ));\\n    }\\n}\\n\",\"keccak256\":\"0x19d4011ef6556f94466bc4d3c6d5ef12a349b07a3a3b9b3786de24a7ee3c5b59\",\"license\":\"BUSL-1.1\"},\"contracts/Stablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnMinterBurner.sol\\\";\\n\\ncontract Stablecoin is\\n    RoleAware,\\n    ERC20,\\n    ReentrancyGuard,\\n    DependsOnMinterBurner\\n{\\n    uint256 public globalDebtCeiling = 100_000 ether;\\n\\n    constructor(address _roles) RoleAware(_roles) ERC20(\\\"USD Money\\\", \\\"USDM\\\") {\\n        _charactersPlayed.push(STABLECOIN);\\n    }\\n\\n    function mint(address account, uint256 amount) external nonReentrant {\\n        require(isMinterBurner(msg.sender), \\\"Not an autorized minter/burner\\\");\\n        _mint(account, amount);\\n\\n        require(\\n            globalDebtCeiling > totalSupply(),\\n            \\\"Total supply exceeds global debt ceiling\\\"\\n        );\\n    }\\n\\n    function burn(address account, uint256 amount) external nonReentrant {\\n        require(isMinterBurner(msg.sender), \\\"Not an authorized minter/burner\\\");\\n        _burn(account, amount);\\n    }\\n\\n    function setGlobalDebtCeiling(uint256 debtCeiling) external onlyOwnerExec {\\n        globalDebtCeiling = debtCeiling;\\n    }\\n}\\n\",\"keccak256\":\"0xe5ae20707d793ededbc85bd4ca411cf3accd48c9e5dee82cf87163b23a5916cf\",\"license\":\"BUSL-1.1\"},\"contracts/StrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// TODO: handle non-ERC20 migrations\\n\\ncontract StrategyRegistry is RoleAware {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    mapping(address => address) public replacementStrategy;\\n\\n    EnumerableSet.AddressSet enabledStrategies;\\n    EnumerableSet.AddressSet allStrategiesEver;\\n\\n    mapping(address => uint256) public _tokenCount;\\n    uint256 public totalTokenStratRows;\\n    uint256 public enabledTokenStratRows;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(STRATEGY_REGISTRY);\\n    }\\n\\n    function allEnabledStrategies() external view returns (address[] memory) {\\n        return enabledStrategies.values();\\n    }\\n\\n    function enableStrategy(address strat) external onlyOwnerExec {\\n        enabledStrategies.add(strat);\\n        allStrategiesEver.add(strat);\\n        updateTokenCount(strat);\\n    }\\n\\n    function disableStrategy(address strat) external onlyOwnerExec {\\n        totalTokenStratRows -= _tokenCount[strat];\\n        enabledStrategies.remove(strat);\\n    }\\n\\n    function enabledStrategy(address strat) external view returns (bool) {\\n        return enabledStrategies.contains(strat);\\n    }\\n\\n    function replaceStrategy(address legacyStrat, address replacementStrat)\\n        external\\n        onlyOwnerExec\\n    {\\n        require(\\n            enabledStrategies.contains(replacementStrat),\\n            \\\"Replacement strategy is not enabled\\\"\\n        );\\n        IStrategy(legacyStrat).migrateAllTo(replacementStrat);\\n        enabledStrategies.remove(legacyStrat);\\n        replacementStrategy[legacyStrat] = replacementStrat;\\n    }\\n\\n    function getCurrentStrategy(address strat) external view returns (address) {\\n        address result = strat;\\n        while (replacementStrategy[result] != address(0)) {\\n            result = replacementStrategy[result];\\n        }\\n        return result;\\n    }\\n\\n    function migrateTokenTo(address destination, address token) external {\\n        uint256 amount = IERC20(token).balanceOf(msg.sender);\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        IERC20(token).approve(destination, amount);\\n    }\\n\\n    function updateTokenCount(address strat) public {\\n        require(enabledStrategies.contains(strat), \\\"Not an enabled strategy!\\\");\\n        uint256 oldCount = _tokenCount[strat];\\n        uint256 newCount = IStrategy(strat).approvedTokensCount();\\n        totalTokenStratRows = totalTokenStratRows + newCount - oldCount;\\n        _tokenCount[strat] = newCount;\\n    }\\n\\n    function viewAllEnabledStrategyMetadata()\\n        external\\n        view\\n        returns (IStrategy.StrategyMetadata[] memory)\\n    {\\n        IStrategy.StrategyMetadata[]\\n            memory result = new IStrategy.StrategyMetadata[](\\n                totalTokenStratRows\\n            );\\n        uint256 enabledTotal = enabledStrategies.length();\\n        uint256 resultI;\\n        for (uint256 stratI; enabledTotal > stratI; stratI++) {\\n            IStrategy strat = IStrategy(enabledStrategies.at(stratI));\\n            IStrategy.StrategyMetadata[] memory meta = strat\\n                .viewAllStrategyMetadata();\\n            for (uint256 i; meta.length > i; i++) {\\n                result[resultI + i] = meta[i];\\n            }\\n            resultI += meta.length;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xeb51459b4bb1950b80c20c74608b4e2ca49e0f0f6d2347e60ea5f99d9c763743\",\"license\":\"BUSL-1.1\"},\"contracts/Tranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ProxyOwnershipERC721.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./StrategyRegistry.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnStrategyRegistry.sol\\\";\\nimport \\\"./roles/DependsOnFundTransferer.sol\\\";\\n\\ncontract Tranche is\\n    ProxyOwnershipERC721,\\n    DependsOnTrancheIDService,\\n    DependsOnStrategyRegistry,\\n    DependsOnFundTransferer,\\n    RoleAware,\\n    IAsset\\n{\\n    using Address for address;\\n\\n    mapping(uint256 => address) public _holdingStrategies;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _roles\\n    ) ERC721(_name, _symbol) RoleAware(_roles) {\\n        _rolesPlayed.push(TRANCHE);\\n    }\\n\\n    function _mintTranche(\\n        address minter,\\n        uint256 vaultId,\\n        address strategy,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) internal returns (uint256 trancheId) {\\n        require(\\n            strategyRegistry().enabledStrategy(strategy),\\n            \\\"Strategy not approved\\\"\\n        );\\n\\n        trancheId = trancheIdService().getNextTrancheId();\\n\\n        _holdingStrategies[trancheId] = strategy;\\n        _containedIn[trancheId] = vaultId;\\n        _checkAssetToken(assetToken);\\n        _safeMint(minter, trancheId, abi.encode(vaultId));\\n\\n        IStrategy(strategy).registerMintTranche(\\n            minter,\\n            trancheId,\\n            assetToken,\\n            assetTokenId,\\n            assetAmount\\n        );\\n    }\\n\\n    function mintTranche(\\n        uint256 vaultId,\\n        address strategy,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) external returns (uint256 trancheId) {\\n        return\\n            _mintTranche(\\n                msg.sender,\\n                vaultId,\\n                strategy,\\n                assetToken,\\n                assetTokenId,\\n                assetAmount\\n            );\\n    }\\n\\n    function deposit(uint256 trancheId, uint256 tokenAmount) external override {\\n        _deposit(msg.sender, trancheId, tokenAmount);\\n    }\\n\\n    function registerDepositFor(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 tokenAmount\\n    ) external override {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Not authorized to transfer user funds\\\"\\n        );\\n        _deposit(depositor, trancheId, tokenAmount);\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 tokenAmount\\n    ) internal virtual {\\n        IStrategy(getCurrentHoldingStrategy(trancheId)).registerDepositFor(\\n            depositor,\\n            trancheId,\\n            tokenAmount\\n        );\\n    }\\n\\n    function withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address recipient\\n    ) external override {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw\\\"\\n        );\\n        _withdraw(trancheId, tokenAmount, recipient);\\n    }\\n\\n    function _withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address recipient\\n    ) internal virtual {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        IStrategy(holdingStrategy).withdraw(trancheId, tokenAmount, recipient);\\n\\n        require(isViable(trancheId), \\\"Tranche not viable after withdraw\\\");\\n    }\\n\\n    function burnTranche(\\n        uint256 trancheId,\\n        address yieldToken,\\n        address recipient\\n    ) external override {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw\\\"\\n        );\\n\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        IStrategy(holdingStrategy).burnTranche(\\n            trancheId,\\n            yieldToken,\\n            recipient\\n        );\\n\\n        require(isViable(trancheId), \\\"Tranche not viable after withdraw\\\");\\n    }\\n\\n    function _collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) internal returns (uint256) {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        return\\n            IStrategy(holdingStrategy).collectYield(\\n                trancheId,\\n                currency,\\n                recipient\\n            );\\n    }\\n\\n    function collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) public virtual override returns (uint256) {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw yield\\\"\\n        );\\n        return _collectYield(trancheId, currency, recipient);\\n    }\\n\\n    function batchCollectYield(\\n        uint256[] calldata trancheIds,\\n        address currency,\\n        address recipient\\n    ) public returns (uint256) {\\n        uint256 yield;\\n\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n            require(\\n                isAuthorized(msg.sender, trancheId),\\n                \\\"not authorized to withdraw yield\\\"\\n            );\\n\\n            yield += _collectYield(trancheId, currency, recipient);\\n        }\\n        return yield;\\n    }\\n\\n    function viewYield(uint256 trancheId, address currency)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return IStrategy(holdingStrategy).viewYield(trancheId, currency);\\n    }\\n\\n    function batchViewYield(uint256[] calldata trancheIds, address currency)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 yield;\\n\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            yield += viewYield(trancheId, currency);\\n        }\\n        return yield;\\n    }\\n\\n    function viewValue(uint256 trancheId, address currency)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return IStrategy(holdingStrategy).viewValue(trancheId, currency);\\n    }\\n\\n    function batchViewValue(uint256[] calldata trancheIds, address currency)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 value;\\n\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            value += viewValue(trancheId, currency);\\n        }\\n\\n        return value;\\n    }\\n\\n    function viewBorrowable(uint256 trancheId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return IStrategy(holdingStrategy).viewBorrowable(trancheId);\\n    }\\n\\n    function batchViewValueBorrowable(\\n        uint256[] calldata trancheIds,\\n        address currency\\n    ) public view returns (uint256, uint256) {\\n        uint256 totalValue;\\n        uint256 totalBorrowablePer10k;\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            (uint256 value, uint256 borrowablePer10k) = IStrategy(\\n                _holdingStrategies[trancheId]\\n            ).viewValueBorrowable(trancheId, currency);\\n            totalBorrowablePer10k += value * borrowablePer10k;\\n        }\\n\\n        return (totalValue, totalBorrowablePer10k / totalValue);\\n    }\\n\\n    function collectYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        public\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(\\n            isAuthorized(msg.sender, trancheId) || isFundTransferer(msg.sender),\\n            \\\"not authorized to withdraw yield\\\"\\n        );\\n        return\\n            _collectYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency,\\n                recipient\\n            );\\n    }\\n\\n    function _collectYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        return\\n            IStrategy(holdingStrategy).collectYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency,\\n                recipient\\n            );\\n    }\\n\\n    function batchCollectYieldValueBorrowable(\\n        uint256[] calldata trancheIds,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        public\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        )\\n    {\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n            (\\n                uint256 _yield,\\n                uint256 _value,\\n                uint256 _borrowablePer10k\\n            ) = collectYieldValueBorrowable(\\n                    trancheId,\\n                    yieldCurrency,\\n                    valueCurrency,\\n                    recipient\\n                );\\n            yield += _yield;\\n            value += _value;\\n            borrowablePer10k += _borrowablePer10k * _value;\\n        }\\n        borrowablePer10k = borrowablePer10k / value;\\n    }\\n\\n    function viewYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return\\n            IStrategy(holdingStrategy).viewYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency\\n            );\\n    }\\n\\n    function isViable(uint256 trancheId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        address tokenOwner = ownerOf(trancheId);\\n        if (tokenOwner.isContract()) {\\n            IProxyOwnership bearer = IProxyOwnership(tokenOwner);\\n            return bearer.isViable(_containedIn[trancheId]);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function migrateStrategy(\\n        uint256 trancheId,\\n        address destination,\\n        address yieldToken,\\n        address yieldRecipient\\n    )\\n        external\\n        override\\n        returns (\\n            address token,\\n            uint256 tokenId,\\n            uint256 targetAmount\\n        )\\n    {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to migrate tranche\\\"\\n        );\\n\\n        require(\\n            strategyRegistry().enabledStrategy(destination),\\n            \\\"Strategy not approved\\\"\\n        );\\n\\n        address sourceStrategy = getCurrentHoldingStrategy(trancheId);\\n        (token, tokenId, targetAmount) = IStrategy(sourceStrategy)\\n            .migrateStrategy(\\n                trancheId,\\n                destination,\\n                yieldToken,\\n                yieldRecipient\\n            );\\n\\n        _acceptStrategyMigration(\\n            trancheId,\\n            sourceStrategy,\\n            destination,\\n            token,\\n            tokenId,\\n            targetAmount\\n        );\\n    }\\n\\n    function _acceptStrategyMigration(\\n        uint256 trancheId,\\n        address tokenSource,\\n        address destination,\\n        address token,\\n        uint256 tokenId,\\n        uint256 targetAmount\\n    ) internal {\\n        IStrategy(destination).acceptMigration(\\n            trancheId,\\n            tokenSource,\\n            token,\\n            tokenId,\\n            targetAmount\\n        );\\n\\n        _holdingStrategies[trancheId] = destination;\\n    }\\n\\n    function getCurrentHoldingStrategy(uint256 trancheId)\\n        public\\n        returns (address)\\n    {\\n        address oldStrat = _holdingStrategies[trancheId];\\n        StrategyRegistry registry = strategyRegistry();\\n        address newStrat = registry.getCurrentStrategy(oldStrat);\\n\\n        if (oldStrat != newStrat) {\\n            _acceptStrategyMigration(\\n                trancheId,\\n                address(registry),\\n                newStrat,\\n                IStrategy(oldStrat).trancheToken(trancheId),\\n                IStrategy(oldStrat).trancheTokenID(trancheId),\\n                IStrategy(oldStrat).viewTargetCollateralAmount(trancheId)\\n            );\\n        }\\n\\n        return newStrat;\\n    }\\n\\n    function viewCurrentHoldingStrategy(uint256 trancheId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return\\n            StrategyRegistry(strategyRegistry()).getCurrentStrategy(\\n                _holdingStrategies[trancheId]\\n            );\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal override {\\n        super._safeTransfer(from, to, tokenId, _data);\\n        _containedIn[tokenId] = abi.decode(_data, (uint256));\\n    }\\n\\n    function setupTrancheSlot() external {\\n        trancheIdService().setupTrancheSlot();\\n    }\\n\\n    function _checkAssetToken(address token) internal view virtual {}\\n\\n    function viewTranchesByOwner(address owner)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        uint256 num = balanceOf(owner);\\n        uint256[] memory result = new uint256[](num);\\n        for (uint256 i; num > i; i++) {\\n            result[i] = tokenOfOwnerByIndex(owner, i);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4787a8f465a1ab391e9f154b45bb2d7bdcdaa639401a89152f7e9e2b51b444e8\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\n\\nabstract contract TrancheIDAware is RoleAware, DependsOnTrancheIDService {\\n    uint256 immutable totalTrancheSlots;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        totalTrancheSlots = TrancheIDService(\\n            Roles(_roles).mainCharacters(TRANCHE_ID_SERVICE)\\n        ).totalTrancheSlots();\\n    }\\n\\n    mapping(uint256 => address) _slotTranches;\\n\\n    function tranche(uint256 trancheId) public view returns (address) {\\n        uint256 slot = trancheId % totalTrancheSlots;\\n        address trancheContract = _slotTranches[slot];\\n        if (trancheContract == address(0)) {\\n            trancheContract = trancheIdService().slotTranches(slot);\\n        }\\n\\n        return trancheContract;\\n    }\\n}\\n\",\"keccak256\":\"0x5bb76f49729b9c9f20e09c82bd52888c63eece2d947b81141b5c4dec4caf4fa6\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnTranche.sol\\\";\\n\\ncontract TrancheIDService is RoleAware, DependsOnTranche {\\n    uint256 public constant totalTrancheSlots = 1e8;\\n    uint256 public nextTrancheSlot = 1;\\n\\n    struct TrancheSlot {\\n        uint256 nextTrancheIdRange;\\n        uint256 trancheSlot;\\n    }\\n\\n    mapping(address => TrancheSlot) public trancheSlots;\\n    mapping(uint256 => address) public slotTranches;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function getNextTrancheId() external returns (uint256 id) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        TrancheSlot storage slot = trancheSlots[msg.sender];\\n        require(slot.trancheSlot != 0, \\\"Caller doesn't have a slot\\\");\\n        id = slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n        slot.nextTrancheIdRange++;\\n    }\\n\\n    function setupTrancheSlot() external returns (TrancheSlot memory) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        require(\\n            trancheSlots[msg.sender].trancheSlot == 0,\\n            \\\"Tranche already has a slot\\\"\\n        );\\n        trancheSlots[msg.sender] = TrancheSlot({\\n            nextTrancheIdRange: 1,\\n            trancheSlot: nextTrancheSlot\\n        });\\n        slotTranches[nextTrancheSlot] = msg.sender;\\n        nextTrancheSlot++;\\n        return trancheSlots[msg.sender];\\n    }\\n\\n    function viewNextTrancheId(address trancheContract)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheSlot storage slot = trancheSlots[trancheContract];\\n        return slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n    }\\n\\n    function viewTrancheContractByID(uint256 trancheId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return slotTranches[trancheId % totalTrancheSlots];\\n    }\\n\\n    function viewSlotByTrancheContract(address tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return trancheSlots[tranche].trancheSlot;\\n    }\\n}\\n\",\"keccak256\":\"0x2ff50771604993c3d0c405e26e33a054d55c7e5291e41993086c0c911a9d97fc\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../TrancheIDAware.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\nabstract contract OracleAware is RoleAware, DependsOnOracleRegistry {\\n    mapping(address => mapping(address => address)) public _oracleCache;\\n\\n    constructor() {\\n        _rolesPlayed.push(ORACLE_LISTENER);\\n    }\\n\\n    function newCurrentOracle(address token, address pegCurrency) external {\\n        if (_oracleCache[token][pegCurrency] != address(0)) {\\n            // make sure we don't init cache without listening\\n            _oracleCache[token][pegCurrency] = oracleRegistry().tokenOracle(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    function _listenForOracle(address token, address pegCurrency)\\n        public\\n        returns (address oracle)\\n    {\\n        if (_oracleCache[token][pegCurrency] == address(0)) {\\n            oracleRegistry().listenForCurrentOracleUpdates(token, pegCurrency);\\n            oracle = oracleRegistry().tokenOracle(token, pegCurrency);\\n            _oracleCache[token][pegCurrency] = oracle;\\n        }\\n    }\\n\\n    function _viewValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        return IOracle(oracle).viewAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    function _getValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = _listenForOracle(token, valueCurrency);\\n        }\\n\\n        return IOracle(oracle).getAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    function _viewValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value, uint256 borrowablePer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        (value, borrowablePer10k) = IOracle(oracle).viewPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n\\n        require(borrowablePer10k > 0, \\\"Uninitialized borrowable per 10k\\\");\\n    }\\n\\n    function _getValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value, uint256 borrowablerPer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = _listenForOracle(token, valueCurrency);\\n        }\\n\\n        (value, borrowablerPer10k) = IOracle(oracle).getPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n\\n        require(borrowablerPer10k > 0, \\\"Uninitialized borrowable per 10k\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3f43392a8cd1fb540b3da7a87c4cd64b42851d3b74b971c882325395ef891339\",\"license\":\"BUSL-1.1\"},\"contracts/roles/CallsStableCoinMintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependsOnStableCoin.sol\\\";\\n\\nabstract contract CallsStableCoinMintBurn is DependsOnStableCoin {\\n    constructor() {\\n        _rolesPlayed.push(MINTER_BURNER);\\n    }\\n\\n    function _mintStable(address account, uint256 amount) internal {\\n        stableCoin().mint(account, amount);\\n    }\\n\\n    function _burnStable(address account, uint256 amount) internal {\\n        stableCoin().burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc68e2165d8db32702b8a69155ff5acfc3db5dd72c18b648dc002fdc3aef7f3f1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xe60ca0ee32e5ddbb66bf65cd9358f7cd5bcee3de9e78c8427e8fe58a7d5d94e4\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnFeeRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnFeeRecipient is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(FEE_RECIPIENT);\\n    }\\n\\n    function feeRecipient() internal view returns (address) {\\n        return mainCharacterCache[FEE_RECIPIENT];\\n    }\\n}\\n\",\"keccak256\":\"0x9d1ad57c63532b22e883defa9e768e775e2da690f03978b5ca3cb4357b213e76\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnFundTransferer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnFundTransferer is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(FUND_TRANSFERER);\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n}\\n\",\"keccak256\":\"0x0d6d42f9d7e5a3643f7b1da53be3773fb93100906665f91d27fe258431b9f610\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnLiquidator is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(LIQUIDATOR);\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n}\\n\",\"keccak256\":\"0x4af68e548047bbf1b41322fc140cff416f39928881a2968317f918dc3875cdd9\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnMinterBurner.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnMinterBurner is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(MINTER_BURNER);\\n    }\\n\\n    function isMinterBurner(address contr) internal view returns (bool) {\\n        return roleCache[contr][MINTER_BURNER];\\n    }\\n}\\n\",\"keccak256\":\"0x5863a6fd5193f04eec8e572cedc8060133d109445f4147d16ff528355eceb211\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleListener.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOracleListener is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(ORACLE_LISTENER);\\n    }\\n\\n    function isOracleListener(address contr) internal view returns (bool) {\\n        return roleCache[contr][ORACLE_LISTENER];\\n    }\\n}\\n\",\"keccak256\":\"0x12ae03a26b336364f75b3e9f720808e9685e7e18d52d71b4f7e166a0cce87540\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\n\\nabstract contract DependsOnOracleRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(ORACLE_REGISTRY);\\n    }\\n\\n    function oracleRegistry() internal view returns (OracleRegistry) {\\n        return OracleRegistry(mainCharacterCache[ORACLE_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xfbac5de676c7a5e178c70f897c70e366c39de56fe07c830ca8733a2ff1ebcfd3\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnStableCoin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../Stablecoin.sol\\\";\\n\\nabstract contract DependsOnStableCoin is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(STABLECOIN);\\n    }\\n\\n    function stableCoin() internal view returns (Stablecoin) {\\n        return Stablecoin(mainCharacterCache[STABLECOIN]);\\n    }\\n}\\n\",\"keccak256\":\"0x153e3a51fe0c85849aeaea0599ef716f540d5fcee309e822670fe951ecce9bf1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnStrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../StrategyRegistry.sol\\\";\\n\\nabstract contract DependsOnStrategyRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(STRATEGY_REGISTRY);\\n    }\\n\\n    function strategyRegistry() internal view returns (StrategyRegistry) {\\n        return StrategyRegistry(mainCharacterCache[STRATEGY_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xe863f111fb83af25b55b7899cb1c22cbe6cb316921f6f5a73077f18bbd54375b\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnTranche is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(TRANCHE);\\n    }\\n\\n    function isTranche(address contr) internal view returns (bool) {\\n        return roleCache[contr][TRANCHE];\\n    }\\n}\\n\",\"keccak256\":\"0x6e67b0afd0d3fc00998b226343fef13aeca167d19eb8cec8b8a55ebf96063962\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../TrancheIDService.sol\\\";\\n\\nabstract contract DependsOnTrancheIDService is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function trancheIdService() internal view returns (TrancheIDService) {\\n        return TrancheIDService(mainCharacterCache[TRANCHE_ID_SERVICE]);\\n    }\\n}\\n\",\"keccak256\":\"0x88e728c6f64f4e84351f9eaa921bfca6f3dc22b58d433d8077a844edb9bd93c1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.getRole(ACTIVATOR, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x51333b30c6d7814d5f8cbd86fef19cde8732cda16c96f4e2e069d659e89a6dc4\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant LIQUIDATOR = 5;\\n\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x46e286203c6188b0ed8c67d09a1158acb2dcd5b931ba51e7d6f980fcc8b42714\",\"license\":\"BUSL-1.1\"},\"interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IAsset {\\n    function deposit(uint256 trancheId, uint256 tokenAmount) external;\\n\\n    function registerDepositFor(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 amount\\n    ) external;\\n\\n    function withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address recipient\\n    ) external;\\n\\n    function burnTranche(\\n        uint256 trancheId,\\n        address yieldToken,\\n        address recipient\\n    ) external;\\n\\n    function migrateStrategy(\\n        uint256 trancheId,\\n        address targetStrategy,\\n        address yieldToken,\\n        address yieldRecipient\\n    )\\n        external\\n        returns (\\n            address token,\\n            uint256 tokenId,\\n            uint256 targetAmount\\n        );\\n\\n    function collectYield(\\n        uint256 tokenId,\\n        address currency,\\n        address recipient\\n    ) external returns (uint256);\\n\\n    function viewYield(uint256 tokenId, address currency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function viewValue(uint256 tokenId, address currency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function viewBorrowable(uint256 tokenId) external view returns (uint256);\\n\\n    function collectYieldValueBorrowable(\\n        uint256 tokenId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        external\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        );\\n\\n    function viewYieldValueBorrowable(\\n        uint256 tokenId,\\n        address yieldCurrency,\\n        address valueCurrency\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        );\\n}\\n\",\"keccak256\":\"0xe04c6e881d622edcea8d935ce7ae521f7378618d1af7783c9b8351e33125240d\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256);\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256, uint256);\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256, uint256);\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        uint256 borrowable,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// TODO: compatible with NFTs\\n\",\"keccak256\":\"0x58b453d894b93c6fbd184ebfb39c3fda3f89843c38a6d84fcb5d2f75cbc243d8\",\"license\":\"BUSL-1.1\"},\"interfaces/IProxyOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// TODO naming of these different proxy functions\\n\\ninterface IProxyOwnership {\\n    function containedIn(uint256 tokenId)\\n        external\\n        view\\n        returns (address containerAddress, uint256 containerId);\\n\\n    function isAuthorized(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isViable(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaadb532483d1abca0ae2c47a496ad810e510119a64db56b4adb2d619ebd14d7c\",\"license\":\"BUSL-1.1\"},\"interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IStrategy is IAsset {\\n    enum YieldType {\\n        REPAYING,\\n        COMPOUNDING,\\n        NOYIELD\\n    }\\n\\n    struct StrategyMetadata {\\n        address strategy;\\n        address token;\\n        uint256 APF;\\n        uint256 totalCollateral;\\n        uint256 borrowablePer10k;\\n        uint256 valuePer1e18;\\n        bytes32 strategyName;\\n        uint256 tvl;\\n        uint256 harvestBalance2Tally;\\n        YieldType yieldType;\\n        uint256 stabilityFee;\\n    }\\n\\n    function acceptMigration(\\n        uint256 trancheId,\\n        address sourceStrategy,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function registerMintTranche(\\n        address minter,\\n        uint256 trancheId,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) external;\\n\\n    function strategyName() external view returns (bytes32);\\n\\n    function isActive() external returns (bool);\\n\\n    function migrateAllTo(address destination) external;\\n\\n    function trancheToken(uint256 trancheId)\\n        external\\n        view\\n        returns (address token);\\n\\n    function trancheTokenID(uint256 trancheId)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    function viewTargetCollateralAmount(uint256 trancheId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approvedToken(address token) external view returns (bool);\\n\\n    function viewAllApprovedTokens() external view returns (address[] memory);\\n\\n    function approvedTokensCount() external view returns (uint256);\\n\\n    function viewStrategyMetadata(address token)\\n        external\\n        view\\n        returns (StrategyMetadata memory);\\n\\n    function viewAllStrategyMetadata()\\n        external\\n        view\\n        returns (StrategyMetadata[] memory);\\n\\n    function viewAPF(address token) external view returns (uint256);\\n\\n    function viewValueBorrowable(uint256 trancheId, address valueCurrency)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function yieldType() external view returns (YieldType);\\n}\\n\",\"keccak256\":\"0xfab05ed30c888207fdcad40784148f6d0009898774a0bb4fbbd2b22e3d1234b7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040526113886014553480156200001757600080fd5b5060405162005f2b38038062005f2b8339810160408190526200003a9162000328565b6040518060400160405280601a81526020017f4d6f72654d6f6e65792049736f6c61746564204c656e64696e67000000000000815250604051806040016040528060048152602001631353525360e21b815250828083838160009080519060200190620000a992919062000282565b508051620000bf90600190602084019062000282565b5050600d805460018181018355606960008051602062005f0b83398151915292830155825480820190935560689290910191909155600e8054808301825560009190915260008051602062005eeb8339815191520155506001600160a01b0381166200017c5760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b0319166080525050600d805460018082018355606a60008051602062005f0b8339815191529283015560108054808301825560047f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67291820155815480840183556003908201558454808401865560669085015581548084018355600290820155600e8054808501909155600560008051602062005eeb83398151915290910155845480840190955560679490930193909355600f8054808301909155606b7f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802909101558254808201845560009390935291015550620003959050565b828054620002909062000358565b90600052602060002090601f016020900481019282620002b45760008555620002ff565b82601f10620002cf57805160ff1916838001178555620002ff565b82800160010185558215620002ff579182015b82811115620002ff578251825591602001919060010190620002e2565b506200030d92915062000311565b5090565b5b808211156200030d576000815560010162000312565b6000602082840312156200033a578081fd5b81516001600160a01b038116811462000351578182fd5b9392505050565b600181811c908216806200036d57607f821691505b602082108114156200038f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c615b0d620003de6000396000818161070701528181610e06015281816119b00152818161385e015281816138f601528181613fc901526142b60152615b0d6000f3fe608060405234801561001057600080fd5b50600436106104695760003560e01c8063751618911161024c578063c87b56dd11610146578063e985e9c5116100c3578063f8903fb711610087578063f8903fb714610b3f578063f9ed4cc014610b52578063fa98a4ba14610b7b578063fb6475bd14610b8e578063fd80d0c314610ba157610469565b8063e985e9c514610aa1578063e9c3f77d14610add578063e9d07fe814610b06578063eab9209614610b19578063f12ba38114610b2c57610469565b8063dee7ae701161010a578063dee7ae7014610a55578063e0fab71a14610a75578063e2bbb15814610a7e578063e670309c14610a91578063e8ea4fae14610a9957610469565b8063c87b56dd146109e1578063c9491a96146109f4578063d9d4afe114610a27578063dc94cb7d14610a3a578063ddd07b7614610a4257610469565b8063983b42f7116101d4578063aeb38d8b11610198578063aeb38d8b1461095d578063b23d66c214610970578063b25e25f4146109a8578063b88d4fde146109bb578063bf184ea4146109ce57610469565b8063983b42f7146108fe578063a061ba5f14610911578063a22cb46514610924578063a9bad7b814610937578063abcbc4fc1461094a57610469565b80637dad209b1161021b5780637dad209b146108a85780638496e891146108b057806391130d95146108c357806393856b16146108e357806395d89b41146108f657610469565b8063751618911461080a5780637609d7f61461083857806379bc3efa146108675780637a1a04df1461087a57610469565b806326b089de116103685780634a7a7f41116102e5578063621fdd37116102a9578063621fdd37146107ab5780636352211e146107be5780636caa9c11146107d157806370a08231146107e45780637268d1c0146107f757610469565b80634a7a7f41146107575780634f6ccce71461075f578063562f37d0146107725780635a10b8281461078557806361b9fea91461079857610469565b806335b176ab1161032c57806335b176ab146106e2578063392f5f641461070257806342842e0e14610729578063447d52ba1461073c578063476343ee1461074f57610469565b806326b089de1461068357806328f3fc73146106965780632972b0f0146106a95780632f745c59146106bc57806332935f44146106cf57610469565b80630ad58d2f116103f657806318160ddd116103ba57806318160ddd1461061657806321fa0f1f1461061e578063224438d11461063357806323b872dd1461063c5780632642b6061461064f57610469565b80630ad58d2f146105885780630d6390441461059b5780630e3b95ff146105bb57806312baf5da146105db578063136f9cef146105ee57610469565b806306fdde031161043d57806306fdde03146104ee578063071060a614610503578063081812fc1461051857806308754a7314610543578063095ea7b31461057557610469565b80620a5ccf1461046e57806301c7b9f81461049757806301ffc9a7146104b857806304c7e767146104db575b600080fd5b61048161047c366004614d34565b610bb4565b60405161048e91906157ec565b60405180910390f35b6104aa6104a536600461531a565b610c73565b60405190815260200161048e565b6104cb6104c636600461527f565b610d0f565b604051901515815260200161048e565b6104aa6104e9366004614e9f565b610d34565b6104f6610d5e565b60405161048e9190615824565b6105166105113660046152ea565b610df0565b005b61052b6105263660046152ea565b610eb6565b6040516001600160a01b03909116815260200161048e565b6105566105513660046152ea565b610f50565b604080516001600160a01b03909316835260208301919091520161048e565b610516610583366004614f2a565b610f73565b6105166105963660046154d3565b611089565b6104aa6105a93660046152ea565b60156020526000908152604090205481565b6105ce6105c9366004614fbf565b6110ea565b60405161048e9190615612565b6105166105e93660046152ea565b6111fc565b6106016105fc36600461513e565b61127a565b6040805192835260208301919091520161048e565b6008546104aa565b610626611396565b60405161048e9190615681565b6104aa60165481565b61051661064a366004614da4565b611604565b61052b61065d366004614d6c565b60116020908152600092835260408084209091529082529020546001600160a01b031681565b6104aa61069136600461531a565b611635565b6105166106a4366004614d6c565b6116b0565b6104cb6106b7366004614f2a565b6117a9565b6104aa6106ca366004614f2a565b61186d565b6104aa6106dd36600461513e565b611903565b6104aa6106f03660046152ea565b600a6020526000908152604090205481565b61052b7f000000000000000000000000000000000000000000000000000000000000000081565b610516610737366004614da4565b61196f565b61051661074a36600461531a565b61198a565b610516611a62565b610481611aaf565b6104aa61076d3660046152ea565b611b06565b6104aa6107803660046152ea565b611ba7565b6104aa61079336600461513e565b611be5565b61052b6107a63660046152ea565b611c48565b6105166107b936600461552d565b611e84565b61052b6107cc3660046152ea565b611ec6565b6104aa6107df3660046152ea565b611f3d565b6104aa6107f2366004614d34565b611f5e565b6104aa6108053660046152ea565b611fe5565b61081d6108183660046151f7565b612076565b6040805193845260208401929092529082015260600161048e565b61081d610846366004614d34565b60136020526000908152604090208054600182015460029092015490919083565b61051661087536600461552d565b612125565b6104cb610888366004614f2a565b600c60209081526000928352604080842090915290825290205460ff1681565b61048161217d565b61081d6108be366004615374565b6121d3565b6108d66108d1366004614d34565b612240565b60405161048e919061577f565b6104aa6108f13660046153bb565b6124ab565b6104f66124bb565b6104aa61090c366004615192565b6124ca565b61051661091f366004614f2a565b61255e565b610516610932366004614efd565b612633565b61051661094536600461533e565b612705565b6104aa6109583660046152ea565b612834565b6104aa61096b3660046152ea565b612844565b61098361097e366004615374565b612854565b604080516001600160a01b03909416845260208401929092529082015260600161048e565b6104cb6109b63660046152ea565b612a41565b6105166109c9366004614de4565b612ad1565b6104aa6109dc3660046152ea565b612b03565b6104f66109ef3660046152ea565b612b13565b610a07610a0236600461533e565b612bfb565b60408051948552602085019390935291830152606082015260800161048e565b61052b610a35366004614d6c565b612c2c565b610481612d95565b610516610a50366004614f55565b612deb565b610a68610a63366004614d34565b612ebb565b60405161048e919061590f565b6104aa60145481565b610516610a8c36600461548f565b612f41565b610516612f4c565b610481612fc8565b6104cb610aaf366004614d6c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61052b610aeb3660046152ea565b600b602052600090815260409020546001600160a01b031681565b61052b610b143660046152ea565b61301e565b610516610b27366004614f2a565b6130b1565b610516610b3a366004614f55565b613149565b6104aa610b4d36600461533e565b6131cd565b61052b610b603660046152ea565b6012602052600090815260409020546001600160a01b031681565b61081d610b8936600461533e565b613200565b610516610b9c36600461540c565b6132ad565b6104aa610baf36600461531a565b613362565b60606000610bc183611f5e565b90506000816001600160401b03811115610beb57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c14578160200160208202803683370190505b50905060005b80831115610c6957610c2c858261186d565b828281518110610c4c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610c6181615a2d565b915050610c1a565b509150505b919050565b6000828152601260205260408082205490516238f73f60e31b8152600481018590526001600160a01b0384811660248301529091169081906301c7b9f8906044015b60206040518083038186803b158015610ccd57600080fd5b505afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190615302565b9150505b92915050565b60006001600160e01b0319821663780e9d6360e01b1480610d095750610d09826133a9565b600080610d47336000888a60008a6133f9565b9050610d54818585613629565b9695505050505050565b606060008054610d6d906159f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d99906159f8565b8015610de65780601f10610dbb57610100808354040283529160200191610de6565b820191906000526020600020905b815481529060010190602001808311610dc957829003601f168201915b5050505050905090565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b158015610e5057600080fd5b505afa158015610e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e889190614d50565b6000918252600b602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000818152600260205260408120546001600160a01b0316610f345760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600080610f5c83611ec6565b6000938452600a6020526040909320549293915050565b6000610f7e82611ec6565b9050806001600160a01b0316836001600160a01b03161415610fec5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610f2b565b336001600160a01b038216148061100857506110088133610aaf565b61107a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610f2b565b61108483836137be565b505050565b61109333846117a9565b6110df5760405162461bcd60e51b815260206004820152601a60248201527f6e6f7420617574686f72697a656420746f2077697468647261770000000000006044820152606401610f2b565b61108483838361382c565b60606000826001600160401b0381111561111457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561117057816020015b61115d6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816111325790505b50905060005b808411156111f4576111b68585838181106111a157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a639190614d34565b8282815181106111d657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806111ec90615a2d565b915050611176565b509392505050565b3361120561385a565b6001600160a01b0316148061122957503361121e6138f2565b6001600160a01b0316145b6112755760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610f2b565b601455565b60008060008060005b8087111561137c5760008888838181106112ad57634e487b7160e01b600052603260045260246000fd5b60209081029290920135600081815260129093526040808420549051630a4d77f960e41b8152600481018390526001600160a01b038c8116602483015292955084935091169063a4d77f9090604401604080518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906154b0565b909250905061135a8183615996565b611364908661596a565b9450505050808061137490615a2d565b915050611283565b50816113888183615982565b935093505050935093915050565b606060006113a2613963565b6001600160a01b031663661d02ba6040518163ffffffff1660e01b815260040160006040518083038186803b1580156113da57600080fd5b505afa1580156113ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114169190810190614ffe565b9050600081516001600160401b0381111561144157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561147a57816020015b611467614c28565b81526020019060019003908161145f5790505b50905060005b80825111156115fd5760008282815181106114ab57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106114d757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006114f08260200151612ebb565b805184526020808201518186015260408083015160608088019190915285516001600160a01b039081166080808a0191909152938701511660a0808901919091529186015160c0808901919091529086015160e0880152918501805161010088015290850151610120870152908401516101408601525190915061157390611ba7565b61016084015260e08201516101808401526101008201516101a08401526101208201516101c084019060028111156115bb57634e487b7160e01b600052602160045260246000fd5b908160028111156115dc57634e487b7160e01b600052602160045260246000fd5b905250506101400151604090910152806115f581615a2d565b915050611480565b5091505090565b61160e338261399b565b61162a5760405162461bcd60e51b8152600401610f2b906158be565b611084838383613a8e565b6001600160a01b0381166000908152601360205260408120600101548015611676576127106116648583615996565b61166e9190615982565b915050610d09565b6000805260136020527f8fa6efc3be94b5b348b21fea823fe8d100408cee9b7f90524494500445d8ff6d5461271090611664908690615996565b6001600160a01b038281166000908152601160209081526040808320858516845290915290205416156117a5576116e5613c39565b60405163179ce80d60e21b81526001600160a01b03848116600483015283811660248301529190911690635e73a0349060440160206040518083038186803b15801561173057600080fd5b505afa158015611744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117689190614d50565b6001600160a01b0383811660009081526011602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b6000806117b583611ec6565b90506117c1848461399b565b80610d0557506001600160a01b0381163b15158015610d0557506000838152600a6020526040908190205490516302972b0f60e41b81526001600160a01b038681166004830152602482019290925290821690632972b0f09060440160206040518083038186803b15801561183557600080fd5b505afa158015611849573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190615263565b600061187883611f5e565b82106118da5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610f2b565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60008060005b8085111561196657600086868381811061193357634e487b7160e01b600052603260045260246000fd5b9050602002013590506119468186613362565b611950908461596a565b925050808061195e90615a2d565b915050611909565b50949350505050565b61108483838360405180602001604052806000815250612ad1565b6040516393552a3d60e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b1580156119f257600080fd5b505afa158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a9190615263565b6001600160a01b03919091166000908152600c6020908152604080832094835293905291909120805460ff1916911515919091179055565b611aa8611aa06067600052600b6020527f8f2182650175f8d375204d5c926742cf9f5cdd5425f53e35baeae5413dfa3660546001600160a01b031690565b601654613c71565b6000601655565b6060600e805480602002602001604051908101604052809291908181526020018280548015610de657602002820191906000526020600020905b815481526020019060010190808311611ae9575050505050905090565b6000611b1160085490565b8210611b745760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610f2b565b60088281548110611b9557634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000610d0961271060145484612710611bc091906159b5565b611bcc90612710615996565b611bd69190615982565b611be0908561596a565b613ce2565b60008060005b80851115611966576000868683818110611c1557634e487b7160e01b600052603260045260246000fd5b905060200201359050611c288186610c73565b611c32908461596a565b9250508080611c4090615a2d565b915050611beb565b6000818152601260205260408120546001600160a01b031681611c69613963565b6040516316a665e160e01b81526001600160a01b0384811660048301529192506000918316906316a665e19060240160206040518083038186803b158015611cb057600080fd5b505afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce89190614d50565b9050806001600160a01b0316836001600160a01b031614611e7c57611e7c858383866001600160a01b031663fabee7db8a6040518263ffffffff1660e01b8152600401611d3791815260200190565b60206040518083038186803b158015611d4f57600080fd5b505afa158015611d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d879190614d50565b604051631dc3a75960e01b8152600481018b90526001600160a01b03891690631dc3a7599060240160206040518083038186803b158015611dc757600080fd5b505afa158015611ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dff9190615302565b60405163c5c72dc360e01b8152600481018c90526001600160a01b038a169063c5c72dc39060240160206040518083038186803b158015611e3f57600080fd5b505afa158015611e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e779190615302565b613cfa565b949350505050565b611e8e33856117a9565b611eaa5760405162461bcd60e51b8152600401610f2b90615889565b611eb5338585613da5565b611ec0848383613629565b50505050565b6000818152600260205260408120546001600160a01b031680610d095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610f2b565b60108181548110611f4d57600080fd5b600091825260209091200154905081565b60006001600160a01b038216611fc95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610f2b565b506001600160a01b031660009081526003602052604090205490565b6000818152601260205260408082205490516301c9a34760e61b8152600481018490526001600160a01b03909116908190637268d1c09060240160206040518083038186803b15801561203757600080fd5b505afa15801561204b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206f9190615302565b9392505050565b6000806000805b8088111561210d5760008989838181106120a757634e487b7160e01b600052603260045260246000fd5b90506020020135905060008060006120c1848c8c8c6121d3565b919450925090506120d2838961596a565b97506120de828861596a565b96506120ea8282615996565b6120f4908761596a565b955050505050808061210590615a2d565b91505061207d565b506121188282615982565b9050955095509592505050565b61212f33856117a9565b61214b5760405162461bcd60e51b8152600401610f2b90615889565b600084815260156020526040902054612165908390613ce2565b9150612172338584613e1e565b611ec084848361382c565b6060600f805480602002602001604051908101604052809291908181526020018280548015610de65760200282019190600052602060002090815481526020019060010190808311611ae9575050505050905090565b60008060006121e233886117a9565b806122085750336000908152600c602090815260408083206001845290915290205460ff165b6122245760405162461bcd60e51b8152600401610f2b90615889565b61223087878787613e56565b9250925092509450945094915050565b6060600061224d83610bb4565b9050600081516001600160401b0381111561227857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156122ed57816020015b6122da6040518060a001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b031681525090565b8152602001906001900390816122965790505b50905060005b8083511115610c6957600083828151811061231e57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008181526012835260409081902054815160a0810183528381526001600160a01b03909116938101849052815163c5c72dc360e01b8152600481018490529294509190820190839063c5c72dc39060240160206040518083038186803b15801561239457600080fd5b505afa1580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190615302565b81526000848152601560209081526040918290205490830152805163fabee7db60e01b8152600481018690529101906001600160a01b0384169063fabee7db9060240160206040518083038186803b15801561242757600080fd5b505afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190614d50565b6001600160a01b031681525084848151811061248b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806124a390615a2d565b9150506122f3565b6000610d543387878787876133f9565b606060018054610d6d906159f8565b60008060005b808611156125545760008787838181106124fa57634e487b7160e01b600052603260045260246000fd5b90506020020135905061250d33826117a9565b6125295760405162461bcd60e51b8152600401610f2b90615889565b612534818787613f0c565b61253e908461596a565b925050808061254c90615a2d565b9150506124d0565b5095945050505050565b3361256761385a565b6001600160a01b0316148061258b5750336125806138f2565b6001600160a01b0316145b806125a557503361259a613faf565b6001600160a01b0316145b6126175760405162461bcd60e51b815260206004820152603860248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a65642064697361626c657200000000000000006064820152608401610f2b565b6001600160a01b03909116600090815260136020526040902055565b6001600160a01b03821633141561268c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610f2b565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516126f9911515815260200190565b60405180910390a35050565b61270f33846117a9565b61275b5760405162461bcd60e51b815260206004820152601a60248201527f6e6f7420617574686f72697a656420746f2077697468647261770000000000006044820152606401610f2b565b600061276684611c48565b6040516315375af760e31b8152600481018690526001600160a01b03858116602483015284811660448301529192509082169063a9bad7b8906064015b600060405180830381600087803b1580156127bd57600080fd5b505af11580156127d1573d6000803e3d6000fd5b505050506127de84612a41565b611ec05760405162461bcd60e51b815260206004820152602160248201527f5472616e636865206e6f7420766961626c6520616674657220776974686472616044820152607760f81b6064820152608401610f2b565b600d8181548110611f4d57600080fd5b600f8181548110611f4d57600080fd5b600080600061286333886117a9565b6128b95760405162461bcd60e51b815260206004820152602160248201527f6e6f7420617574686f72697a656420746f206d696772617465207472616e63686044820152606560f81b6064820152608401610f2b565b6128c1613963565b60405163b4d6975760e01b81526001600160a01b038881166004830152919091169063b4d697579060240160206040518083038186803b15801561290457600080fd5b505afa158015612918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293c9190615263565b6129805760405162461bcd60e51b815260206004820152601560248201527414dd1c985d1959de481b9bdd08185c1c1c9bdd9959605a1b6044820152606401610f2b565b600061298b88611c48565b60405163591eb36160e11b8152600481018a90526001600160a01b038981166024830152888116604483015287811660648301529192509082169063b23d66c290608401606060405180830381600087803b1580156129e957600080fd5b505af11580156129fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a219190614f89565b91955093509150612a36888289878787613cfa565b509450945094915050565b600081815260156020526040812054612710811015612a6b57612a6383614013565b915050610c6e565b6000612a756140d4565b90506000806000612a87878586613200565b60008a815260156020526040812054939650919450925090612aab9085858561410c565b9050808015612abe5750612abe88614013565b9650505050505050610c6e565b50919050565b612adb338361399b565b612af75760405162461bcd60e51b8152600401610f2b906158be565b611ec08484848461413a565b600e8181548110611f4d57600080fd5b6000818152600260205260409020546060906001600160a01b0316612b925760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610f2b565b6000612ba960408051602081019091526000815290565b90506000815111612bc9576040518060200160405280600081525061206f565b80612bd384614172565b604051602001612be49291906155b0565b604051602081830303815290604052915050919050565b600080600080612c0c878787613200565b6000998a5260156020526040909920549199909897509095509350505050565b6001600160a01b0382811660009081526011602090815260408083208585168452909152812054909116610d0957612c62613c39565b6040516302eaec2d60e31b81526001600160a01b03858116600483015284811660248301529190911690631757616890604401600060405180830381600087803b158015612caf57600080fd5b505af1158015612cc3573d6000803e3d6000fd5b50505050612ccf613c39565b60405163179ce80d60e21b81526001600160a01b03858116600483015284811660248301529190911690635e73a0349060440160206040518083038186803b158015612d1a57600080fd5b505afa158015612d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d529190614d50565b6001600160a01b03938416600090815260116020908152604080832095871683529490529290922080546001600160a01b03191693831693909317909255919050565b6060600d805480602002602001604051908101604052809291908181526020018280548015610de65760200282019190600052602060002090815481526020019060010190808311611ae9575050505050905090565b33612df461385a565b6001600160a01b03161480612e18575033612e0d6138f2565b6001600160a01b0316145b80612e275750612e273361428c565b612e995760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610f2b565b6001600160a01b03909216600090815260136020526040902090815560010155565b612ee66040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b038216600090815260136020526040812090612f118482612f0c6140d4565b614332565b60408051608081018252855481526002860154602082015260019095015490850152606084015250909392505050565b6117a5338383613da5565b612f546144d3565b6001600160a01b031663e670309c6040518163ffffffff1660e01b81526004016040805180830381600087803b158015612f8d57600080fd5b505af1158015612fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc591906152b7565b50565b60606010805480602002602001604051908101604052809291908181526020018280548015610de65760200282019190600052602060002090815481526020019060010190808311611ae9575050505050905090565b6000613028613963565b600083815260126020526040908190205490516316a665e160e01b81526001600160a01b0391821660048201529116906316a665e19060240160206040518083038186803b15801561307957600080fd5b505afa15801561308d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d099190614d50565b336130ba61385a565b6001600160a01b031614806130de5750336130d36138f2565b6001600160a01b0316145b61312a5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610f2b565b6001600160a01b03909116600090815260136020526040902060010155565b336000908152600c602090815260408083206001845290915290205460ff166131c25760405162461bcd60e51b815260206004820152602560248201527f4e6f7420617574686f72697a656420746f207472616e7366657220757365722060448201526466756e647360d81b6064820152608401610f2b565b611084838383613da5565b60006131d933856117a9565b6131f55760405162461bcd60e51b8152600401610f2b90615889565b611e7c848484613f0c565b600083815260126020526040808220549051637d4c525d60e11b8152600481018690526001600160a01b038581166024830152848116604483015283928392911690819063fa98a4ba9060640160606040518083038186803b15801561326557600080fd5b505afa158015613279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329d9190615500565b9350935093505093509350939050565b336000908152600c602090815260408083206005845290915290205460ff166133185760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420617574686f72697a656420746f206c697175696461746500000000006044820152606401610f2b565b611ec061332485611ec6565b848685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061413a92505050565b60008281526012602052604080822054905163fd80d0c360e01b8152600481018590526001600160a01b03848116602483015290911690819063fd80d0c390604401610cb5565b60006001600160e01b031982166380ac58cd60e01b14806133da57506001600160e01b03198216635b5e139f60e01b145b80610d0957506301ffc9a760e01b6001600160e01b0319831614610d09565b6000613403613963565b60405163b4d6975760e01b81526001600160a01b038781166004830152919091169063b4d697579060240160206040518083038186803b15801561344657600080fd5b505afa15801561345a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347e9190615263565b6134c25760405162461bcd60e51b815260206004820152601560248201527414dd1c985d1959de481b9bdd08185c1c1c9bdd9959605a1b6044820152606401610f2b565b6134ca6144d3565b6001600160a01b031663ff1883486040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561350457600080fd5b505af1158015613518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353c9190615302565b600081815260126020908152604080832080546001600160a01b0319166001600160a01b038b16179055600a9091529020879055905061357b8461450b565b6135a787828860405160200161359391815260200190565b604051602081830303815290604052614570565b60405163b832799360e01b81526001600160a01b038881166004830152602482018390528581166044830152606482018590526084820184905286169063b83279939060a401600060405180830381600087803b15801561360757600080fd5b505af115801561361b573d6000803e3d6000fd5b505050509695505050505050565b811561108457600061363a84611c48565b60405163fabee7db60e01b8152600481018690529091506000906001600160a01b0383169063fabee7db9060240160206040518083038186803b15801561368057600080fd5b505afa158015613694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b89190614d50565b905060006136c68583611635565b90506136d2818661596a565b600087815260156020526040812080549091906136f090849061596a565b90915550506001600160a01b0382166000908152601360205260409020613717828761596a565b81600201600082825461372a919061596a565b909155505060028101548154101561377c5760405162461bcd60e51b815260206004820152601560248201527445786365656465642064656274206365696c696e6760581b6044820152606401610f2b565b816016600082825461378e919061596a565b909155506000905061379f886145a3565b90506137b4866137af838a61596a565b613c71565b5050505050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906137f382611ec6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b811561108457600061383d846145a3565b9050801561384f5761384f8282613c71565b611ec084848461469c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138b557600080fd5b505afa1580156138c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ed9190614d50565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561394f57600080fd5b505af11580156138c9573d6000803e3d6000fd5b6068600052600b6020527f5218b498ba0afb1d30e8ac0c5923fc8f9c711c59e5156e971fd6a28c8c36dcca546001600160a01b031690565b6000818152600260205260408120546001600160a01b0316613a145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610f2b565b6000613a1f83611ec6565b9050806001600160a01b0316846001600160a01b03161480613a5a5750836001600160a01b0316613a4f84610eb6565b6001600160a01b0316145b80610d0557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610d05565b826001600160a01b0316613aa182611ec6565b6001600160a01b031614613b095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610f2b565b6001600160a01b038216613b6b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610f2b565b613b768383836146e7565b613b816000826137be565b6001600160a01b0383166000908152600360205260408120805460019290613baa9084906159b5565b90915550506001600160a01b0382166000908152600360205260408120805460019290613bd890849061596a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b606a600052600b6020527f883a43708262222a5f4103b2729e693d0d260c9091529ffea5b2c6052e27079d546001600160a01b031690565b613c796140d4565b6040516340c10f1960e01b81526001600160a01b0384811660048301526024820184905291909116906340c10f19906044015b600060405180830381600087803b158015613cc657600080fd5b505af1158015613cda573d6000803e3d6000fd5b505050505050565b600081831115613cf3575080610d09565b5081610d09565b60405163459ba12760e01b8152600481018790526001600160a01b0386811660248301528481166044830152606482018490526084820183905285169063459ba1279060a401600060405180830381600087803b158015613d5a57600080fd5b505af1158015613d6e573d6000803e3d6000fd5b5050506000968752505060126020525050604090922080546001600160a01b0319166001600160a01b039093169290921790915550565b613dae82611c48565b60405163f12ba38160e01b81526001600160a01b0385811660048301526024820185905260448201849052919091169063f12ba38190606401600060405180830381600087803b158015613e0157600080fd5b505af1158015613e15573d6000803e3d6000fd5b50505050505050565b801561108457613e2e83826147a4565b60008281526015602052604081208054839290613e4c9084906159b5565b9091555050505050565b600080600080613e6588611c48565b604051638496e89160e01b8152600481018a90526001600160a01b0389811660248301528881166044830152878116606483015291925090821690638496e89190608401606060405180830381600087803b158015613ec357600080fd5b505af1158015613ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613efb9190615500565b935093509350509450945094915050565b600080613f1885611c48565b60405163f8903fb760e01b8152600481018790526001600160a01b03868116602483015285811660448301529192509082169063f8903fb790606401602060405180830381600087803b158015613f6e57600080fd5b505af1158015613f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa69190615302565b95945050505050565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156138b557600080fd5b60008061401f83611ec6565b90506001600160a01b0381163b156140ca576000838152600a602052604090819020549051632c97897d60e21b815282916001600160a01b0383169163b25e25f4916140719160040190815260200190565b60206040518083038186803b15801561408957600080fd5b505afa15801561409d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c19190615263565b92505050610c6e565b6001915050610c6e565b6066600052600b6020527f9b93b1f278920c61d89dbcb374ecb76190cc66519824442e7c3630b16c7fd3fd546001600160a01b031690565b600061411a85612710615996565b82614125868661596a565b61412f9190615996565b101595945050505050565b614146848484846147e3565b8080602001905181019061415a9190615302565b6000928352600a602052604090922091909155505050565b60608161419757506040805180820190915260018152600360fc1b6020820152610c6e565b8160005b81156141c157806141ab81615a2d565b91506141ba9050600a83615982565b915061419b565b6000816001600160401b038111156141e957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614213576020820181803683370190505b5090505b8415611e7c576142286001836159b5565b9150614235600a86615a48565b61424090603061596a565b60f81b81838151811061426357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350614285600a86615982565b9450614217565b6040516393552a3d60e01b81526103eb60048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906393552a3d9060440160206040518083038186803b1580156142fa57600080fd5b505afa15801561430e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d099190615263565b6001600160a01b03808416600090815260116020908152604080832085851684529091528120549091829116806143f15761436b613c39565b60405163179ce80d60e21b81526001600160a01b03888116600483015286811660248301529190911690635e73a0349060440160206040518083038186803b1580156143b657600080fd5b505afa1580156143ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ee9190614d50565b90505b6040516313f3552960e21b81526001600160a01b038781166004830152602482018790528581166044830152821690634fcd54a490606401604080518083038186803b15801561444057600080fd5b505afa158015614454573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061447891906154b0565b9093509150816144ca5760405162461bcd60e51b815260206004820181905260248201527f556e696e697469616c697a656420626f72726f7761626c65207065722031306b6044820152606401610f2b565b50935093915050565b6069600052600b6020527fbfc0b0c2052ca8c7e1e4620fa592015c0fc6d26105a3da5a2e30d9693b428343546001600160a01b031690565b6001600160a01b038116600090815260136020526040902054612fc55760405162461bcd60e51b815260206004820152601860248201527f546f6b656e206973206e6f742077686974656c697374656400000000000000006044820152606401610f2b565b61457a8383614816565b6145876000848484614964565b6110845760405162461bcd60e51b8152600401610f2b90615837565b600081815260156020526040812054816145bb6140d4565b905060008060006145ce87858630613e56565b9250925092506145e08584848461410c565b6146415760405162461bcd60e51b815260206004820152602c60248201527f426f726f7720627265616b73206d696e20636f6c6c61746572616c697a61746960448201526b1bdb881d1a1c995cda1bdb1960a21b6064820152608401610f2b565b848311156146695760008781526015602052604081205561466285846159b5565b9550614688565b61467383866159b5565b60008881526015602052604081209190915595505b61469230846147a4565b5050505050919050565b60006146a784611c48565b604051630ad58d2f60e01b815260048101869052602481018590526001600160a01b03848116604483015291925090821690630ad58d2f906064016127a3565b6001600160a01b0383166147425761473d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b614765565b816001600160a01b0316836001600160a01b031614614765576147658382614a6e565b6001600160a01b0382166147815761477c81614b0b565b611084565b826001600160a01b0316826001600160a01b031614611084576110848282614be4565b6147ac6140d4565b604051632770a7eb60e21b81526001600160a01b038481166004830152602482018490529190911690639dc29fac90604401613cac565b6147ee848484613a8e565b6147fa84848484614964565b611ec05760405162461bcd60e51b8152600401610f2b90615837565b6001600160a01b03821661486c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610f2b565b6000818152600260205260409020546001600160a01b0316156148d15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610f2b565b6148dd600083836146e7565b6001600160a01b038216600090815260036020526040812080546001929061490690849061596a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15614a6657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906149a89033908990889088906004016155df565b602060405180830381600087803b1580156149c257600080fd5b505af19250505080156149f2575060408051601f3d908101601f191682019092526149ef9181019061529b565b60015b614a4c573d808015614a20576040519150601f19603f3d011682016040523d82523d6000602084013e614a25565b606091505b508051614a445760405162461bcd60e51b8152600401610f2b90615837565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e7c565b506001611e7c565b60006001614a7b84611f5e565b614a8591906159b5565b600083815260076020526040902054909150808214614ad8576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090614b1d906001906159b5565b60008381526009602052604081205460088054939450909284908110614b5357634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110614b8257634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480614bc857634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000614bef83611f5e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806101e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000801916815260200160008152602001600081526020016000815260200160006002811115614ccc57634e487b7160e01b600052602160045260246000fd5b905290565b8051610c6e81615a9e565b60008083601f840112614ced578182fd5b5081356001600160401b03811115614d03578182fd5b6020830191508360208260051b8501011115614d1e57600080fd5b9250929050565b805160038110610c6e57600080fd5b600060208284031215614d45578081fd5b813561206f81615a9e565b600060208284031215614d61578081fd5b815161206f81615a9e565b60008060408385031215614d7e578081fd5b8235614d8981615a9e565b91506020830135614d9981615a9e565b809150509250929050565b600080600060608486031215614db8578081fd5b8335614dc381615a9e565b92506020840135614dd381615a9e565b929592945050506040919091013590565b60008060008060808587031215614df9578081fd5b8435614e0481615a9e565b9350602085810135614e1581615a9e565b93506040860135925060608601356001600160401b0380821115614e37578384fd5b818801915088601f830112614e4a578384fd5b813581811115614e5c57614e5c615a88565b614e6e601f8201601f1916850161593a565b91508082528984828501011115614e83578485fd5b8084840185840137810190920192909252939692955090935050565b600080600080600060a08688031215614eb6578283fd5b8535614ec181615a9e565b94506020860135614ed181615a9e565b935060408601359250606086013591506080860135614eef81615a9e565b809150509295509295909350565b60008060408385031215614f0f578182fd5b8235614f1a81615a9e565b91506020830135614d9981615ab3565b60008060408385031215614f3c578182fd5b8235614f4781615a9e565b946020939093013593505050565b600080600060608486031215614f69578081fd5b8335614f7481615a9e565b95602085013595506040909401359392505050565b600080600060608486031215614f9d578081fd5b8351614fa881615a9e565b602085015160409095015190969495509392505050565b60008060208385031215614fd1578182fd5b82356001600160401b03811115614fe6578283fd5b614ff285828601614cdc565b90969095509350505050565b60006020808385031215615010578182fd5b82516001600160401b0380821115615026578384fd5b818501915085601f830112615039578384fd5b81518181111561504b5761504b615a88565b615059848260051b0161593a565b8181528481019250838501610160808402860187018a1015615079578788fd5b8795505b838610156151305780828b031215615093578788fd5b61509c8161593a565b6150a583614cd1565b81526150b2888401614cd1565b8189015260408381015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012061510b818501614d25565b908201526101408381015190820152855260019590950194938601939081019061507d565b509098975050505050505050565b600080600060408486031215615152578081fd5b83356001600160401b03811115615167578182fd5b61517386828701614cdc565b909450925050602084013561518781615a9e565b809150509250925092565b600080600080606085870312156151a7578182fd5b84356001600160401b038111156151bc578283fd5b6151c887828801614cdc565b90955093505060208501356151dc81615a9e565b915060408501356151ec81615a9e565b939692955090935050565b60008060008060006080868803121561520e578283fd5b85356001600160401b03811115615223578384fd5b61522f88828901614cdc565b909650945050602086013561524381615a9e565b9250604086013561525381615a9e565b91506060860135614eef81615a9e565b600060208284031215615274578081fd5b815161206f81615ab3565b600060208284031215615290578081fd5b813561206f81615ac1565b6000602082840312156152ac578081fd5b815161206f81615ac1565b6000604082840312156152c8578081fd5b6152d2604061593a565b82518152602083015160208201528091505092915050565b6000602082840312156152fb578081fd5b5035919050565b600060208284031215615313578081fd5b5051919050565b6000806040838503121561532c578182fd5b823591506020830135614d9981615a9e565b600080600060608486031215615352578081fd5b83359250602084013561536481615a9e565b9150604084013561518781615a9e565b60008060008060808587031215615389578182fd5b84359350602085013561539b81615a9e565b925060408501356153ab81615a9e565b915060608501356151ec81615a9e565b600080600080600060a086880312156153d2578283fd5b8535945060208601356153e481615a9e565b935060408601356153f481615a9e565b94979396509394606081013594506080013592915050565b60008060008060608587031215615421578182fd5b84359350602085013561543381615a9e565b925060408501356001600160401b038082111561544e578384fd5b818701915087601f830112615461578384fd5b81358181111561546f578485fd5b886020828501011115615480578485fd5b95989497505060200194505050565b600080604083850312156154a1578182fd5b50508035926020909101359150565b600080604083850312156154c2578182fd5b505080516020909101519092909150565b6000806000606084860312156154e7578081fd5b8335925060208401359150604084013561518781615a9e565b600080600060608486031215615514578081fd5b8351925060208401519150604084015190509250925092565b60008060008060808587031215615542578182fd5b84359350602085013592506040850135915060608501356151ec81615a9e565b6000815180845261557a8160208601602086016159cc565b601f01601f19169290920160200192915050565b600381106155ac57634e487b7160e01b600052602160045260246000fd5b9052565b600083516155c28184602088016159cc565b8351908301906155d68183602088016159cc565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610d5490830184615562565b6020808252825182820181905260009190848201906040850190845b8181101561567557615662838551805182526020810151602083015260408101516040830152606081015160608301525050565b928401926080929092019160010161562e565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156157725781518051855286810151878601528581015186860152606080820151908601526080808201516001600160a01b03811682880152505060a0818101516001600160a01b03811687830152505060c0818101519086015260e08082015190860152610100808201519086015261012080820151908601526101408082015190860152610160808201519086015261018080820151908601526101a080820151908601526101c0908101519061575c8187018361558e565b50506101e093909301929085019060010161569e565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561577257815180518552868101516001600160a01b0390811688870152868201518787015260608083015190870152608091820151169085015260a0909301929085019060010161579c565b6020808252825182820181905260009190848201906040850190845b8181101561567557835183529284019291840191600101615808565b60006020825261206f6020830184615562565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f6e6f7420617574686f72697a656420746f207769746864726177207969656c64604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8151815260208083015190820152604080830151908201526060808301519082015260808101610d09565b604051601f8201601f191681016001600160401b038111828210171561596257615962615a88565b604052919050565b6000821982111561597d5761597d615a5c565b500190565b60008261599157615991615a72565b500490565b60008160001904831182151516156159b0576159b0615a5c565b500290565b6000828210156159c7576159c7615a5c565b500390565b60005b838110156159e75781810151838201526020016159cf565b83811115611ec05750506000910152565b600181811c90821680615a0c57607f821691505b60208210811415612acb57634e487b7160e01b600052602260045260246000fd5b6000600019821415615a4157615a41615a5c565b5060010190565b600082615a5757615a57615a72565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612fc557600080fd5b8015158114612fc557600080fd5b6001600160e01b031981168114612fc557600080fdfea264697066735822122095722eb27b5932356cbe321638a13881b39bab5e51a0460e6f5e7ebbcc73836f64736f6c63430008030033bb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fdd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104695760003560e01c8063751618911161024c578063c87b56dd11610146578063e985e9c5116100c3578063f8903fb711610087578063f8903fb714610b3f578063f9ed4cc014610b52578063fa98a4ba14610b7b578063fb6475bd14610b8e578063fd80d0c314610ba157610469565b8063e985e9c514610aa1578063e9c3f77d14610add578063e9d07fe814610b06578063eab9209614610b19578063f12ba38114610b2c57610469565b8063dee7ae701161010a578063dee7ae7014610a55578063e0fab71a14610a75578063e2bbb15814610a7e578063e670309c14610a91578063e8ea4fae14610a9957610469565b8063c87b56dd146109e1578063c9491a96146109f4578063d9d4afe114610a27578063dc94cb7d14610a3a578063ddd07b7614610a4257610469565b8063983b42f7116101d4578063aeb38d8b11610198578063aeb38d8b1461095d578063b23d66c214610970578063b25e25f4146109a8578063b88d4fde146109bb578063bf184ea4146109ce57610469565b8063983b42f7146108fe578063a061ba5f14610911578063a22cb46514610924578063a9bad7b814610937578063abcbc4fc1461094a57610469565b80637dad209b1161021b5780637dad209b146108a85780638496e891146108b057806391130d95146108c357806393856b16146108e357806395d89b41146108f657610469565b8063751618911461080a5780637609d7f61461083857806379bc3efa146108675780637a1a04df1461087a57610469565b806326b089de116103685780634a7a7f41116102e5578063621fdd37116102a9578063621fdd37146107ab5780636352211e146107be5780636caa9c11146107d157806370a08231146107e45780637268d1c0146107f757610469565b80634a7a7f41146107575780634f6ccce71461075f578063562f37d0146107725780635a10b8281461078557806361b9fea91461079857610469565b806335b176ab1161032c57806335b176ab146106e2578063392f5f641461070257806342842e0e14610729578063447d52ba1461073c578063476343ee1461074f57610469565b806326b089de1461068357806328f3fc73146106965780632972b0f0146106a95780632f745c59146106bc57806332935f44146106cf57610469565b80630ad58d2f116103f657806318160ddd116103ba57806318160ddd1461061657806321fa0f1f1461061e578063224438d11461063357806323b872dd1461063c5780632642b6061461064f57610469565b80630ad58d2f146105885780630d6390441461059b5780630e3b95ff146105bb57806312baf5da146105db578063136f9cef146105ee57610469565b806306fdde031161043d57806306fdde03146104ee578063071060a614610503578063081812fc1461051857806308754a7314610543578063095ea7b31461057557610469565b80620a5ccf1461046e57806301c7b9f81461049757806301ffc9a7146104b857806304c7e767146104db575b600080fd5b61048161047c366004614d34565b610bb4565b60405161048e91906157ec565b60405180910390f35b6104aa6104a536600461531a565b610c73565b60405190815260200161048e565b6104cb6104c636600461527f565b610d0f565b604051901515815260200161048e565b6104aa6104e9366004614e9f565b610d34565b6104f6610d5e565b60405161048e9190615824565b6105166105113660046152ea565b610df0565b005b61052b6105263660046152ea565b610eb6565b6040516001600160a01b03909116815260200161048e565b6105566105513660046152ea565b610f50565b604080516001600160a01b03909316835260208301919091520161048e565b610516610583366004614f2a565b610f73565b6105166105963660046154d3565b611089565b6104aa6105a93660046152ea565b60156020526000908152604090205481565b6105ce6105c9366004614fbf565b6110ea565b60405161048e9190615612565b6105166105e93660046152ea565b6111fc565b6106016105fc36600461513e565b61127a565b6040805192835260208301919091520161048e565b6008546104aa565b610626611396565b60405161048e9190615681565b6104aa60165481565b61051661064a366004614da4565b611604565b61052b61065d366004614d6c565b60116020908152600092835260408084209091529082529020546001600160a01b031681565b6104aa61069136600461531a565b611635565b6105166106a4366004614d6c565b6116b0565b6104cb6106b7366004614f2a565b6117a9565b6104aa6106ca366004614f2a565b61186d565b6104aa6106dd36600461513e565b611903565b6104aa6106f03660046152ea565b600a6020526000908152604090205481565b61052b7f000000000000000000000000000000000000000000000000000000000000000081565b610516610737366004614da4565b61196f565b61051661074a36600461531a565b61198a565b610516611a62565b610481611aaf565b6104aa61076d3660046152ea565b611b06565b6104aa6107803660046152ea565b611ba7565b6104aa61079336600461513e565b611be5565b61052b6107a63660046152ea565b611c48565b6105166107b936600461552d565b611e84565b61052b6107cc3660046152ea565b611ec6565b6104aa6107df3660046152ea565b611f3d565b6104aa6107f2366004614d34565b611f5e565b6104aa6108053660046152ea565b611fe5565b61081d6108183660046151f7565b612076565b6040805193845260208401929092529082015260600161048e565b61081d610846366004614d34565b60136020526000908152604090208054600182015460029092015490919083565b61051661087536600461552d565b612125565b6104cb610888366004614f2a565b600c60209081526000928352604080842090915290825290205460ff1681565b61048161217d565b61081d6108be366004615374565b6121d3565b6108d66108d1366004614d34565b612240565b60405161048e919061577f565b6104aa6108f13660046153bb565b6124ab565b6104f66124bb565b6104aa61090c366004615192565b6124ca565b61051661091f366004614f2a565b61255e565b610516610932366004614efd565b612633565b61051661094536600461533e565b612705565b6104aa6109583660046152ea565b612834565b6104aa61096b3660046152ea565b612844565b61098361097e366004615374565b612854565b604080516001600160a01b03909416845260208401929092529082015260600161048e565b6104cb6109b63660046152ea565b612a41565b6105166109c9366004614de4565b612ad1565b6104aa6109dc3660046152ea565b612b03565b6104f66109ef3660046152ea565b612b13565b610a07610a0236600461533e565b612bfb565b60408051948552602085019390935291830152606082015260800161048e565b61052b610a35366004614d6c565b612c2c565b610481612d95565b610516610a50366004614f55565b612deb565b610a68610a63366004614d34565b612ebb565b60405161048e919061590f565b6104aa60145481565b610516610a8c36600461548f565b612f41565b610516612f4c565b610481612fc8565b6104cb610aaf366004614d6c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61052b610aeb3660046152ea565b600b602052600090815260409020546001600160a01b031681565b61052b610b143660046152ea565b61301e565b610516610b27366004614f2a565b6130b1565b610516610b3a366004614f55565b613149565b6104aa610b4d36600461533e565b6131cd565b61052b610b603660046152ea565b6012602052600090815260409020546001600160a01b031681565b61081d610b8936600461533e565b613200565b610516610b9c36600461540c565b6132ad565b6104aa610baf36600461531a565b613362565b60606000610bc183611f5e565b90506000816001600160401b03811115610beb57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c14578160200160208202803683370190505b50905060005b80831115610c6957610c2c858261186d565b828281518110610c4c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610c6181615a2d565b915050610c1a565b509150505b919050565b6000828152601260205260408082205490516238f73f60e31b8152600481018590526001600160a01b0384811660248301529091169081906301c7b9f8906044015b60206040518083038186803b158015610ccd57600080fd5b505afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190615302565b9150505b92915050565b60006001600160e01b0319821663780e9d6360e01b1480610d095750610d09826133a9565b600080610d47336000888a60008a6133f9565b9050610d54818585613629565b9695505050505050565b606060008054610d6d906159f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d99906159f8565b8015610de65780601f10610dbb57610100808354040283529160200191610de6565b820191906000526020600020905b815481529060010190602001808311610dc957829003601f168201915b5050505050905090565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b158015610e5057600080fd5b505afa158015610e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e889190614d50565b6000918252600b602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000818152600260205260408120546001600160a01b0316610f345760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600080610f5c83611ec6565b6000938452600a6020526040909320549293915050565b6000610f7e82611ec6565b9050806001600160a01b0316836001600160a01b03161415610fec5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610f2b565b336001600160a01b038216148061100857506110088133610aaf565b61107a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610f2b565b61108483836137be565b505050565b61109333846117a9565b6110df5760405162461bcd60e51b815260206004820152601a60248201527f6e6f7420617574686f72697a656420746f2077697468647261770000000000006044820152606401610f2b565b61108483838361382c565b60606000826001600160401b0381111561111457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561117057816020015b61115d6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816111325790505b50905060005b808411156111f4576111b68585838181106111a157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a639190614d34565b8282815181106111d657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806111ec90615a2d565b915050611176565b509392505050565b3361120561385a565b6001600160a01b0316148061122957503361121e6138f2565b6001600160a01b0316145b6112755760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610f2b565b601455565b60008060008060005b8087111561137c5760008888838181106112ad57634e487b7160e01b600052603260045260246000fd5b60209081029290920135600081815260129093526040808420549051630a4d77f960e41b8152600481018390526001600160a01b038c8116602483015292955084935091169063a4d77f9090604401604080518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906154b0565b909250905061135a8183615996565b611364908661596a565b9450505050808061137490615a2d565b915050611283565b50816113888183615982565b935093505050935093915050565b606060006113a2613963565b6001600160a01b031663661d02ba6040518163ffffffff1660e01b815260040160006040518083038186803b1580156113da57600080fd5b505afa1580156113ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114169190810190614ffe565b9050600081516001600160401b0381111561144157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561147a57816020015b611467614c28565b81526020019060019003908161145f5790505b50905060005b80825111156115fd5760008282815181106114ab57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106114d757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006114f08260200151612ebb565b805184526020808201518186015260408083015160608088019190915285516001600160a01b039081166080808a0191909152938701511660a0808901919091529186015160c0808901919091529086015160e0880152918501805161010088015290850151610120870152908401516101408601525190915061157390611ba7565b61016084015260e08201516101808401526101008201516101a08401526101208201516101c084019060028111156115bb57634e487b7160e01b600052602160045260246000fd5b908160028111156115dc57634e487b7160e01b600052602160045260246000fd5b905250506101400151604090910152806115f581615a2d565b915050611480565b5091505090565b61160e338261399b565b61162a5760405162461bcd60e51b8152600401610f2b906158be565b611084838383613a8e565b6001600160a01b0381166000908152601360205260408120600101548015611676576127106116648583615996565b61166e9190615982565b915050610d09565b6000805260136020527f8fa6efc3be94b5b348b21fea823fe8d100408cee9b7f90524494500445d8ff6d5461271090611664908690615996565b6001600160a01b038281166000908152601160209081526040808320858516845290915290205416156117a5576116e5613c39565b60405163179ce80d60e21b81526001600160a01b03848116600483015283811660248301529190911690635e73a0349060440160206040518083038186803b15801561173057600080fd5b505afa158015611744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117689190614d50565b6001600160a01b0383811660009081526011602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b6000806117b583611ec6565b90506117c1848461399b565b80610d0557506001600160a01b0381163b15158015610d0557506000838152600a6020526040908190205490516302972b0f60e41b81526001600160a01b038681166004830152602482019290925290821690632972b0f09060440160206040518083038186803b15801561183557600080fd5b505afa158015611849573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190615263565b600061187883611f5e565b82106118da5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610f2b565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60008060005b8085111561196657600086868381811061193357634e487b7160e01b600052603260045260246000fd5b9050602002013590506119468186613362565b611950908461596a565b925050808061195e90615a2d565b915050611909565b50949350505050565b61108483838360405180602001604052806000815250612ad1565b6040516393552a3d60e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b1580156119f257600080fd5b505afa158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a9190615263565b6001600160a01b03919091166000908152600c6020908152604080832094835293905291909120805460ff1916911515919091179055565b611aa8611aa06067600052600b6020527f8f2182650175f8d375204d5c926742cf9f5cdd5425f53e35baeae5413dfa3660546001600160a01b031690565b601654613c71565b6000601655565b6060600e805480602002602001604051908101604052809291908181526020018280548015610de657602002820191906000526020600020905b815481526020019060010190808311611ae9575050505050905090565b6000611b1160085490565b8210611b745760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610f2b565b60088281548110611b9557634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000610d0961271060145484612710611bc091906159b5565b611bcc90612710615996565b611bd69190615982565b611be0908561596a565b613ce2565b60008060005b80851115611966576000868683818110611c1557634e487b7160e01b600052603260045260246000fd5b905060200201359050611c288186610c73565b611c32908461596a565b9250508080611c4090615a2d565b915050611beb565b6000818152601260205260408120546001600160a01b031681611c69613963565b6040516316a665e160e01b81526001600160a01b0384811660048301529192506000918316906316a665e19060240160206040518083038186803b158015611cb057600080fd5b505afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce89190614d50565b9050806001600160a01b0316836001600160a01b031614611e7c57611e7c858383866001600160a01b031663fabee7db8a6040518263ffffffff1660e01b8152600401611d3791815260200190565b60206040518083038186803b158015611d4f57600080fd5b505afa158015611d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d879190614d50565b604051631dc3a75960e01b8152600481018b90526001600160a01b03891690631dc3a7599060240160206040518083038186803b158015611dc757600080fd5b505afa158015611ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dff9190615302565b60405163c5c72dc360e01b8152600481018c90526001600160a01b038a169063c5c72dc39060240160206040518083038186803b158015611e3f57600080fd5b505afa158015611e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e779190615302565b613cfa565b949350505050565b611e8e33856117a9565b611eaa5760405162461bcd60e51b8152600401610f2b90615889565b611eb5338585613da5565b611ec0848383613629565b50505050565b6000818152600260205260408120546001600160a01b031680610d095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610f2b565b60108181548110611f4d57600080fd5b600091825260209091200154905081565b60006001600160a01b038216611fc95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610f2b565b506001600160a01b031660009081526003602052604090205490565b6000818152601260205260408082205490516301c9a34760e61b8152600481018490526001600160a01b03909116908190637268d1c09060240160206040518083038186803b15801561203757600080fd5b505afa15801561204b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206f9190615302565b9392505050565b6000806000805b8088111561210d5760008989838181106120a757634e487b7160e01b600052603260045260246000fd5b90506020020135905060008060006120c1848c8c8c6121d3565b919450925090506120d2838961596a565b97506120de828861596a565b96506120ea8282615996565b6120f4908761596a565b955050505050808061210590615a2d565b91505061207d565b506121188282615982565b9050955095509592505050565b61212f33856117a9565b61214b5760405162461bcd60e51b8152600401610f2b90615889565b600084815260156020526040902054612165908390613ce2565b9150612172338584613e1e565b611ec084848361382c565b6060600f805480602002602001604051908101604052809291908181526020018280548015610de65760200282019190600052602060002090815481526020019060010190808311611ae9575050505050905090565b60008060006121e233886117a9565b806122085750336000908152600c602090815260408083206001845290915290205460ff165b6122245760405162461bcd60e51b8152600401610f2b90615889565b61223087878787613e56565b9250925092509450945094915050565b6060600061224d83610bb4565b9050600081516001600160401b0381111561227857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156122ed57816020015b6122da6040518060a001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b031681525090565b8152602001906001900390816122965790505b50905060005b8083511115610c6957600083828151811061231e57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008181526012835260409081902054815160a0810183528381526001600160a01b03909116938101849052815163c5c72dc360e01b8152600481018490529294509190820190839063c5c72dc39060240160206040518083038186803b15801561239457600080fd5b505afa1580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190615302565b81526000848152601560209081526040918290205490830152805163fabee7db60e01b8152600481018690529101906001600160a01b0384169063fabee7db9060240160206040518083038186803b15801561242757600080fd5b505afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190614d50565b6001600160a01b031681525084848151811061248b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806124a390615a2d565b9150506122f3565b6000610d543387878787876133f9565b606060018054610d6d906159f8565b60008060005b808611156125545760008787838181106124fa57634e487b7160e01b600052603260045260246000fd5b90506020020135905061250d33826117a9565b6125295760405162461bcd60e51b8152600401610f2b90615889565b612534818787613f0c565b61253e908461596a565b925050808061254c90615a2d565b9150506124d0565b5095945050505050565b3361256761385a565b6001600160a01b0316148061258b5750336125806138f2565b6001600160a01b0316145b806125a557503361259a613faf565b6001600160a01b0316145b6126175760405162461bcd60e51b815260206004820152603860248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a65642064697361626c657200000000000000006064820152608401610f2b565b6001600160a01b03909116600090815260136020526040902055565b6001600160a01b03821633141561268c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610f2b565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516126f9911515815260200190565b60405180910390a35050565b61270f33846117a9565b61275b5760405162461bcd60e51b815260206004820152601a60248201527f6e6f7420617574686f72697a656420746f2077697468647261770000000000006044820152606401610f2b565b600061276684611c48565b6040516315375af760e31b8152600481018690526001600160a01b03858116602483015284811660448301529192509082169063a9bad7b8906064015b600060405180830381600087803b1580156127bd57600080fd5b505af11580156127d1573d6000803e3d6000fd5b505050506127de84612a41565b611ec05760405162461bcd60e51b815260206004820152602160248201527f5472616e636865206e6f7420766961626c6520616674657220776974686472616044820152607760f81b6064820152608401610f2b565b600d8181548110611f4d57600080fd5b600f8181548110611f4d57600080fd5b600080600061286333886117a9565b6128b95760405162461bcd60e51b815260206004820152602160248201527f6e6f7420617574686f72697a656420746f206d696772617465207472616e63686044820152606560f81b6064820152608401610f2b565b6128c1613963565b60405163b4d6975760e01b81526001600160a01b038881166004830152919091169063b4d697579060240160206040518083038186803b15801561290457600080fd5b505afa158015612918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293c9190615263565b6129805760405162461bcd60e51b815260206004820152601560248201527414dd1c985d1959de481b9bdd08185c1c1c9bdd9959605a1b6044820152606401610f2b565b600061298b88611c48565b60405163591eb36160e11b8152600481018a90526001600160a01b038981166024830152888116604483015287811660648301529192509082169063b23d66c290608401606060405180830381600087803b1580156129e957600080fd5b505af11580156129fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a219190614f89565b91955093509150612a36888289878787613cfa565b509450945094915050565b600081815260156020526040812054612710811015612a6b57612a6383614013565b915050610c6e565b6000612a756140d4565b90506000806000612a87878586613200565b60008a815260156020526040812054939650919450925090612aab9085858561410c565b9050808015612abe5750612abe88614013565b9650505050505050610c6e565b50919050565b612adb338361399b565b612af75760405162461bcd60e51b8152600401610f2b906158be565b611ec08484848461413a565b600e8181548110611f4d57600080fd5b6000818152600260205260409020546060906001600160a01b0316612b925760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610f2b565b6000612ba960408051602081019091526000815290565b90506000815111612bc9576040518060200160405280600081525061206f565b80612bd384614172565b604051602001612be49291906155b0565b604051602081830303815290604052915050919050565b600080600080612c0c878787613200565b6000998a5260156020526040909920549199909897509095509350505050565b6001600160a01b0382811660009081526011602090815260408083208585168452909152812054909116610d0957612c62613c39565b6040516302eaec2d60e31b81526001600160a01b03858116600483015284811660248301529190911690631757616890604401600060405180830381600087803b158015612caf57600080fd5b505af1158015612cc3573d6000803e3d6000fd5b50505050612ccf613c39565b60405163179ce80d60e21b81526001600160a01b03858116600483015284811660248301529190911690635e73a0349060440160206040518083038186803b158015612d1a57600080fd5b505afa158015612d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d529190614d50565b6001600160a01b03938416600090815260116020908152604080832095871683529490529290922080546001600160a01b03191693831693909317909255919050565b6060600d805480602002602001604051908101604052809291908181526020018280548015610de65760200282019190600052602060002090815481526020019060010190808311611ae9575050505050905090565b33612df461385a565b6001600160a01b03161480612e18575033612e0d6138f2565b6001600160a01b0316145b80612e275750612e273361428c565b612e995760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610f2b565b6001600160a01b03909216600090815260136020526040902090815560010155565b612ee66040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b038216600090815260136020526040812090612f118482612f0c6140d4565b614332565b60408051608081018252855481526002860154602082015260019095015490850152606084015250909392505050565b6117a5338383613da5565b612f546144d3565b6001600160a01b031663e670309c6040518163ffffffff1660e01b81526004016040805180830381600087803b158015612f8d57600080fd5b505af1158015612fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc591906152b7565b50565b60606010805480602002602001604051908101604052809291908181526020018280548015610de65760200282019190600052602060002090815481526020019060010190808311611ae9575050505050905090565b6000613028613963565b600083815260126020526040908190205490516316a665e160e01b81526001600160a01b0391821660048201529116906316a665e19060240160206040518083038186803b15801561307957600080fd5b505afa15801561308d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d099190614d50565b336130ba61385a565b6001600160a01b031614806130de5750336130d36138f2565b6001600160a01b0316145b61312a5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610f2b565b6001600160a01b03909116600090815260136020526040902060010155565b336000908152600c602090815260408083206001845290915290205460ff166131c25760405162461bcd60e51b815260206004820152602560248201527f4e6f7420617574686f72697a656420746f207472616e7366657220757365722060448201526466756e647360d81b6064820152608401610f2b565b611084838383613da5565b60006131d933856117a9565b6131f55760405162461bcd60e51b8152600401610f2b90615889565b611e7c848484613f0c565b600083815260126020526040808220549051637d4c525d60e11b8152600481018690526001600160a01b038581166024830152848116604483015283928392911690819063fa98a4ba9060640160606040518083038186803b15801561326557600080fd5b505afa158015613279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329d9190615500565b9350935093505093509350939050565b336000908152600c602090815260408083206005845290915290205460ff166133185760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420617574686f72697a656420746f206c697175696461746500000000006044820152606401610f2b565b611ec061332485611ec6565b848685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061413a92505050565b60008281526012602052604080822054905163fd80d0c360e01b8152600481018590526001600160a01b03848116602483015290911690819063fd80d0c390604401610cb5565b60006001600160e01b031982166380ac58cd60e01b14806133da57506001600160e01b03198216635b5e139f60e01b145b80610d0957506301ffc9a760e01b6001600160e01b0319831614610d09565b6000613403613963565b60405163b4d6975760e01b81526001600160a01b038781166004830152919091169063b4d697579060240160206040518083038186803b15801561344657600080fd5b505afa15801561345a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347e9190615263565b6134c25760405162461bcd60e51b815260206004820152601560248201527414dd1c985d1959de481b9bdd08185c1c1c9bdd9959605a1b6044820152606401610f2b565b6134ca6144d3565b6001600160a01b031663ff1883486040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561350457600080fd5b505af1158015613518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353c9190615302565b600081815260126020908152604080832080546001600160a01b0319166001600160a01b038b16179055600a9091529020879055905061357b8461450b565b6135a787828860405160200161359391815260200190565b604051602081830303815290604052614570565b60405163b832799360e01b81526001600160a01b038881166004830152602482018390528581166044830152606482018590526084820184905286169063b83279939060a401600060405180830381600087803b15801561360757600080fd5b505af115801561361b573d6000803e3d6000fd5b505050509695505050505050565b811561108457600061363a84611c48565b60405163fabee7db60e01b8152600481018690529091506000906001600160a01b0383169063fabee7db9060240160206040518083038186803b15801561368057600080fd5b505afa158015613694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b89190614d50565b905060006136c68583611635565b90506136d2818661596a565b600087815260156020526040812080549091906136f090849061596a565b90915550506001600160a01b0382166000908152601360205260409020613717828761596a565b81600201600082825461372a919061596a565b909155505060028101548154101561377c5760405162461bcd60e51b815260206004820152601560248201527445786365656465642064656274206365696c696e6760581b6044820152606401610f2b565b816016600082825461378e919061596a565b909155506000905061379f886145a3565b90506137b4866137af838a61596a565b613c71565b5050505050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906137f382611ec6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b811561108457600061383d846145a3565b9050801561384f5761384f8282613c71565b611ec084848461469c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138b557600080fd5b505afa1580156138c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ed9190614d50565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561394f57600080fd5b505af11580156138c9573d6000803e3d6000fd5b6068600052600b6020527f5218b498ba0afb1d30e8ac0c5923fc8f9c711c59e5156e971fd6a28c8c36dcca546001600160a01b031690565b6000818152600260205260408120546001600160a01b0316613a145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610f2b565b6000613a1f83611ec6565b9050806001600160a01b0316846001600160a01b03161480613a5a5750836001600160a01b0316613a4f84610eb6565b6001600160a01b0316145b80610d0557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610d05565b826001600160a01b0316613aa182611ec6565b6001600160a01b031614613b095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610f2b565b6001600160a01b038216613b6b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610f2b565b613b768383836146e7565b613b816000826137be565b6001600160a01b0383166000908152600360205260408120805460019290613baa9084906159b5565b90915550506001600160a01b0382166000908152600360205260408120805460019290613bd890849061596a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b606a600052600b6020527f883a43708262222a5f4103b2729e693d0d260c9091529ffea5b2c6052e27079d546001600160a01b031690565b613c796140d4565b6040516340c10f1960e01b81526001600160a01b0384811660048301526024820184905291909116906340c10f19906044015b600060405180830381600087803b158015613cc657600080fd5b505af1158015613cda573d6000803e3d6000fd5b505050505050565b600081831115613cf3575080610d09565b5081610d09565b60405163459ba12760e01b8152600481018790526001600160a01b0386811660248301528481166044830152606482018490526084820183905285169063459ba1279060a401600060405180830381600087803b158015613d5a57600080fd5b505af1158015613d6e573d6000803e3d6000fd5b5050506000968752505060126020525050604090922080546001600160a01b0319166001600160a01b039093169290921790915550565b613dae82611c48565b60405163f12ba38160e01b81526001600160a01b0385811660048301526024820185905260448201849052919091169063f12ba38190606401600060405180830381600087803b158015613e0157600080fd5b505af1158015613e15573d6000803e3d6000fd5b50505050505050565b801561108457613e2e83826147a4565b60008281526015602052604081208054839290613e4c9084906159b5565b9091555050505050565b600080600080613e6588611c48565b604051638496e89160e01b8152600481018a90526001600160a01b0389811660248301528881166044830152878116606483015291925090821690638496e89190608401606060405180830381600087803b158015613ec357600080fd5b505af1158015613ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613efb9190615500565b935093509350509450945094915050565b600080613f1885611c48565b60405163f8903fb760e01b8152600481018790526001600160a01b03868116602483015285811660448301529192509082169063f8903fb790606401602060405180830381600087803b158015613f6e57600080fd5b505af1158015613f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa69190615302565b95945050505050565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156138b557600080fd5b60008061401f83611ec6565b90506001600160a01b0381163b156140ca576000838152600a602052604090819020549051632c97897d60e21b815282916001600160a01b0383169163b25e25f4916140719160040190815260200190565b60206040518083038186803b15801561408957600080fd5b505afa15801561409d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c19190615263565b92505050610c6e565b6001915050610c6e565b6066600052600b6020527f9b93b1f278920c61d89dbcb374ecb76190cc66519824442e7c3630b16c7fd3fd546001600160a01b031690565b600061411a85612710615996565b82614125868661596a565b61412f9190615996565b101595945050505050565b614146848484846147e3565b8080602001905181019061415a9190615302565b6000928352600a602052604090922091909155505050565b60608161419757506040805180820190915260018152600360fc1b6020820152610c6e565b8160005b81156141c157806141ab81615a2d565b91506141ba9050600a83615982565b915061419b565b6000816001600160401b038111156141e957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614213576020820181803683370190505b5090505b8415611e7c576142286001836159b5565b9150614235600a86615a48565b61424090603061596a565b60f81b81838151811061426357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350614285600a86615982565b9450614217565b6040516393552a3d60e01b81526103eb60048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906393552a3d9060440160206040518083038186803b1580156142fa57600080fd5b505afa15801561430e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d099190615263565b6001600160a01b03808416600090815260116020908152604080832085851684529091528120549091829116806143f15761436b613c39565b60405163179ce80d60e21b81526001600160a01b03888116600483015286811660248301529190911690635e73a0349060440160206040518083038186803b1580156143b657600080fd5b505afa1580156143ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ee9190614d50565b90505b6040516313f3552960e21b81526001600160a01b038781166004830152602482018790528581166044830152821690634fcd54a490606401604080518083038186803b15801561444057600080fd5b505afa158015614454573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061447891906154b0565b9093509150816144ca5760405162461bcd60e51b815260206004820181905260248201527f556e696e697469616c697a656420626f72726f7761626c65207065722031306b6044820152606401610f2b565b50935093915050565b6069600052600b6020527fbfc0b0c2052ca8c7e1e4620fa592015c0fc6d26105a3da5a2e30d9693b428343546001600160a01b031690565b6001600160a01b038116600090815260136020526040902054612fc55760405162461bcd60e51b815260206004820152601860248201527f546f6b656e206973206e6f742077686974656c697374656400000000000000006044820152606401610f2b565b61457a8383614816565b6145876000848484614964565b6110845760405162461bcd60e51b8152600401610f2b90615837565b600081815260156020526040812054816145bb6140d4565b905060008060006145ce87858630613e56565b9250925092506145e08584848461410c565b6146415760405162461bcd60e51b815260206004820152602c60248201527f426f726f7720627265616b73206d696e20636f6c6c61746572616c697a61746960448201526b1bdb881d1a1c995cda1bdb1960a21b6064820152608401610f2b565b848311156146695760008781526015602052604081205561466285846159b5565b9550614688565b61467383866159b5565b60008881526015602052604081209190915595505b61469230846147a4565b5050505050919050565b60006146a784611c48565b604051630ad58d2f60e01b815260048101869052602481018590526001600160a01b03848116604483015291925090821690630ad58d2f906064016127a3565b6001600160a01b0383166147425761473d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b614765565b816001600160a01b0316836001600160a01b031614614765576147658382614a6e565b6001600160a01b0382166147815761477c81614b0b565b611084565b826001600160a01b0316826001600160a01b031614611084576110848282614be4565b6147ac6140d4565b604051632770a7eb60e21b81526001600160a01b038481166004830152602482018490529190911690639dc29fac90604401613cac565b6147ee848484613a8e565b6147fa84848484614964565b611ec05760405162461bcd60e51b8152600401610f2b90615837565b6001600160a01b03821661486c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610f2b565b6000818152600260205260409020546001600160a01b0316156148d15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610f2b565b6148dd600083836146e7565b6001600160a01b038216600090815260036020526040812080546001929061490690849061596a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15614a6657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906149a89033908990889088906004016155df565b602060405180830381600087803b1580156149c257600080fd5b505af19250505080156149f2575060408051601f3d908101601f191682019092526149ef9181019061529b565b60015b614a4c573d808015614a20576040519150601f19603f3d011682016040523d82523d6000602084013e614a25565b606091505b508051614a445760405162461bcd60e51b8152600401610f2b90615837565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e7c565b506001611e7c565b60006001614a7b84611f5e565b614a8591906159b5565b600083815260076020526040902054909150808214614ad8576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090614b1d906001906159b5565b60008381526009602052604081205460088054939450909284908110614b5357634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110614b8257634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480614bc857634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000614bef83611f5e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806101e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000801916815260200160008152602001600081526020016000815260200160006002811115614ccc57634e487b7160e01b600052602160045260246000fd5b905290565b8051610c6e81615a9e565b60008083601f840112614ced578182fd5b5081356001600160401b03811115614d03578182fd5b6020830191508360208260051b8501011115614d1e57600080fd5b9250929050565b805160038110610c6e57600080fd5b600060208284031215614d45578081fd5b813561206f81615a9e565b600060208284031215614d61578081fd5b815161206f81615a9e565b60008060408385031215614d7e578081fd5b8235614d8981615a9e565b91506020830135614d9981615a9e565b809150509250929050565b600080600060608486031215614db8578081fd5b8335614dc381615a9e565b92506020840135614dd381615a9e565b929592945050506040919091013590565b60008060008060808587031215614df9578081fd5b8435614e0481615a9e565b9350602085810135614e1581615a9e565b93506040860135925060608601356001600160401b0380821115614e37578384fd5b818801915088601f830112614e4a578384fd5b813581811115614e5c57614e5c615a88565b614e6e601f8201601f1916850161593a565b91508082528984828501011115614e83578485fd5b8084840185840137810190920192909252939692955090935050565b600080600080600060a08688031215614eb6578283fd5b8535614ec181615a9e565b94506020860135614ed181615a9e565b935060408601359250606086013591506080860135614eef81615a9e565b809150509295509295909350565b60008060408385031215614f0f578182fd5b8235614f1a81615a9e565b91506020830135614d9981615ab3565b60008060408385031215614f3c578182fd5b8235614f4781615a9e565b946020939093013593505050565b600080600060608486031215614f69578081fd5b8335614f7481615a9e565b95602085013595506040909401359392505050565b600080600060608486031215614f9d578081fd5b8351614fa881615a9e565b602085015160409095015190969495509392505050565b60008060208385031215614fd1578182fd5b82356001600160401b03811115614fe6578283fd5b614ff285828601614cdc565b90969095509350505050565b60006020808385031215615010578182fd5b82516001600160401b0380821115615026578384fd5b818501915085601f830112615039578384fd5b81518181111561504b5761504b615a88565b615059848260051b0161593a565b8181528481019250838501610160808402860187018a1015615079578788fd5b8795505b838610156151305780828b031215615093578788fd5b61509c8161593a565b6150a583614cd1565b81526150b2888401614cd1565b8189015260408381015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012061510b818501614d25565b908201526101408381015190820152855260019590950194938601939081019061507d565b509098975050505050505050565b600080600060408486031215615152578081fd5b83356001600160401b03811115615167578182fd5b61517386828701614cdc565b909450925050602084013561518781615a9e565b809150509250925092565b600080600080606085870312156151a7578182fd5b84356001600160401b038111156151bc578283fd5b6151c887828801614cdc565b90955093505060208501356151dc81615a9e565b915060408501356151ec81615a9e565b939692955090935050565b60008060008060006080868803121561520e578283fd5b85356001600160401b03811115615223578384fd5b61522f88828901614cdc565b909650945050602086013561524381615a9e565b9250604086013561525381615a9e565b91506060860135614eef81615a9e565b600060208284031215615274578081fd5b815161206f81615ab3565b600060208284031215615290578081fd5b813561206f81615ac1565b6000602082840312156152ac578081fd5b815161206f81615ac1565b6000604082840312156152c8578081fd5b6152d2604061593a565b82518152602083015160208201528091505092915050565b6000602082840312156152fb578081fd5b5035919050565b600060208284031215615313578081fd5b5051919050565b6000806040838503121561532c578182fd5b823591506020830135614d9981615a9e565b600080600060608486031215615352578081fd5b83359250602084013561536481615a9e565b9150604084013561518781615a9e565b60008060008060808587031215615389578182fd5b84359350602085013561539b81615a9e565b925060408501356153ab81615a9e565b915060608501356151ec81615a9e565b600080600080600060a086880312156153d2578283fd5b8535945060208601356153e481615a9e565b935060408601356153f481615a9e565b94979396509394606081013594506080013592915050565b60008060008060608587031215615421578182fd5b84359350602085013561543381615a9e565b925060408501356001600160401b038082111561544e578384fd5b818701915087601f830112615461578384fd5b81358181111561546f578485fd5b886020828501011115615480578485fd5b95989497505060200194505050565b600080604083850312156154a1578182fd5b50508035926020909101359150565b600080604083850312156154c2578182fd5b505080516020909101519092909150565b6000806000606084860312156154e7578081fd5b8335925060208401359150604084013561518781615a9e565b600080600060608486031215615514578081fd5b8351925060208401519150604084015190509250925092565b60008060008060808587031215615542578182fd5b84359350602085013592506040850135915060608501356151ec81615a9e565b6000815180845261557a8160208601602086016159cc565b601f01601f19169290920160200192915050565b600381106155ac57634e487b7160e01b600052602160045260246000fd5b9052565b600083516155c28184602088016159cc565b8351908301906155d68183602088016159cc565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610d5490830184615562565b6020808252825182820181905260009190848201906040850190845b8181101561567557615662838551805182526020810151602083015260408101516040830152606081015160608301525050565b928401926080929092019160010161562e565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156157725781518051855286810151878601528581015186860152606080820151908601526080808201516001600160a01b03811682880152505060a0818101516001600160a01b03811687830152505060c0818101519086015260e08082015190860152610100808201519086015261012080820151908601526101408082015190860152610160808201519086015261018080820151908601526101a080820151908601526101c0908101519061575c8187018361558e565b50506101e093909301929085019060010161569e565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561577257815180518552868101516001600160a01b0390811688870152868201518787015260608083015190870152608091820151169085015260a0909301929085019060010161579c565b6020808252825182820181905260009190848201906040850190845b8181101561567557835183529284019291840191600101615808565b60006020825261206f6020830184615562565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f6e6f7420617574686f72697a656420746f207769746864726177207969656c64604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8151815260208083015190820152604080830151908201526060808301519082015260808101610d09565b604051601f8201601f191681016001600160401b038111828210171561596257615962615a88565b604052919050565b6000821982111561597d5761597d615a5c565b500190565b60008261599157615991615a72565b500490565b60008160001904831182151516156159b0576159b0615a5c565b500290565b6000828210156159c7576159c7615a5c565b500390565b60005b838110156159e75781810151838201526020016159cf565b83811115611ec05750506000910152565b600181811c90821680615a0c57607f821691505b60208210811415612acb57634e487b7160e01b600052602260045260246000fd5b6000600019821415615a4157615a41615a5c565b5060010190565b600082615a5757615a57615a72565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612fc557600080fd5b8015158114612fc557600080fd5b6001600160e01b031981168114612fc557600080fdfea264697066735822122095722eb27b5932356cbe321638a13881b39bab5e51a0460e6f5e7ebbcc73836f64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintingFee(uint256,address)": {
        "notice": "Minting fee per stable amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1088,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1090,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1094,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1098,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1102,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1108,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2027,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2031,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2034,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2038,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6519,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_containedIn",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14106,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 14112,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "roleCache",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 14115,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14118,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14121,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14124,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12200,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_oracleCache",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 8586,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "_holdingStrategies",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4952,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "assetConfigs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(AssetConfig)4947_storage)"
      },
      {
        "astId": 4955,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "liqThreshConversionFactorPer10k",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 4959,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "trancheDebt",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4961,
        "contract": "contracts/IsolatedLending.sol:IsolatedLending",
        "label": "pendingFees",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AssetConfig)4947_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IsolatedLending.AssetConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetConfig)4947_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AssetConfig)4947_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedLending.AssetConfig",
        "members": [
          {
            "astId": 4942,
            "contract": "contracts/IsolatedLending.sol:IsolatedLending",
            "label": "debtCeiling",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4944,
            "contract": "contracts/IsolatedLending.sol:IsolatedLending",
            "label": "feePer10k",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4946,
            "contract": "contracts/IsolatedLending.sol:IsolatedLending",
            "label": "totalDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}