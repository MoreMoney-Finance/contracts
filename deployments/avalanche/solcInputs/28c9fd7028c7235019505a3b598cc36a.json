{
  "language": "Solidity",
  "sources": {
    "contracts/controller-actions/DependencyCleaner.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../Executor.sol\";\n\nimport \"../DependencyController.sol\";\n\ncontract DependencyCleaner is Executor {\n    address[] contracts;\n    uint256[] roles2nix;\n\n    constructor(\n        address[] memory _contracts,\n        uint256[] memory _roles2nix,\n        address _roles\n    ) RoleAware(_roles) {\n        contracts = _contracts;\n        roles2nix = _roles2nix;\n    }\n\n    function execute() external override {\n        DependencyController dc = DependencyController(msg.sender);\n        for (uint256 i; contracts.length > i; i++) {\n            dc.removeRole(roles2nix[i], contracts[i]);\n        }\n\n        delete contracts;\n        delete roles2nix;\n        selfdestruct(payable(tx.origin));\n    }\n}\n"
    },
    "contracts/Executor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./roles/RoleAware.sol\";\n\nabstract contract Executor is RoleAware {\n    function execute() external virtual;\n}\n"
    },
    "contracts/DependencyController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./roles/RoleAware.sol\";\nimport \"./Executor.sol\";\nimport \"../interfaces/IDependencyController.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./roles/DependentContract.sol\";\n\n/// @title Provides a single point of reference to verify integrity\n/// of the roles structure and facilitate governance actions\n/// within our system as well as performing cache invalidation for\n/// roles and inter-contract relationships\ncontract DependencyController is RoleAware, IDependencyController {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    constructor(address _roles) RoleAware(_roles) {}\n\n    address public override currentExecutor;\n\n    EnumerableSet.AddressSet managedContracts;\n\n    mapping(address => uint256[]) public roleDependenciesByContr;\n    mapping(address => uint256[]) public characterDependenciesByContr;\n    mapping(uint256 => EnumerableSet.AddressSet) dependentsByRole;\n    mapping(uint256 => EnumerableSet.AddressSet) dependentsByCharacter;\n\n    mapping(uint256 => EnumerableSet.AddressSet) knownRoleHolders;\n\n    function executeAsOwner(address executor) external onlyOwnerExec {\n        uint256[] memory requiredRoles = Executor(executor).rolesPlayed();\n        uint256[] memory requiredCharacters = Executor(executor)\n            .charactersPlayed();\n        address[] memory extantCharacters = new address[](\n            requiredCharacters.length\n        );\n\n        for (uint256 i = 0; requiredRoles.length > i; i++) {\n            _giveRole(requiredRoles[i], executor);\n        }\n\n        for (uint256 i = 0; requiredCharacters.length > i; i++) {\n            extantCharacters[i] = roles.mainCharacters(requiredCharacters[i]);\n            _setMainCharacter(requiredCharacters[i], executor);\n        }\n\n        uint256[] memory dependsOnCharacters = DependentContract(executor)\n            .dependsOnCharacters();\n        uint256[] memory dependsOnRoles = DependentContract(executor)\n            .dependsOnRoles();\n        characterDependenciesByContr[executor] = dependsOnCharacters;\n        roleDependenciesByContr[executor] = dependsOnRoles;\n\n        updateCaches(executor);\n        currentExecutor = executor;\n        Executor(executor).execute();\n        currentExecutor = address(0);\n\n        uint256 len = requiredRoles.length;\n        for (uint256 i = 0; len > i; i++) {\n            _removeRole(requiredRoles[i], executor);\n        }\n\n        for (uint256 i = 0; requiredCharacters.length > i; i++) {\n            _setMainCharacter(requiredCharacters[i], extantCharacters[i]);\n        }\n    }\n\n    /// Orchestrate roles and permission for contract\n    function manageContract(address contr) external onlyOwnerExec {\n        managedContracts.add(contr);\n\n        uint256[] memory charactersPlayed = DependentContract(contr)\n            .charactersPlayed();\n        uint256[] memory rolesPlayed = DependentContract(contr).rolesPlayed();\n\n        // set up all characters this contract plays\n        uint256 len = charactersPlayed.length;\n        for (uint256 i = 0; len > i; i++) {\n            uint256 character = charactersPlayed[i];\n            _setMainCharacter(character, contr);\n        }\n\n        // all roles this contract plays\n        len = rolesPlayed.length;\n        for (uint256 i = 0; len > i; i++) {\n            uint256 role = rolesPlayed[i];\n            _giveRole(role, contr);\n        }\n\n        uint256[] memory dependsOnCharacters = DependentContract(contr)\n            .dependsOnCharacters();\n        uint256[] memory dependsOnRoles = DependentContract(contr)\n            .dependsOnRoles();\n        characterDependenciesByContr[contr] = dependsOnCharacters;\n        roleDependenciesByContr[contr] = dependsOnRoles;\n\n        for (uint256 i; dependsOnCharacters.length > i; i++) {\n            dependentsByCharacter[dependsOnCharacters[i]].add(contr);\n        }\n        for (uint256 i; dependsOnRoles.length > i; i++) {\n            dependentsByRole[dependsOnRoles[i]].add(contr);\n        }\n\n        updateCaches(contr);\n    }\n\n    ///  Remove roles and permissions for contract\n    function disableContract(address contr) external onlyOwnerExecDisabler {\n        _disableContract(contr);\n    }\n\n    function _disableContract(address contr) internal {\n        managedContracts.remove(contr);\n\n        uint256[] memory charactersPlayed = DependentContract(contr)\n            .charactersPlayed();\n        uint256[] memory rolesPlayed = DependentContract(contr).rolesPlayed();\n\n        uint256 len = rolesPlayed.length;\n        for (uint256 i = 0; len > i; i++) {\n            if (roles.getRole(rolesPlayed[i], contr)) {\n                _removeRole(rolesPlayed[i], contr);\n            }\n        }\n\n        len = charactersPlayed.length;\n        for (uint256 i = 0; len > i; i++) {\n            if (roles.mainCharacters(charactersPlayed[i]) == contr) {\n                _setMainCharacter(charactersPlayed[i], address(0));\n            }\n        }\n\n        uint256[] storage dependsOnCharacters = characterDependenciesByContr[\n            contr\n        ];\n        len = dependsOnCharacters.length;\n        for (uint256 i; len > i; i++) {\n            dependentsByCharacter[dependsOnCharacters[i]].remove(contr);\n        }\n\n        uint256[] storage dependsOnRoles = roleDependenciesByContr[contr];\n        len = dependsOnRoles.length;\n        for (uint256 i; len > i; i++) {\n            dependentsByRole[dependsOnRoles[i]].remove(contr);\n        }\n    }\n\n    /// Activate role\n    function giveRole(uint256 role, address actor) external onlyOwnerExec {\n        _giveRole(role, actor);\n    }\n\n    /// Disable role\n    function removeRole(uint256 role, address actor)\n        external\n        onlyOwnerExecDisabler\n    {\n        _removeRole(role, actor);\n    }\n\n    function _removeRole(uint256 role, address actor) internal {\n        knownRoleHolders[role].remove(actor);\n        roles.removeRole(role, actor);\n        updateRoleCache(role, actor);\n    }\n\n    function setMainCharacter(uint256 role, address actor)\n        external\n        onlyOwnerExec\n    {\n        _setMainCharacter(role, actor);\n    }\n\n    function _giveRole(uint256 role, address actor) internal {\n        knownRoleHolders[role].add(actor);\n        roles.giveRole(role, actor);\n        updateRoleCache(role, actor);\n    }\n\n    function _setMainCharacter(uint256 character, address actor) internal {\n        roles.setMainCharacter(character, actor);\n        updateMainCharacterCache(character);\n    }\n\n    function updateMainCharacterCache(uint256 character) public override {\n        EnumerableSet.AddressSet storage listeners = dependentsByCharacter[\n            character\n        ];\n        uint256 len = listeners.length();\n        for (uint256 i = 0; len > i; i++) {\n            RoleAware(listeners.at(i)).updateMainCharacterCache(character);\n        }\n    }\n\n    function updateRoleCache(uint256 role, address contr) public override {\n        EnumerableSet.AddressSet storage listeners = dependentsByRole[role];\n        uint256 len = listeners.length();\n        for (uint256 i = 0; len > i; i++) {\n            RoleAware(listeners.at(i)).updateRoleCache(role, contr);\n        }\n    }\n\n    function updateCaches(address contr) public {\n        // update this contract with all characters it's listening to\n        uint256[] storage dependsOnCharacters = characterDependenciesByContr[\n            contr\n        ];\n        uint256 len = dependsOnCharacters.length;\n        for (uint256 i = 0; len > i; i++) {\n            RoleAware(contr).updateMainCharacterCache(dependsOnCharacters[i]);\n        }\n\n        // update this contract with all the roles it's listening to\n        uint256[] storage dependsOnRoles = roleDependenciesByContr[contr];\n        len = dependsOnRoles.length;\n        for (uint256 i = 0; len > i; i++) {\n            uint256 role = dependsOnRoles[i];\n            EnumerableSet.AddressSet storage knownHolders = knownRoleHolders[\n                role\n            ];\n            for (uint256 j = 0; knownHolders.length() > j; j++) {\n                RoleAware(contr).updateRoleCache(role, knownHolders.at(j));\n            }\n        }\n    }\n\n    function allManagedContracts() external view returns (address[] memory) {\n        return managedContracts.values();\n    }\n}\n"
    },
    "contracts/roles/RoleAware.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./Roles.sol\";\nimport \"./DependentContract.sol\";\n\n/// @title Role management behavior\n/// Main characters are for service discovery\n/// Whereas roles are for access control\ncontract RoleAware is DependentContract {\n    Roles public immutable roles;\n\n    constructor(address _roles) {\n        require(_roles != address(0), \"Please provide valid roles address\");\n        roles = Roles(_roles);\n    }\n\n    modifier noIntermediary() {\n        require(\n            msg.sender == tx.origin,\n            \"Currently no intermediaries allowed for this function call\"\n        );\n        _;\n    }\n\n    // @dev Throws if called by any account other than the owner or executor\n    modifier onlyOwnerExec() {\n        require(\n            owner() == msg.sender || executor() == msg.sender,\n            \"Roles: caller is not the owner\"\n        );\n        _;\n    }\n\n    modifier onlyOwnerExecDisabler() {\n        require(\n            owner() == msg.sender ||\n                executor() == msg.sender ||\n                disabler() == msg.sender,\n            \"Caller is not the owner, executor or authorized disabler\"\n        );\n        _;\n    }\n\n    modifier onlyOwnerExecActivator() {\n        require(\n            owner() == msg.sender ||\n                executor() == msg.sender ||\n                isActivator(msg.sender),\n            \"Caller is not the owner, executor or authorized activator\"\n        );\n        _;\n    }\n\n    function updateRoleCache(uint256 role, address contr) public virtual {\n        roleCache[contr][role] = roles.getRole(role, contr);\n    }\n\n    function updateMainCharacterCache(uint256 role) public virtual {\n        mainCharacterCache[role] = roles.mainCharacters(role);\n    }\n\n    function owner() internal view returns (address) {\n        return roles.owner();\n    }\n\n    function executor() internal returns (address) {\n        return roles.executor();\n    }\n\n    function disabler() internal view returns (address) {\n        return roles.mainCharacters(DISABLER);\n    }\n\n    function isActivator(address contr) internal view returns (bool) {\n        return roles.getRole(ACTIVATOR, contr);\n    }\n}\n"
    },
    "contracts/roles/Roles.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IDependencyController.sol\";\n\n// we chose not to go with an enum\n// to make this list easy to extend\nuint256 constant FUND_TRANSFERER = 1;\nuint256 constant MINTER_BURNER = 2;\nuint256 constant TRANCHE = 3;\nuint256 constant ORACLE_LISTENER = 4;\nuint256 constant LIQUIDATOR = 5;\n\nuint256 constant FUND = 101;\nuint256 constant STABLECOIN = 102;\nuint256 constant FEE_RECIPIENT = 103;\nuint256 constant STRATEGY_REGISTRY = 104;\nuint256 constant TRANCHE_ID_SERVICE = 105;\nuint256 constant ORACLE_REGISTRY = 106;\nuint256 constant ISOLATED_LENDING = 107;\nuint256 constant TWAP_ORACLE = 108;\n\nuint256 constant DISABLER = 1001;\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\nuint256 constant ACTIVATOR = 1003;\n\n/// @title Manage permissions of contracts and ownership of everything\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\n/// beta and will then be transfered to governance\ncontract Roles is Ownable {\n    mapping(address => mapping(uint256 => bool)) public roles;\n    mapping(uint256 => address) public mainCharacters;\n\n    event RoleGiven(uint256 indexed role, address player);\n    event CharacterAssigned(\n        uint256 indexed character,\n        address playerBefore,\n        address playerNew\n    );\n    event RoleRemoved(uint256 indexed role, address player);\n\n    constructor(address targetOwner) Ownable() {\n        transferOwnership(targetOwner);\n    }\n\n    /// @dev Throws if called by any account other than the owner.\n    modifier onlyOwnerExecDepController() {\n        require(\n            owner() == msg.sender ||\n                executor() == msg.sender ||\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\n            \"Roles: caller is not the owner\"\n        );\n        _;\n    }\n\n    function giveRole(uint256 role, address actor)\n        external\n        onlyOwnerExecDepController\n    {\n        emit RoleGiven(role, actor);\n        roles[actor][role] = true;\n    }\n\n    function removeRole(uint256 role, address actor)\n        external\n        onlyOwnerExecDepController\n    {\n        emit RoleRemoved(role, actor);\n        roles[actor][role] = false;\n    }\n\n    function setMainCharacter(uint256 role, address actor)\n        external\n        onlyOwnerExecDepController\n    {\n        emit CharacterAssigned(role, mainCharacters[role], actor);\n        mainCharacters[role] = actor;\n    }\n\n    function getRole(uint256 role, address contr) external view returns (bool) {\n        return roles[contr][role];\n    }\n\n    /// @dev current executor\n    function executor() public returns (address exec) {\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\n        if (depController != address(0)) {\n            exec = IDependencyController(depController).currentExecutor();\n        }\n    }\n}\n"
    },
    "contracts/roles/DependentContract.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./Roles.sol\";\n\nabstract contract DependentContract {\n    mapping(uint256 => address) public mainCharacterCache;\n    mapping(address => mapping(uint256 => bool)) public roleCache;\n\n    uint256[] public _dependsOnCharacters;\n    uint256[] public _dependsOnRoles;\n\n    uint256[] public _charactersPlayed;\n    uint256[] public _rolesPlayed;\n\n    function charactersPlayed() public view returns (uint256[] memory) {\n        return _charactersPlayed;\n    }\n\n    function rolesPlayed() public view returns (uint256[] memory) {\n        return _rolesPlayed;\n    }\n\n    function dependsOnCharacters() public view returns (uint256[] memory) {\n        return _dependsOnCharacters;\n    }\n\n    function dependsOnRoles() public view returns (uint256[] memory) {\n        return _dependsOnRoles;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "interfaces/IDependencyController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\ninterface IDependencyController {\n    function currentExecutor() external returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/roles/DependsOnTwapOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\nimport \"../oracles/TwapOracle.sol\";\n\nabstract contract DependsonTwapOracle is DependentContract {\n    constructor() {\n        _dependsOnCharacters.push(TWAP_ORACLE);\n    }\n\n    function twapOracle() internal view returns (TwapOracle) {\n        return TwapOracle(mainCharacterCache[TWAP_ORACLE]);\n    }\n}\n"
    },
    "contracts/oracles/TwapOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./Oracle.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\n\ncontract TwapOracle is Oracle {\n    uint256 constant FP112 = 2**112;\n    uint256 constant FP56 = 2**56;\n\n    struct TwapOracleState {\n        address token0;\n        address token1;\n        uint256 cumulativePrice0;\n        uint256 price0FP;\n        uint256 lastUpdated;\n    }\n\n    mapping(address => TwapOracleState) public pairState;\n\n    mapping(address => mapping(address => address)) public bestPairByTokens;\n\n    uint256 priceUpdateWindow = 5 minutes;\n\n    constructor(address _roles) RoleAware(_roles) {\n        _charactersPlayed.push(TWAP_ORACLE);\n    }\n\n    function viewPairState(address pair)\n        public\n        view\n        returns (TwapOracleState memory oracleState)\n    {\n        oracleState = pairState[pair];\n\n        (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\n        uint256 timeDelta = pairLastUpdated - oracleState.lastUpdated;\n\n        if (timeDelta > priceUpdateWindow) {\n            uint256 newCumul0 = IUniswapV2Pair(pair).price0CumulativeLast();\n            oracleState.price0FP =\n                (newCumul0 - oracleState.cumulativePrice0) /\n                timeDelta;\n            oracleState.cumulativePrice0 = newCumul0;\n            oracleState.lastUpdated = pairLastUpdated;\n        }\n    }\n\n    function _getPairState(address pair)\n        internal\n        returns (TwapOracleState storage oracleState)\n    {\n        oracleState = pairState[pair];\n\n        (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\n        uint256 timeDelta = pairLastUpdated - oracleState.lastUpdated;\n\n        if (timeDelta > priceUpdateWindow) {\n            uint256 newCumul0 = IUniswapV2Pair(pair).price0CumulativeLast();\n            oracleState.price0FP =\n                (newCumul0 - oracleState.cumulativePrice0) /\n                timeDelta;\n            oracleState.cumulativePrice0 = newCumul0;\n            oracleState.lastUpdated = pairLastUpdated;\n        }\n    }\n\n    function getPairState(address pair)\n        external\n        returns (TwapOracleState memory oracleState)\n    {\n        return _getPairState(pair);\n    }\n\n    function viewAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public view virtual override returns (uint256) {\n        (address token0, address token1) = sortTokens(token, pegCurrency);\n        TwapOracleState memory oracleState = viewPairState(\n            bestPairByTokens[token0][token1]\n        );\n        if (token == token0) {\n            return (inAmount * oracleState.price0FP) / FP112;\n        } else {\n            return (inAmount * FP112) / oracleState.price0FP;\n        }\n    }\n\n    function getAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public virtual override returns (uint256) {\n        (address token0, address token1) = sortTokens(token, pegCurrency);\n        TwapOracleState storage oracleState = _getPairState(\n            bestPairByTokens[token0][token1]\n        );\n        if (token == token0) {\n            return (inAmount * oracleState.price0FP) / FP112;\n        } else {\n            return (inAmount * FP112) / oracleState.price0FP;\n        }\n    }\n\n    function initPairState(address pair)\n        public\n        returns (TwapOracleState memory)\n    {\n        TwapOracleState storage oracleState = pairState[pair];\n\n        // To avoid sandwich attacks on this activation call getAmountInPeg once more\n        // before releasing to public\n        if (oracleState.token0 == address(0)) {\n            IUniswapV2Pair uniPair = IUniswapV2Pair(pair);\n\n            (\n                uint112 reserve0,\n                uint112 reserve1,\n                uint256 pairLastUpdated\n            ) = uniPair.getReserves();\n\n            pairState[pair] = TwapOracleState({\n                token0: uniPair.token0(),\n                token1: uniPair.token1(),\n                cumulativePrice0: uniPair.price0CumulativeLast(),\n                price0FP: (FP112 * reserve1) / reserve0,\n                lastUpdated: pairLastUpdated\n            });\n\n            return pairState[pair];\n        } else {\n            return _getPairState(pair);\n        }\n    }\n\n    function setPriceUpdateWindow(uint256 window)\n        external\n        onlyOwnerExecDisabler\n    {\n        priceUpdateWindow = window;\n    }\n\n    function getTwapReserves(address pair)\n        external\n        returns (\n            address token0,\n            address token1,\n            uint256 res0,\n            uint256 res1\n        )\n    {\n        TwapOracleState storage oracleState = _getPairState(pair);\n\n        (res0, res1) = price0FP2Reserves(pair, oracleState.price0FP);\n        token0 = oracleState.token0;\n        token1 = oracleState.token1;\n    }\n\n    function viewTwapReserves(address pair)\n        external\n        view\n        returns (\n            address token0,\n            address token1,\n            uint256 res0,\n            uint256 res1\n        )\n    {\n        TwapOracleState memory oracleState = viewPairState(pair);\n\n        (res0, res1) = price0FP2Reserves(pair, oracleState.price0FP);\n        token0 = oracleState.token0;\n        token1 = oracleState.token1;\n    }\n\n    function price0FP2Reserves(address pair, uint256 price0FP)\n        public\n        view\n        returns (uint256 res0, uint256 res1)\n    {\n        uint256 k = IUniswapV2Pair(pair).kLast();\n\n        res0 = sqrt(((k * FP56) / price0FP) * FP56);\n        res1 = k / res0;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the closest power of two that is higher than x.\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"Identical address!\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"Zero address!\");\n    }\n\n    function setOracleSpecificParams(\n        address fromToken,\n        address toToken,\n        address pair,\n        bool isBest\n    ) external onlyOwnerExec {\n        _setOracleSpecificParams(fromToken, toToken, pair, isBest);\n    }\n\n    function _setOracleSpecificParams(\n        address fromToken,\n        address toToken,\n        address pair,\n        bool isBest\n    ) internal {\n        (address token0, address token1) = sortTokens(fromToken, toToken);\n        require(\n            IUniswapV2Pair(pair).token0() == token0 &&\n                IUniswapV2Pair(pair).token1() == token1,\n            \"Pair does not match tokens\"\n        );\n        initPairState(pair);\n\n        if (isBest) {\n            bestPairByTokens[token0][token1] = pair;\n        }\n    }\n\n    function _setOracleParams(\n        address fromToken,\n        address toToken,\n        bytes calldata data\n    ) internal override {\n        (address pair, bool isBest) = abi.decode(data, (address, bool));\n        _setOracleSpecificParams(fromToken, toToken, pair, isBest);\n    }\n\n    function encodeAndCheckOracleParams(\n        address tokenFrom,\n        address tokenTo,\n        address pair,\n        bool isBest\n    ) external view returns (bool, bytes memory) {\n        (address token0, address token1) = sortTokens(tokenFrom, tokenTo);\n        TwapOracleState storage state = pairState[pair];\n        bool matches = state.token0 == token0 && state.token1 == token1;\n\n        if (isBest) {\n            matches = matches && bestPairByTokens[token0][token1] == pair;\n        }\n\n        return (matches, abi.encode(pair, isBest));\n    }\n}\n"
    },
    "contracts/oracles/Oracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IOracle.sol\";\nimport \"../roles/RoleAware.sol\";\nimport \"../roles/DependsOnOracleRegistry.sol\";\n\nabstract contract Oracle is IOracle, RoleAware, DependsOnOracleRegistry {\n    mapping(address => uint256) public borrowablePer10ks;\n\n    function setBorrowable(address lpt, uint256 borrowablePer10k)\n        external\n        onlyOwnerExec\n    {\n        borrowablePer10ks[lpt] = borrowablePer10k;\n    }\n\n    function setOracleParams(\n        address token,\n        address pegCurrency,\n        uint256 borrowablePer10k,\n        bytes calldata data\n    ) external override {\n        require(\n            address(oracleRegistry()) == msg.sender,\n            \"Not authorized to init oracle\"\n        );\n        borrowablePer10ks[token] = borrowablePer10k;\n        _setOracleParams(token, pegCurrency, data);\n    }\n\n    function _setOracleParams(\n        address token,\n        address pegCurrency,\n        bytes calldata data\n    ) internal virtual;\n\n    function viewPegAmountAndBorrowable(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) external view override returns (uint256, uint256) {\n        return (\n            viewAmountInPeg(token, inAmount, pegCurrency),\n            borrowablePer10ks[token]\n        );\n    }\n\n    function getPegAmountAndBorrowable(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) external override returns (uint256, uint256) {\n        return (\n            getAmountInPeg(token, inAmount, pegCurrency),\n            borrowablePer10ks[token]\n        );\n    }\n\n    function viewAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public view virtual override returns (uint256);\n\n    function getAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public virtual override returns (uint256);\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\ninterface IOracle {\n    function viewAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) external view returns (uint256);\n\n    function getAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) external returns (uint256);\n\n    function viewPegAmountAndBorrowable(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) external view returns (uint256, uint256);\n\n    function getPegAmountAndBorrowable(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) external returns (uint256, uint256);\n\n    function setOracleParams(\n        address token,\n        address pegCurrency,\n        uint256 borrowable,\n        bytes calldata data\n    ) external;\n}\n\n// TODO: compatible with NFTs\n"
    },
    "contracts/roles/DependsOnOracleRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\nimport \"../OracleRegistry.sol\";\n\nabstract contract DependsOnOracleRegistry is DependentContract {\n    constructor() {\n        _dependsOnCharacters.push(ORACLE_REGISTRY);\n    }\n\n    function oracleRegistry() internal view returns (OracleRegistry) {\n        return OracleRegistry(mainCharacterCache[ORACLE_REGISTRY]);\n    }\n}\n"
    },
    "contracts/OracleRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./oracles/OracleAware.sol\";\nimport \"./roles/RoleAware.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./roles/DependsOnOracleListener.sol\";\nimport \"../interfaces/IOracle.sol\";\n\ncontract OracleRegistry is RoleAware, DependsOracleListener {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    mapping(address => mapping(address => address)) public tokenOracle;\n    mapping(address => mapping(address => EnumerableSet.AddressSet)) _listeners;\n\n    constructor(address _roles) RoleAware(_roles) {\n        _charactersPlayed.push(ORACLE_REGISTRY);\n    }\n\n    function setOracleParams(\n        address token,\n        address pegCurrency,\n        address oracle,\n        uint256 borrowablePer10k,\n        bytes calldata data\n    ) external onlyOwnerExecActivator {\n        tokenOracle[token][pegCurrency] = oracle;\n        IOracle(oracle).setOracleParams(\n            token,\n            pegCurrency,\n            borrowablePer10k,\n            data\n        );\n    }\n\n    function listenForCurrentOracleUpdates(address token, address pegCurrency)\n        external\n    {\n        require(isOracleListener(msg.sender), \"Not allowed to listen\");\n        _listeners[token][pegCurrency].add(msg.sender);\n        OracleAware(msg.sender).newCurrentOracle(token, pegCurrency);\n    }\n}\n"
    },
    "contracts/oracles/OracleAware.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../TrancheIDAware.sol\";\nimport \"../OracleRegistry.sol\";\nimport \"../../interfaces/IOracle.sol\";\nimport \"../roles/DependsOnOracleRegistry.sol\";\n\nabstract contract OracleAware is RoleAware, DependsOnOracleRegistry {\n    mapping(address => mapping(address => address)) public _oracleCache;\n\n    constructor() {\n        _rolesPlayed.push(ORACLE_LISTENER);\n    }\n\n    function newCurrentOracle(address token, address pegCurrency) external {\n        if (_oracleCache[token][pegCurrency] != address(0)) {\n            // make sure we don't init cache without listening\n            _oracleCache[token][pegCurrency] = oracleRegistry().tokenOracle(\n                token,\n                pegCurrency\n            );\n        }\n    }\n\n    function _listenForOracle(address token, address pegCurrency)\n        public\n        returns (address oracle)\n    {\n        if (_oracleCache[token][pegCurrency] == address(0)) {\n            oracleRegistry().listenForCurrentOracleUpdates(token, pegCurrency);\n            oracle = oracleRegistry().tokenOracle(token, pegCurrency);\n            _oracleCache[token][pegCurrency] = oracle;\n        }\n    }\n\n    function _viewValue(\n        address token,\n        uint256 amount,\n        address valueCurrency\n    ) internal view virtual returns (uint256 value) {\n        address oracle = _oracleCache[token][valueCurrency];\n        if (oracle == address(0)) {\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\n        }\n        return IOracle(oracle).viewAmountInPeg(token, amount, valueCurrency);\n    }\n\n    function _getValue(\n        address token,\n        uint256 amount,\n        address valueCurrency\n    ) internal virtual returns (uint256 value) {\n        address oracle = _oracleCache[token][valueCurrency];\n        if (oracle == address(0)) {\n            oracle = _listenForOracle(token, valueCurrency);\n        }\n\n        return IOracle(oracle).getAmountInPeg(token, amount, valueCurrency);\n    }\n\n    function _viewValueBorrowable(\n        address token,\n        uint256 amount,\n        address valueCurrency\n    ) internal view virtual returns (uint256 value, uint256 borrowablePer10k) {\n        address oracle = _oracleCache[token][valueCurrency];\n        if (oracle == address(0)) {\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\n        }\n        (value, borrowablePer10k) = IOracle(oracle).viewPegAmountAndBorrowable(\n            token,\n            amount,\n            valueCurrency\n        );\n\n        require(borrowablePer10k > 0, \"Uninitialized borrowable per 10k\");\n    }\n\n    function _getValueBorrowable(\n        address token,\n        uint256 amount,\n        address valueCurrency\n    ) internal virtual returns (uint256 value, uint256 borrowablerPer10k) {\n        address oracle = _oracleCache[token][valueCurrency];\n        if (oracle == address(0)) {\n            oracle = _listenForOracle(token, valueCurrency);\n        }\n\n        (value, borrowablerPer10k) = IOracle(oracle).getPegAmountAndBorrowable(\n            token,\n            amount,\n            valueCurrency\n        );\n\n        require(borrowablerPer10k > 0, \"Uninitialized borrowable per 10k\");\n    }\n}\n"
    },
    "contracts/roles/DependsOnOracleListener.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\n\nabstract contract DependsOracleListener is DependentContract {\n    constructor() {\n        _dependsOnRoles.push(ORACLE_LISTENER);\n    }\n\n    function isOracleListener(address contr) internal view returns (bool) {\n        return roleCache[contr][ORACLE_LISTENER];\n    }\n}\n"
    },
    "contracts/TrancheIDAware.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./roles/RoleAware.sol\";\nimport \"./TrancheIDService.sol\";\nimport \"./roles/DependsOnTrancheIDService.sol\";\n\nabstract contract TrancheIDAware is RoleAware, DependsOnTrancheIDService {\n    uint256 immutable totalTrancheSlots;\n\n    constructor(address _roles) RoleAware(_roles) {\n        totalTrancheSlots = TrancheIDService(\n            Roles(_roles).mainCharacters(TRANCHE_ID_SERVICE)\n        ).totalTrancheSlots();\n    }\n\n    mapping(uint256 => address) _slotTranches;\n\n    function tranche(uint256 trancheId) public view returns (address) {\n        uint256 slot = trancheId % totalTrancheSlots;\n        address trancheContract = _slotTranches[slot];\n        if (trancheContract == address(0)) {\n            trancheContract = trancheIdService().slotTranches(slot);\n        }\n\n        return trancheContract;\n    }\n}\n"
    },
    "contracts/TrancheIDService.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./roles/RoleAware.sol\";\nimport \"./roles/DependsOnTranche.sol\";\n\ncontract TrancheIDService is RoleAware, DependsOnTranche {\n    uint256 public constant totalTrancheSlots = 1e8;\n    uint256 public nextTrancheSlot = 1;\n\n    struct TrancheSlot {\n        uint256 nextTrancheIdRange;\n        uint256 trancheSlot;\n    }\n\n    mapping(address => TrancheSlot) public trancheSlots;\n    mapping(uint256 => address) public slotTranches;\n\n    constructor(address _roles) RoleAware(_roles) {\n        _charactersPlayed.push(TRANCHE_ID_SERVICE);\n    }\n\n    function getNextTrancheId() external returns (uint256 id) {\n        require(isTranche(msg.sender), \"Caller not a tranche contract\");\n        TrancheSlot storage slot = trancheSlots[msg.sender];\n        require(slot.trancheSlot != 0, \"Caller doesn't have a slot\");\n        id = slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\n        slot.nextTrancheIdRange++;\n    }\n\n    function setupTrancheSlot() external returns (TrancheSlot memory) {\n        require(isTranche(msg.sender), \"Caller not a tranche contract\");\n        require(\n            trancheSlots[msg.sender].trancheSlot == 0,\n            \"Tranche already has a slot\"\n        );\n        trancheSlots[msg.sender] = TrancheSlot({\n            nextTrancheIdRange: 1,\n            trancheSlot: nextTrancheSlot\n        });\n        slotTranches[nextTrancheSlot] = msg.sender;\n        nextTrancheSlot++;\n        return trancheSlots[msg.sender];\n    }\n\n    function viewNextTrancheId(address trancheContract)\n        external\n        view\n        returns (uint256)\n    {\n        TrancheSlot storage slot = trancheSlots[trancheContract];\n        return slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\n    }\n\n    function viewTrancheContractByID(uint256 trancheId)\n        external\n        view\n        returns (address)\n    {\n        return slotTranches[trancheId % totalTrancheSlots];\n    }\n\n    function viewSlotByTrancheContract(address tranche)\n        external\n        view\n        returns (uint256)\n    {\n        return trancheSlots[tranche].trancheSlot;\n    }\n}\n"
    },
    "contracts/roles/DependsOnTrancheIDService.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\nimport \"../TrancheIDService.sol\";\n\nabstract contract DependsOnTrancheIDService is DependentContract {\n    constructor() {\n        _dependsOnCharacters.push(TRANCHE_ID_SERVICE);\n    }\n\n    function trancheIdService() internal view returns (TrancheIDService) {\n        return TrancheIDService(mainCharacterCache[TRANCHE_ID_SERVICE]);\n    }\n}\n"
    },
    "contracts/roles/DependsOnTranche.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\n\nabstract contract DependsOnTranche is DependentContract {\n    constructor() {\n        _dependsOnRoles.push(TRANCHE);\n    }\n\n    function isTranche(address contr) internal view returns (bool) {\n        return roleCache[contr][TRANCHE];\n    }\n}\n"
    },
    "contracts/oracles/UniswapV2LPTOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"../../interfaces/IOracle.sol\";\nimport \"./Oracle.sol\";\nimport \"./OracleAware.sol\";\nimport \"./TwapOracle.sol\";\nimport \"../roles/DependsOnTwapOracle.sol\";\n\ncontract UniswapV2LPTOracle is Oracle, OracleAware, DependsonTwapOracle {\n    mapping(address => address) public singleSideValuation;\n\n    constructor(address _roles) RoleAware(_roles) {}\n\n    function viewAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public view override returns (uint256) {\n        (\n            address token0,\n            address token1,\n            uint256 reserve0,\n            uint256 reserve1\n        ) = twapOracle().viewTwapReserves(token);\n\n        address singleSideToken = singleSideValuation[token];\n        uint256 totalResVal;\n        if (singleSideToken == token0) {\n            uint256 resVal0 = _viewValue(token0, reserve0, pegCurrency);\n            totalResVal = resVal0 * 2;\n        } else if (singleSideToken == token1) {\n            uint256 resVal1 = _viewValue(token1, reserve1, pegCurrency);\n            totalResVal = resVal1 * 2;\n        } else {\n            uint256 resVal0 = _viewValue(token0, reserve0, pegCurrency);\n            uint256 resVal1 = _viewValue(token1, reserve1, pegCurrency);\n            totalResVal = resVal0 + resVal1;\n        }\n        return (inAmount * totalResVal) / IUniswapV2Pair(token).totalSupply();\n    }\n\n    function getAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public override returns (uint256) {\n        (\n            address token0,\n            address token1,\n            uint256 reserve0,\n            uint256 reserve1\n        ) = twapOracle().getTwapReserves(token);\n\n        address singleSideToken = singleSideValuation[token];\n        uint256 totalResVal;\n        if (singleSideToken == token0) {\n            uint256 resVal0 = _getValue(token0, reserve0, pegCurrency);\n            totalResVal = resVal0 * 2;\n        } else if (singleSideToken == token1) {\n            uint256 resVal1 = _getValue(token1, reserve1, pegCurrency);\n            totalResVal = resVal1 * 2;\n        } else {\n            uint256 resVal0 = _getValue(token0, reserve0, pegCurrency);\n            uint256 resVal1 = _getValue(token1, reserve1, pegCurrency);\n            totalResVal = resVal0 + resVal1;\n        }\n        return (inAmount * totalResVal) / IUniswapV2Pair(token).totalSupply();\n    }\n\n    function setOracleSpecificParams(\n        address token,\n        address pegCurrency,\n        address singleSideToken\n    ) external onlyOwnerExec {\n        _setOracleSpecificParams(token, pegCurrency, singleSideToken);\n    }\n\n    function _setOracleSpecificParams(\n        address token,\n        address pegCurrency,\n        address singleSideToken\n    ) internal {\n        TwapOracle.TwapOracleState memory pairState = twapOracle()\n            .initPairState(token);\n\n        require(\n            singleSideToken == pairState.token0 ||\n                singleSideToken == pairState.token1 ||\n                singleSideToken == address(0),\n            \"Not a valid single side token\"\n        );\n        if (singleSideToken != pairState.token0) {\n            require(\n                _getValue(pairState.token1, 1e18, pegCurrency) > 0,\n                \"Constituent oracle for token1 not set up\"\n            );\n        }\n        if (singleSideToken != pairState.token1) {\n            require(\n                _getValue(pairState.token0, 1e18, pegCurrency) > 0,\n                \"Constituent oracle for token0 not set up\"\n            );\n        }\n        singleSideValuation[token] = singleSideToken;\n    }\n\n    function _setOracleParams(\n        address token,\n        address pegCurrency,\n        bytes calldata data\n    ) internal override {\n        address singleSideToken = abi.decode(data, (address));\n        _setOracleSpecificParams(token, pegCurrency, singleSideToken);\n    }\n\n    function encodeAndCheckOracleParams(\n        address token,\n        address,\n        address singleSideToken\n    ) external view returns (bool, bytes memory) {\n        TwapOracle.TwapOracleState memory pairState = twapOracle()\n            .viewPairState(token);\n        bool matches = pairState.token0 != address(0) &&\n            singleSideValuation[token] == singleSideToken;\n\n        return (matches, abi.encode(singleSideToken));\n    }\n}\n"
    },
    "contracts/oracles/ProxyOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./Oracle.sol\";\nimport \"./OracleAware.sol\";\n\ncontract ProxyOracle is Oracle, OracleAware {\n    uint256 constant FP112 = 2**112;\n\n    constructor(address _roles) RoleAware(_roles) {}\n\n    mapping(address => mapping(address => address)) public valueProxy;\n\n    function viewAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public view virtual override returns (uint256) {\n        address proxy = valueProxy[token][pegCurrency];\n        uint256 proxyAmount = _viewValue(token, inAmount, proxy);\n        return _viewValue(proxy, proxyAmount, pegCurrency);\n    }\n\n    function getAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public virtual override returns (uint256) {\n        address proxy = valueProxy[token][pegCurrency];\n        uint256 proxyAmount = _getValue(token, inAmount, proxy);\n        return _getValue(proxy, proxyAmount, pegCurrency);\n    }\n\n    function setOracleSpecificParams(\n        address fromToken,\n        address toToken,\n        address proxy\n    ) external onlyOwnerExec {\n        valueProxy[fromToken][toToken] = proxy;\n    }\n\n    function _setOracleSpecificParams(\n        address fromToken,\n        address toToken,\n        address proxy\n    ) internal {\n        valueProxy[fromToken][toToken] = proxy;\n    }\n\n    function _setOracleParams(\n        address fromToken,\n        address toToken,\n        bytes calldata data\n    ) internal override {\n        _setOracleSpecificParams(\n            fromToken,\n            toToken,\n            abi.decode(data, (address))\n        );\n    }\n\n    function encodeAndCheckOracleParams(\n        address tokenFrom,\n        address tokenTo,\n        address proxy\n    ) external view returns (bool, bytes memory) {\n        bool matches = valueProxy[tokenFrom][tokenTo] == proxy;\n        return (matches, abi.encode(proxy));\n    }\n}\n"
    },
    "contracts/oracles/EquivalentScaledOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./Oracle.sol\";\n\ncontract EquivalentScaledOracle is Oracle {\n    uint256 constant FP112 = 2**112;\n\n    constructor(address _roles) RoleAware(_roles) {}\n\n    mapping(address => mapping(address => uint256)) public scaleConversionFP;\n\n    function viewAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public view virtual override returns (uint256) {\n        return (scaleConversionFP[token][pegCurrency] * inAmount) / FP112;\n    }\n\n    function getAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public view virtual override returns (uint256) {\n        return viewAmountInPeg(token, inAmount, pegCurrency);\n    }\n\n    function setOracleSpecificParams(\n        address tokenFrom,\n        address tokenTo,\n        uint256 tokenFromAmount,\n        uint256 tokenToAmount\n    ) external onlyOwnerExec {\n        _setOracleSpecificParams(\n            tokenFrom,\n            tokenTo,\n            tokenFromAmount,\n            tokenToAmount\n        );\n    }\n\n    function _setOracleSpecificParams(\n        address tokenFrom,\n        address tokenTo,\n        uint256 tokenFromAmount,\n        uint256 tokenToAmount\n    ) internal {\n        scaleConversionFP[tokenFrom][tokenTo] =\n            (FP112 * tokenToAmount) /\n            tokenFromAmount;\n    }\n\n    function _setOracleParams(\n        address tokenFrom,\n        address tokenTo,\n        bytes calldata data\n    ) internal override {\n        (uint256 tokenFromAmount, uint256 tokenToAmount) = abi.decode(\n            data,\n            (uint256, uint256)\n        );\n        _setOracleSpecificParams(\n            tokenFrom,\n            tokenTo,\n            tokenFromAmount,\n            tokenToAmount\n        );\n    }\n\n    function encodeAndCheckOracleParams(\n        address tokenFrom,\n        address tokenTo,\n        uint256 tokenFromAmount,\n        uint256 tokenToAmount\n    ) external view returns (bool, bytes memory) {\n        bool matches = scaleConversionFP[tokenFrom][tokenTo] ==\n            (FP112 * tokenToAmount) / tokenFromAmount;\n\n        return (matches, abi.encode(tokenFromAmount, tokenToAmount));\n    }\n}\n"
    },
    "contracts/controller-actions/TokenActivation.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../Executor.sol\";\nimport \"../roles/DependsOnIsolatedLending.sol\";\nimport \"../roles/DependsOnOracleRegistry.sol\";\nimport \"../Strategy.sol\";\n\ncontract TokenActivation is\n    Executor,\n    DependsOnIsolatedLending,\n    DependsOnOracleRegistry\n{\n    address[] public tokens;\n    uint256[] public debtCeilings;\n    uint256[] public feesPer10k;\n\n    constructor(\n        address[] memory _tokens,\n        uint256[] memory _debtCeilings,\n        uint256[] memory _feesPer10k,\n        address _roles\n    ) RoleAware(_roles) {\n        tokens = _tokens;\n        debtCeilings = _debtCeilings;\n        feesPer10k = _feesPer10k;\n    }\n\n    function execute() external override {\n        uint256 len = tokens.length;\n        for (uint256 i; len > i; i++) {\n            address token = tokens[i];\n            isolatedLending().configureAsset(\n                token,\n                debtCeilings[i],\n                feesPer10k[i]\n            );\n        }\n\n        delete tokens;\n        delete debtCeilings;\n        delete feesPer10k;\n        selfdestruct(payable(tx.origin));\n    }\n}\n"
    },
    "contracts/roles/DependsOnIsolatedLending.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\nimport \"../IsolatedLending.sol\";\n\nabstract contract DependsOnIsolatedLending is DependentContract {\n    constructor() {\n        _dependsOnCharacters.push(ISOLATED_LENDING);\n    }\n\n    function isolatedLending() internal view returns (IsolatedLending) {\n        return IsolatedLending(mainCharacterCache[ISOLATED_LENDING]);\n    }\n}\n"
    },
    "contracts/Strategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"../interfaces/IStrategy.sol\";\nimport \"./oracles/OracleAware.sol\";\nimport \"./Tranche.sol\";\nimport \"./roles/DependsOnStrategyRegistry.sol\";\nimport \"./roles/CallsStableCoinMintBurn.sol\";\nimport \"./roles/DependsOnTranche.sol\";\nimport \"./roles/DependsOnFundTransferer.sol\";\n\nabstract contract Strategy is\n    IStrategy,\n    OracleAware,\n    CallsStableCoinMintBurn,\n    DependsOnStrategyRegistry,\n    DependsOnTranche,\n    DependsOnFundTransferer,\n    TrancheIDAware\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bool public override isActive = true;\n\n    bytes32 public immutable override strategyName;\n\n    EnumerableSet.AddressSet _approvedTokens;\n    EnumerableSet.AddressSet _allTokensEver;\n\n    struct CollateralAccount {\n        uint256 collateral;\n        uint256 yieldCheckptIdx;\n        address trancheToken;\n    }\n\n    mapping(uint256 => CollateralAccount) public _accounts;\n\n    struct TokenMetadata {\n        uint256[] yieldCheckpoints;\n        uint256 cumulYieldPerCollateralFP;\n        uint256 totalCollateralPast;\n        uint256 totalCollateralNow;\n        uint256 apfLastUpdated;\n        uint256 apf;\n    }\n\n    uint256 public apfSmoothingPer10k = 5000;\n\n    mapping(address => TokenMetadata) public tokenMetadata;\n\n    uint256 internal constant FP64 = 2**64;\n\n    constructor(bytes32 stratName) {\n        strategyName = stratName;\n    }\n\n    modifier onlyActive() {\n        require(isActive, \"Strategy is not active\");\n        _;\n    }\n\n    function registerMintTranche(\n        address minter,\n        uint256 trancheId,\n        address assetToken,\n        uint256,\n        uint256 assetAmount\n    ) external override onlyActive {\n        require(\n            isTranche(msg.sender) && tranche(trancheId) == msg.sender,\n            \"Invalid tranche\"\n        );\n\n        _accounts[trancheId].yieldCheckptIdx = tokenMetadata[assetToken]\n            .yieldCheckpoints\n            .length;\n        _setAndCheckTrancheToken(trancheId, assetToken);\n        _deposit(minter, trancheId, assetAmount);\n    }\n\n    function deposit(uint256 trancheId, uint256 amount) external override {\n        _deposit(msg.sender, trancheId, amount);\n    }\n\n    function registerDepositFor(\n        address depositor,\n        uint256 trancheId,\n        uint256 amount\n    ) external virtual override onlyActive {\n        require(\n            isTranche(msg.sender) || isFundTransferer(msg.sender),\n            \"Not authorized to transfer user funds\"\n        );\n        _deposit(depositor, trancheId, amount);\n    }\n\n    function _deposit(\n        address depositor,\n        uint256 trancheId,\n        uint256 amount\n    ) internal virtual {\n        address token = trancheToken(trancheId);\n        _applyCompounding(trancheId);\n\n        collectCollateral(depositor, token, amount);\n        _accounts[trancheId].collateral += amount;\n        tokenMetadata[token].totalCollateralNow += amount;\n    }\n\n    function withdraw(\n        uint256 trancheId,\n        uint256 amount,\n        address recipient\n    ) external virtual override onlyActive {\n        require(\n            isFundTransferer(msg.sender) ||\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\n            \"Not authorized to withdraw\"\n        );\n        // todo: should we collect yield here?\n        _withdraw(trancheId, amount, recipient);\n    }\n\n    function _withdraw(\n        uint256 trancheId,\n        uint256 amount,\n        address recipient\n    ) internal virtual {\n        address token = trancheToken(trancheId);\n        _applyCompounding(trancheId);\n\n        amount = min(amount, viewTargetCollateralAmount(trancheId));\n        returnCollateral(recipient, token, amount);\n        _accounts[trancheId].collateral -= amount;\n        tokenMetadata[token].totalCollateralNow -= amount;\n    }\n\n    function burnTranche(\n        uint256 trancheId,\n        address yieldToken,\n        address recipient\n    ) external virtual override onlyActive {\n        require(\n            isFundTransferer(msg.sender) ||\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\n            \"Not authorized to burn tranche\"\n        );\n\n        _collectYield(trancheId, yieldToken, recipient);\n        _withdraw(trancheId, viewTargetCollateralAmount(trancheId), recipient);\n        delete _accounts[trancheId];\n    }\n\n    function migrateStrategy(\n        uint256 trancheId,\n        address targetStrategy,\n        address yieldToken,\n        address yieldRecipient\n    )\n        external\n        virtual\n        override\n        onlyActive\n        returns (\n            address,\n            uint256,\n            uint256\n        )\n    {\n        require(msg.sender == tranche(trancheId), \"Not authorized to migrate\");\n\n        address token = trancheToken(trancheId);\n        uint256 targetAmount = viewTargetCollateralAmount(trancheId);\n        IERC20(token).approve(targetStrategy, targetAmount);\n        _collectYield(trancheId, yieldToken, yieldRecipient);\n        uint256 subCollateral = returnCollateral(\n            address(this),\n            token,\n            targetAmount\n        );\n        tokenMetadata[token].totalCollateralNow -= subCollateral;\n\n        return (token, 0, targetAmount);\n    }\n\n    function acceptMigration(\n        uint256 trancheId,\n        address sourceStrategy,\n        address tokenContract,\n        uint256,\n        uint256 amount\n    ) external virtual override {\n        require(msg.sender == tranche(trancheId), \"Not authorized to migrate\");\n\n        _setAndCheckTrancheToken(trancheId, tokenContract);\n        _deposit(sourceStrategy, trancheId, amount);\n    }\n\n    function migrateAllTo(address destination)\n        external\n        override\n        onlyActive\n        onlyOwnerExecDisabler\n    {\n        tallyHarvestBalance();\n\n        for (uint256 i; _allTokensEver.length() > i; i++) {\n            address token = _allTokensEver.at(i);\n\n            uint256 totalAmount = _viewTVL(token);\n            StrategyRegistry registry = strategyRegistry();\n            returnCollateral(address(registry), token, totalAmount);\n            IERC20(token).approve(address(registry), type(uint256).max);\n\n            registry.migrateTokenTo(destination, token);\n        }\n        isActive = false;\n    }\n\n    function tallyHarvestBalance() internal virtual returns (uint256 balance) {}\n\n    function collectYield(\n        uint256 trancheId,\n        address currency,\n        address recipient\n    ) public virtual override returns (uint256) {\n        require(\n            isFundTransferer(msg.sender) ||\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\n            \"Not authorized to collect yield\"\n        );\n\n        return _collectYield(trancheId, currency, recipient);\n    }\n\n    function collectYieldValueBorrowable(\n        uint256 trancheId,\n        address _yieldCurrency,\n        address valueCurrency,\n        address recipient\n    )\n        external\n        override\n        returns (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k\n        )\n    {\n        require(\n            isFundTransferer(msg.sender) ||\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\n            \"Not authorized to collect yield\"\n        );\n\n        yield = _collectYield(trancheId, _yieldCurrency, recipient);\n        (value, borrowablePer10k) = _getValueBorrowable(\n            trancheToken(trancheId),\n            viewTargetCollateralAmount(trancheId),\n            valueCurrency\n        );\n    }\n\n    function viewYieldValueBorrowable(\n        uint256 trancheId,\n        address _yieldCurrency,\n        address valueCurrency\n    )\n        external\n        view\n        override\n        returns (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k\n        )\n    {\n        yield = viewYield(trancheId, _yieldCurrency);\n        (value, borrowablePer10k) = _viewValueBorrowable(\n            trancheToken(trancheId),\n            viewTargetCollateralAmount(trancheId),\n            valueCurrency\n        );\n    }\n\n    function viewValue(uint256 trancheId, address valueCurrency)\n        external\n        view\n        override\n        returns (uint256 value)\n    {\n        (value, ) = _viewValueBorrowable(\n            trancheToken(trancheId),\n            viewTargetCollateralAmount(trancheId),\n            valueCurrency\n        );\n    }\n\n    function viewValueBorrowable(uint256 trancheId, address valueCurrency)\n        external\n        view\n        override\n        returns (uint256 value, uint256 borrowable)\n    {\n        return\n            _viewValueBorrowable(\n                trancheToken(trancheId),\n                viewTargetCollateralAmount(trancheId),\n                valueCurrency\n            );\n    }\n\n    function viewBorrowable(uint256 trancheId)\n        external\n        view\n        override\n        returns (uint256 borrowablePer10k)\n    {\n        (, borrowablePer10k) = _viewValueBorrowable(\n            trancheToken(trancheId),\n            viewTargetCollateralAmount(trancheId),\n            yieldCurrency()\n        );\n    }\n\n    /// Withdraw collateral from source account\n    function collectCollateral(\n        address source,\n        address token,\n        uint256 collateralAmount\n    ) internal virtual returns (uint256 collateral2Add);\n\n    /// Return collateral to user\n    function returnCollateral(\n        address recipient,\n        address token,\n        uint256 collateralAmount\n    ) internal virtual returns (uint256 collteral2Subtract);\n\n    function trancheToken(uint256 trancheId)\n        public\n        view\n        virtual\n        override\n        returns (address token)\n    {\n        return _accounts[trancheId].trancheToken;\n    }\n\n    function _setAndCheckTrancheToken(uint256 trancheId, address token)\n        internal\n        virtual\n    {\n        require(_approvedTokens.contains(token), \"Not an approved token\");\n        _accounts[trancheId].trancheToken = token;\n    }\n\n    function approvedToken(address token) public view override returns (bool) {\n        return _approvedTokens.contains(token);\n    }\n\n    function _collectYield(\n        uint256 trancheId,\n        address currency,\n        address recipient\n    ) internal virtual returns (uint256 yieldEarned) {\n        CollateralAccount storage account = _accounts[trancheId];\n        TokenMetadata storage tokenMeta = tokenMetadata[\n            trancheToken(trancheId)\n        ];\n        if (account.collateral > 0) {\n            yieldEarned = _viewYield(account, tokenMeta, currency);\n            Stablecoin(yieldCurrency()).mint(recipient, yieldEarned);\n        }\n\n        account.yieldCheckptIdx = tokenMeta.yieldCheckpoints.length;\n    }\n\n    function _viewYield(\n        CollateralAccount storage account,\n        TokenMetadata storage tokenMeta,\n        address currency\n    ) internal view returns (uint256) {\n        require(currency == yieldCurrency(), \"Wrong yield currency\");\n        if (tokenMeta.yieldCheckpoints.length > account.yieldCheckptIdx) {\n            uint256 yieldDelta = tokenMeta.cumulYieldPerCollateralFP -\n                tokenMeta.yieldCheckpoints[account.yieldCheckptIdx];\n            return (account.collateral * yieldDelta) / FP64;\n        } else {\n            return 0;\n        }\n    }\n\n    function viewYield(uint256 trancheId, address currency)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        CollateralAccount storage account = _accounts[trancheId];\n        return\n            _viewYield(\n                account,\n                tokenMetadata[trancheToken(trancheId)],\n                currency\n            );\n    }\n\n    function yieldCurrency() public view virtual returns (address) {\n        return address(stableCoin());\n    }\n\n    function approveToken(address token, bytes calldata data)\n        external\n        virtual\n        onlyOwnerExecActivator\n    {\n        _approveToken(token, data);\n    }\n\n    function _approveToken(address token, bytes calldata) internal virtual {\n        _approvedTokens.add(token);\n        _allTokensEver.add(token);\n\n        strategyRegistry().updateTokenCount(address(this));\n    }\n\n    function disapproveToken(address token, bytes calldata)\n        external\n        virtual\n        onlyOwnerExec\n    {\n        _approvedTokens.remove(token);\n    }\n\n    function viewTargetCollateralAmount(uint256 trancheId)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        CollateralAccount storage account = _accounts[trancheId];\n        return account.collateral;\n    }\n\n    function trancheTokenID(uint256) external pure override returns (uint256) {\n        return 0;\n    }\n\n    function viewAllTokensEver() external view returns (address[] memory) {\n        return _allTokensEver.values();\n    }\n\n    function viewAllApprovedTokens()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return _approvedTokens.values();\n    }\n\n    function approvedTokensCount() external view override returns (uint256) {\n        return _approvedTokens.length();\n    }\n\n    function viewStrategyMetadata(address token)\n        public\n        view\n        override\n        returns (IStrategy.StrategyMetadata memory)\n    {\n        (uint256 value, uint256 borrowablePer10k) = _viewValueBorrowable(\n            token,\n            1 ether,\n            address(stableCoin())\n        );\n\n        return\n            IStrategy.StrategyMetadata({\n                strategy: address(this),\n                token: token,\n                APF: viewAPF(token),\n                totalCollateral: tokenMetadata[token].totalCollateralNow,\n                borrowablePer10k: borrowablePer10k,\n                valuePer1e18: value,\n                strategyName: strategyName,\n                tvl: _viewTVL(token),\n                harvestBalance2Tally: viewHarvestBalance2Tally(token),\n                yieldType: yieldType(),\n                stabilityFee: stabilityFeePer10k(token)\n            });\n    }\n\n    function viewAllStrategyMetadata()\n        external\n        view\n        override\n        returns (IStrategy.StrategyMetadata[] memory)\n    {\n        uint256 tokenCount = _approvedTokens.length();\n        IStrategy.StrategyMetadata[]\n            memory result = new IStrategy.StrategyMetadata[](tokenCount);\n        for (uint256 i; tokenCount > i; i++) {\n            result[i] = viewStrategyMetadata(_approvedTokens.at(i));\n        }\n        return result;\n    }\n\n    function viewAPF(address) public view virtual override returns (uint256) {\n        // TODO\n        return 10_000;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return b;\n        } else {\n            return a;\n        }\n    }\n\n    function _applyCompounding(uint256 trancheId) internal virtual {}\n\n    function _viewTVL(address token) public view virtual returns (uint256) {\n        return tokenMetadata[token].totalCollateralNow;\n    }\n\n    function stabilityFeePer10k(address) public view virtual returns (uint256) {\n        return 0;\n    }\n\n    function _updateAPF(\n        address token,\n        uint256 addedBalance,\n        uint256 basisValue\n    ) internal {\n        TokenMetadata storage tokenMeta = tokenMetadata[token];\n        require(addedBalance > 0, \"No balance to update APF\");\n        uint256 lastUpdated = tokenMeta.apfLastUpdated;\n        uint256 timeDelta = lastUpdated > 0\n            ? block.timestamp - lastUpdated\n            : 1 weeks;\n\n        uint256 newRate = ((addedBalance + basisValue) * 10_000 * (365 days)) /\n            basisValue /\n            timeDelta;\n\n        uint256 smoothing = lastUpdated > 0 ? apfSmoothingPer10k : 0;\n        tokenMeta.apf =\n            (tokenMeta.apf * smoothing) /\n            10_000 +\n            (newRate * (10_000 - smoothing)) /\n            10_000;\n        tokenMeta.apfLastUpdated = block.timestamp;\n    }\n\n    function setApfSmoothingPer10k(uint256 smoothing) external onlyOwnerExec {\n        apfSmoothingPer10k = smoothing;\n    }\n\n    function _updateAPF(\n        uint256 timeDelta,\n        address token,\n        uint256 addedBalance,\n        uint256 basisValue\n    ) internal {\n        TokenMetadata storage tokenMeta = tokenMetadata[token];\n        require(addedBalance > 0, \"No balance to update APF\");\n\n        uint256 lastUpdated = tokenMeta.apfLastUpdated;\n\n        uint256 newRate = ((addedBalance + basisValue) * 10_000 * (365 days)) /\n            basisValue /\n            timeDelta;\n\n        uint256 smoothing = lastUpdated > 0 ? apfSmoothingPer10k : 0;\n        tokenMeta.apf =\n            (tokenMeta.apf * smoothing) /\n            10_000 +\n            (newRate * (10_000 - smoothing)) /\n            10_000;\n        tokenMeta.apfLastUpdated = block.timestamp;\n    }\n\n    function viewHarvestBalance2Tally(address)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        return 0;\n    }\n\n    function yieldType() public view virtual override returns (YieldType);\n}\n"
    },
    "contracts/IsolatedLending.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./roles/RoleAware.sol\";\nimport \"./Tranche.sol\";\nimport \"./roles/CallsStableCoinMintBurn.sol\";\nimport \"./roles/DependsOnLiquidator.sol\";\nimport \"./roles/DependsOnFeeRecipient.sol\";\nimport \"./oracles/OracleAware.sol\";\n\ncontract IsolatedLending is\n    OracleAware,\n    Tranche,\n    CallsStableCoinMintBurn,\n    DependsOnLiquidator,\n    DependsOnFeeRecipient\n{\n    struct AssetConfig {\n        uint256 debtCeiling;\n        uint256 feePer10k;\n        uint256 totalDebt;\n    }\n    mapping(address => AssetConfig) public assetConfigs;\n\n    uint256 public liqThreshConversionFactorPer10k = 5_000;\n\n    mapping(uint256 => uint256) public trancheDebt;\n    uint256 public pendingFees;\n\n    constructor(address _roles)\n        Tranche(\"MoreMoney Isolated Lending\", \"MMIL\", _roles)\n    {\n        _charactersPlayed.push(ISOLATED_LENDING);\n        _rolesPlayed.push(FUND_TRANSFERER);\n    }\n\n    function setAssetDebtCeiling(address token, uint256 ceiling)\n        external\n        onlyOwnerExecDisabler\n    {\n        assetConfigs[token].debtCeiling = ceiling;\n    }\n\n    function setFeesPer10k(address token, uint256 fee) external onlyOwnerExec {\n        assetConfigs[token].feePer10k = fee;\n    }\n\n    function configureAsset(\n        address token,\n        uint256 ceiling,\n        uint256 fee\n    ) external onlyOwnerExecActivator {\n        AssetConfig storage config = assetConfigs[token];\n        config.debtCeiling = ceiling;\n        config.feePer10k = fee;\n    }\n\n    function mintDepositAndBorrow(\n        address collateralToken,\n        address strategy,\n        uint256 collateralAmount,\n        uint256 borrowAmount,\n        address recipient\n    ) external virtual returns (uint256) {\n        uint256 trancheId = _mintTranche(\n            msg.sender,\n            0,\n            strategy,\n            collateralToken,\n            0,\n            collateralAmount\n        );\n        _borrow(trancheId, borrowAmount, recipient);\n        return trancheId;\n    }\n\n    function depositAndBorrow(\n        uint256 trancheId,\n        uint256 collateralAmount,\n        uint256 borrowAmount,\n        address recipient\n    ) external virtual {\n        require(\n            isAuthorized(msg.sender, trancheId),\n            \"not authorized to withdraw yield\"\n        );\n\n        _deposit(msg.sender, trancheId, collateralAmount);\n        _borrow(trancheId, borrowAmount, recipient);\n    }\n\n    function _borrow(\n        uint256 trancheId,\n        uint256 borrowAmount,\n        address recipient\n    ) internal {\n        if (borrowAmount > 0) {\n            address holdingStrategy = getCurrentHoldingStrategy(trancheId);\n            address token = IStrategy(holdingStrategy).trancheToken(trancheId);\n            uint256 fee = mintingFee(borrowAmount, token);\n\n            trancheDebt[trancheId] += borrowAmount + fee;\n\n            AssetConfig storage assetConfig = assetConfigs[token];\n            assetConfig.totalDebt += borrowAmount + fee;\n            require(\n                assetConfig.debtCeiling >= assetConfig.totalDebt,\n                \"Exceeded debt ceiling\"\n            );\n            pendingFees += fee;\n\n            uint256 excessYield = _yieldAndViability(trancheId);\n            _mintStable(recipient, borrowAmount + excessYield);\n        }\n    }\n\n    function _yieldAndViability(uint256 trancheId)\n        internal\n        returns (uint256 excessYield)\n    {\n        uint256 debt = trancheDebt[trancheId];\n        address stable = address(stableCoin());\n        (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k\n        ) = _collectYieldValueBorrowable(\n                trancheId,\n                stable,\n                stable,\n                address(this)\n            );\n        require(\n            _isViable(debt, yield, value, borrowablePer10k),\n            \"Borow breaks min collateralization threshold\"\n        );\n\n        if (yield > debt) {\n            trancheDebt[trancheId] = 0;\n            excessYield = yield - debt;\n        } else {\n            trancheDebt[trancheId] = debt - yield;\n            excessYield = 0;\n        }\n        _burnStable(address(this), yield);\n    }\n\n    function repayAndWithdraw(\n        uint256 trancheId,\n        uint256 collateralAmount,\n        uint256 repayAmount,\n        address recipient\n    ) external virtual {\n        require(\n            isAuthorized(msg.sender, trancheId),\n            \"not authorized to withdraw yield\"\n        );\n\n        repayAmount = min(repayAmount, trancheDebt[trancheId]);\n        _repay(msg.sender, trancheId, repayAmount);\n        _withdraw(trancheId, collateralAmount, recipient);\n    }\n\n    function _withdraw(\n        uint256 trancheId,\n        uint256 tokenAmount,\n        address recipient\n    ) internal virtual override {\n        if (tokenAmount > 0) {\n            uint256 excessYield = _yieldAndViability(trancheId);\n            if (excessYield > 0) {\n                _mintStable(recipient, excessYield);\n            }\n            super._withdraw(trancheId, tokenAmount, recipient);\n        }\n    }\n\n    function _repay(\n        address payer,\n        uint256 trancheId,\n        uint256 repayAmount\n    ) internal virtual {\n        if (repayAmount > 0) {\n            _burnStable(payer, repayAmount);\n            trancheDebt[trancheId] -= repayAmount;\n        }\n    }\n\n    function _checkAssetToken(address token) internal view virtual override {\n        require(\n            assetConfigs[token].debtCeiling > 0,\n            \"Token is not whitelisted\"\n        );\n    }\n\n    function _isViable(\n        uint256 debt,\n        uint256 yield,\n        uint256 value,\n        uint256 borrowablePer10k\n    ) internal pure returns (bool) {\n        // value / debt > 10k / borrowable\n        return (value + yield) * borrowablePer10k >= debt * 10_000;\n    }\n\n    function isViable(uint256 trancheId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        uint256 debt = trancheDebt[trancheId];\n        // allow for tiny amounts of dust\n        if (debt < 10_000) {\n            return super.isViable(trancheId);\n        } else {\n            address stable = address(stableCoin());\n            (\n                uint256 yield,\n                uint256 value,\n                uint256 borrowablePer10k\n            ) = viewYieldValueBorrowable(trancheId, stable, stable);\n            bool collateralized = _isViable(\n                trancheDebt[trancheId],\n                yield,\n                value,\n                borrowablePer10k\n            );\n            return collateralized && super.isViable(trancheId);\n        }\n    }\n\n    /// Minting fee per stable amount\n    function mintingFee(uint256 stableAmount, address collateral)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        uint256 feePer10k = assetConfigs[collateral].feePer10k;\n        if (feePer10k > 0) {\n            return (feePer10k * stableAmount) / 10_000;\n        } else {\n            return (assetConfigs[address(0)].feePer10k * stableAmount) / 10_000;\n        }\n    }\n\n    function withdrawFees() external {\n        _mintStable(feeRecipient(), pendingFees);\n        pendingFees = 0;\n    }\n\n    function liquidateTo(\n        uint256 trancheId,\n        address recipient,\n        bytes calldata _data\n    ) external {\n        require(isLiquidator(msg.sender), \"Not authorized to liquidate\");\n        _safeTransfer(ownerOf(trancheId), recipient, trancheId, _data);\n    }\n\n    function viewYieldValueBorrowableDebt(\n        uint256 trancheId,\n        address yieldCurrency,\n        address valueCurrency\n    )\n        external\n        view\n        returns (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k,\n            uint256 debt\n        )\n    {\n        (yield, value, borrowablePer10k) = viewYieldValueBorrowable(\n            trancheId,\n            yieldCurrency,\n            valueCurrency\n        );\n        debt = trancheDebt[trancheId];\n    }\n\n    struct ILMetadata {\n        uint256 debtCeiling;\n        uint256 totalDebt;\n        uint256 mintingFee;\n        uint256 borrowablePer10k;\n    }\n\n    function viewILMetadata(address token)\n        public\n        view\n        returns (ILMetadata memory)\n    {\n        AssetConfig storage assetConfig = assetConfigs[token];\n        (, uint256 borrowablePer10k) = _viewValueBorrowable(\n            token,\n            0,\n            address(stableCoin())\n        );\n        return\n            ILMetadata({\n                debtCeiling: assetConfig.debtCeiling,\n                totalDebt: assetConfig.totalDebt,\n                mintingFee: assetConfig.feePer10k,\n                borrowablePer10k: borrowablePer10k\n            });\n    }\n\n    function viewAllILMetadata(address[] calldata tokens)\n        public\n        view\n        returns (ILMetadata[] memory)\n    {\n        ILMetadata[] memory result = new ILMetadata[](tokens.length);\n        for (uint256 i; tokens.length > i; i++) {\n            result[i] = viewILMetadata(tokens[i]);\n        }\n\n        return result;\n    }\n\n    struct ILStrategyMetadata {\n        uint256 debtCeiling;\n        uint256 totalDebt;\n        uint256 stabilityFee;\n        uint256 mintingFee;\n        address strategy;\n        address token;\n        uint256 APF;\n        uint256 totalCollateral;\n        uint256 borrowablePer10k;\n        uint256 valuePer1e18;\n        bytes32 strategyName;\n        uint256 liqThresh;\n        uint256 tvl;\n        uint256 harvestBalance2Tally;\n        IStrategy.YieldType yieldType;\n    }\n\n    function viewAllStrategyMetadata()\n        public\n        view\n        returns (ILStrategyMetadata[] memory)\n    {\n        IStrategy.StrategyMetadata[] memory stratMeta = strategyRegistry()\n            .viewAllEnabledStrategyMetadata();\n\n        ILStrategyMetadata[] memory result = new ILStrategyMetadata[](\n            stratMeta.length\n        );\n\n        for (uint256 i; result.length > i; i++) {\n            ILStrategyMetadata memory meta = result[i];\n            IStrategy.StrategyMetadata memory sMeta = stratMeta[i];\n            ILMetadata memory ilMeta = viewILMetadata(sMeta.token);\n\n            meta.debtCeiling = ilMeta.debtCeiling;\n            meta.totalDebt = ilMeta.totalDebt;\n            meta.mintingFee = ilMeta.mintingFee;\n\n            meta.strategy = sMeta.strategy;\n            meta.token = sMeta.token;\n            meta.APF = sMeta.APF;\n            meta.totalCollateral = sMeta.totalCollateral;\n            meta.borrowablePer10k = sMeta.borrowablePer10k;\n            meta.valuePer1e18 = sMeta.valuePer1e18;\n            meta.strategyName = sMeta.strategyName;\n\n            meta.liqThresh = borrowable2LiqThresh(sMeta.borrowablePer10k);\n\n            meta.tvl = sMeta.tvl;\n            meta.harvestBalance2Tally = sMeta.harvestBalance2Tally;\n            meta.yieldType = sMeta.yieldType;\n            meta.stabilityFee = sMeta.stabilityFee;\n        }\n\n        return result;\n    }\n\n    function borrowable2LiqThresh(uint256 borrowablePer10k)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        return\n            min(\n                10_000,\n                borrowablePer10k +\n                    (10_000 * (10_000 - borrowablePer10k)) /\n                    liqThreshConversionFactorPer10k\n            );\n    }\n\n    function setLiqThreshConversionFactor(uint256 convFactor)\n        external\n        onlyOwnerExec\n    {\n        liqThreshConversionFactorPer10k = convFactor;\n    }\n\n    struct PositionMetadata {\n        uint256 trancheId;\n        address strategy;\n        uint256 collateral;\n        uint256 debt;\n        address token;\n    }\n\n    function viewPositionsByOwner(address owner)\n        external\n        view\n        returns (PositionMetadata[] memory)\n    {\n        uint256[] memory trancheIds = viewTranchesByOwner(owner);\n        PositionMetadata[] memory result = new PositionMetadata[](\n            trancheIds.length\n        );\n        for (uint256 i; trancheIds.length > i; i++) {\n            uint256 _trancheId = trancheIds[i];\n            address holdingStrategy = _holdingStrategies[_trancheId];\n            result[i] = PositionMetadata({\n                trancheId: _trancheId,\n                strategy: holdingStrategy,\n                token: IStrategy(holdingStrategy).trancheToken(_trancheId),\n                collateral: IStrategy(holdingStrategy)\n                    .viewTargetCollateralAmount(_trancheId),\n                debt: trancheDebt[_trancheId]\n            });\n        }\n\n        return result;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return b;\n        } else {\n            return a;\n        }\n    }\n}\n"
    },
    "contracts/Tranche.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./ProxyOwnershipERC721.sol\";\nimport \"./roles/RoleAware.sol\";\nimport \"./StrategyRegistry.sol\";\nimport \"./TrancheIDService.sol\";\nimport \"./roles/DependsOnTrancheIDService.sol\";\nimport \"./roles/DependsOnStrategyRegistry.sol\";\nimport \"./roles/DependsOnFundTransferer.sol\";\n\ncontract Tranche is\n    ProxyOwnershipERC721,\n    DependsOnTrancheIDService,\n    DependsOnStrategyRegistry,\n    DependsOnFundTransferer,\n    RoleAware,\n    IAsset\n{\n    using Address for address;\n\n    mapping(uint256 => address) public _holdingStrategies;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _roles\n    ) ERC721(_name, _symbol) RoleAware(_roles) {\n        _rolesPlayed.push(TRANCHE);\n    }\n\n    function _mintTranche(\n        address minter,\n        uint256 vaultId,\n        address strategy,\n        address assetToken,\n        uint256 assetTokenId,\n        uint256 assetAmount\n    ) internal returns (uint256 trancheId) {\n        require(\n            strategyRegistry().enabledStrategy(strategy),\n            \"Strategy not approved\"\n        );\n\n        trancheId = trancheIdService().getNextTrancheId();\n\n        _holdingStrategies[trancheId] = strategy;\n        _containedIn[trancheId] = vaultId;\n        _checkAssetToken(assetToken);\n        _safeMint(minter, trancheId, abi.encode(vaultId));\n\n        IStrategy(strategy).registerMintTranche(\n            minter,\n            trancheId,\n            assetToken,\n            assetTokenId,\n            assetAmount\n        );\n    }\n\n    function mintTranche(\n        uint256 vaultId,\n        address strategy,\n        address assetToken,\n        uint256 assetTokenId,\n        uint256 assetAmount\n    ) external returns (uint256 trancheId) {\n        return\n            _mintTranche(\n                msg.sender,\n                vaultId,\n                strategy,\n                assetToken,\n                assetTokenId,\n                assetAmount\n            );\n    }\n\n    function deposit(uint256 trancheId, uint256 tokenAmount) external override {\n        _deposit(msg.sender, trancheId, tokenAmount);\n    }\n\n    function registerDepositFor(\n        address depositor,\n        uint256 trancheId,\n        uint256 tokenAmount\n    ) external override {\n        require(\n            isFundTransferer(msg.sender),\n            \"Not authorized to transfer user funds\"\n        );\n        _deposit(depositor, trancheId, tokenAmount);\n    }\n\n    function _deposit(\n        address depositor,\n        uint256 trancheId,\n        uint256 tokenAmount\n    ) internal virtual {\n        IStrategy(getCurrentHoldingStrategy(trancheId)).registerDepositFor(\n            depositor,\n            trancheId,\n            tokenAmount\n        );\n    }\n\n    function withdraw(\n        uint256 trancheId,\n        uint256 tokenAmount,\n        address recipient\n    ) external override {\n        require(\n            isAuthorized(msg.sender, trancheId),\n            \"not authorized to withdraw\"\n        );\n        _withdraw(trancheId, tokenAmount, recipient);\n    }\n\n    function _withdraw(\n        uint256 trancheId,\n        uint256 tokenAmount,\n        address recipient\n    ) internal virtual {\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\n        IStrategy(holdingStrategy).withdraw(trancheId, tokenAmount, recipient);\n\n        require(isViable(trancheId), \"Tranche not viable after withdraw\");\n    }\n\n    function burnTranche(\n        uint256 trancheId,\n        address yieldToken,\n        address recipient\n    ) external override {\n        require(\n            isAuthorized(msg.sender, trancheId),\n            \"not authorized to withdraw\"\n        );\n\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\n        IStrategy(holdingStrategy).burnTranche(\n            trancheId,\n            yieldToken,\n            recipient\n        );\n\n        require(isViable(trancheId), \"Tranche not viable after withdraw\");\n    }\n\n    function _collectYield(\n        uint256 trancheId,\n        address currency,\n        address recipient\n    ) internal returns (uint256) {\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\n        return\n            IStrategy(holdingStrategy).collectYield(\n                trancheId,\n                currency,\n                recipient\n            );\n    }\n\n    function collectYield(\n        uint256 trancheId,\n        address currency,\n        address recipient\n    ) public virtual override returns (uint256) {\n        require(\n            isAuthorized(msg.sender, trancheId),\n            \"not authorized to withdraw yield\"\n        );\n        return _collectYield(trancheId, currency, recipient);\n    }\n\n    function batchCollectYield(\n        uint256[] calldata trancheIds,\n        address currency,\n        address recipient\n    ) public returns (uint256) {\n        uint256 yield;\n\n        for (uint256 i; trancheIds.length > i; i++) {\n            uint256 trancheId = trancheIds[i];\n            require(\n                isAuthorized(msg.sender, trancheId),\n                \"not authorized to withdraw yield\"\n            );\n\n            yield += _collectYield(trancheId, currency, recipient);\n        }\n        return yield;\n    }\n\n    function viewYield(uint256 trancheId, address currency)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        address holdingStrategy = _holdingStrategies[trancheId];\n        return IStrategy(holdingStrategy).viewYield(trancheId, currency);\n    }\n\n    function batchViewYield(uint256[] calldata trancheIds, address currency)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 yield;\n\n        for (uint256 i; trancheIds.length > i; i++) {\n            uint256 trancheId = trancheIds[i];\n\n            yield += viewYield(trancheId, currency);\n        }\n        return yield;\n    }\n\n    function viewValue(uint256 trancheId, address currency)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        address holdingStrategy = _holdingStrategies[trancheId];\n        return IStrategy(holdingStrategy).viewValue(trancheId, currency);\n    }\n\n    function batchViewValue(uint256[] calldata trancheIds, address currency)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 value;\n\n        for (uint256 i; trancheIds.length > i; i++) {\n            uint256 trancheId = trancheIds[i];\n\n            value += viewValue(trancheId, currency);\n        }\n\n        return value;\n    }\n\n    function viewBorrowable(uint256 trancheId)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        address holdingStrategy = _holdingStrategies[trancheId];\n        return IStrategy(holdingStrategy).viewBorrowable(trancheId);\n    }\n\n    function batchViewValueBorrowable(\n        uint256[] calldata trancheIds,\n        address currency\n    ) public view returns (uint256, uint256) {\n        uint256 totalValue;\n        uint256 totalBorrowablePer10k;\n        for (uint256 i; trancheIds.length > i; i++) {\n            uint256 trancheId = trancheIds[i];\n\n            (uint256 value, uint256 borrowablePer10k) = IStrategy(\n                _holdingStrategies[trancheId]\n            ).viewValueBorrowable(trancheId, currency);\n            totalBorrowablePer10k += value * borrowablePer10k;\n        }\n\n        return (totalValue, totalBorrowablePer10k / totalValue);\n    }\n\n    function collectYieldValueBorrowable(\n        uint256 trancheId,\n        address yieldCurrency,\n        address valueCurrency,\n        address recipient\n    )\n        public\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(\n            isAuthorized(msg.sender, trancheId) || isFundTransferer(msg.sender),\n            \"not authorized to withdraw yield\"\n        );\n        return\n            _collectYieldValueBorrowable(\n                trancheId,\n                yieldCurrency,\n                valueCurrency,\n                recipient\n            );\n    }\n\n    function _collectYieldValueBorrowable(\n        uint256 trancheId,\n        address yieldCurrency,\n        address valueCurrency,\n        address recipient\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\n        return\n            IStrategy(holdingStrategy).collectYieldValueBorrowable(\n                trancheId,\n                yieldCurrency,\n                valueCurrency,\n                recipient\n            );\n    }\n\n    function batchCollectYieldValueBorrowable(\n        uint256[] calldata trancheIds,\n        address yieldCurrency,\n        address valueCurrency,\n        address recipient\n    )\n        public\n        returns (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k\n        )\n    {\n        for (uint256 i; trancheIds.length > i; i++) {\n            uint256 trancheId = trancheIds[i];\n            (\n                uint256 _yield,\n                uint256 _value,\n                uint256 _borrowablePer10k\n            ) = collectYieldValueBorrowable(\n                    trancheId,\n                    yieldCurrency,\n                    valueCurrency,\n                    recipient\n                );\n            yield += _yield;\n            value += _value;\n            borrowablePer10k += _borrowablePer10k * _value;\n        }\n        borrowablePer10k = borrowablePer10k / value;\n    }\n\n    function viewYieldValueBorrowable(\n        uint256 trancheId,\n        address yieldCurrency,\n        address valueCurrency\n    )\n        public\n        view\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        address holdingStrategy = _holdingStrategies[trancheId];\n        return\n            IStrategy(holdingStrategy).viewYieldValueBorrowable(\n                trancheId,\n                yieldCurrency,\n                valueCurrency\n            );\n    }\n\n    function isViable(uint256 trancheId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        address tokenOwner = ownerOf(trancheId);\n        if (tokenOwner.isContract()) {\n            IProxyOwnership bearer = IProxyOwnership(tokenOwner);\n            return bearer.isViable(_containedIn[trancheId]);\n        } else {\n            return true;\n        }\n    }\n\n    function migrateStrategy(\n        uint256 trancheId,\n        address destination,\n        address yieldToken,\n        address yieldRecipient\n    )\n        external\n        override\n        returns (\n            address token,\n            uint256 tokenId,\n            uint256 targetAmount\n        )\n    {\n        require(\n            isAuthorized(msg.sender, trancheId),\n            \"not authorized to migrate tranche\"\n        );\n\n        require(\n            strategyRegistry().enabledStrategy(destination),\n            \"Strategy not approved\"\n        );\n\n        address sourceStrategy = getCurrentHoldingStrategy(trancheId);\n        (token, tokenId, targetAmount) = IStrategy(sourceStrategy)\n            .migrateStrategy(\n                trancheId,\n                destination,\n                yieldToken,\n                yieldRecipient\n            );\n\n        _acceptStrategyMigration(\n            trancheId,\n            sourceStrategy,\n            destination,\n            token,\n            tokenId,\n            targetAmount\n        );\n    }\n\n    function _acceptStrategyMigration(\n        uint256 trancheId,\n        address tokenSource,\n        address destination,\n        address token,\n        uint256 tokenId,\n        uint256 targetAmount\n    ) internal {\n        IStrategy(destination).acceptMigration(\n            trancheId,\n            tokenSource,\n            token,\n            tokenId,\n            targetAmount\n        );\n\n        _holdingStrategies[trancheId] = destination;\n    }\n\n    function getCurrentHoldingStrategy(uint256 trancheId)\n        public\n        returns (address)\n    {\n        address oldStrat = _holdingStrategies[trancheId];\n        StrategyRegistry registry = strategyRegistry();\n        address newStrat = registry.getCurrentStrategy(oldStrat);\n\n        if (oldStrat != newStrat) {\n            _acceptStrategyMigration(\n                trancheId,\n                address(registry),\n                newStrat,\n                IStrategy(oldStrat).trancheToken(trancheId),\n                IStrategy(oldStrat).trancheTokenID(trancheId),\n                IStrategy(oldStrat).viewTargetCollateralAmount(trancheId)\n            );\n        }\n\n        return newStrat;\n    }\n\n    function viewCurrentHoldingStrategy(uint256 trancheId)\n        public\n        view\n        returns (address)\n    {\n        return\n            StrategyRegistry(strategyRegistry()).getCurrentStrategy(\n                _holdingStrategies[trancheId]\n            );\n    }\n\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal override {\n        super._safeTransfer(from, to, tokenId, _data);\n        _containedIn[tokenId] = abi.decode(_data, (uint256));\n    }\n\n    function setupTrancheSlot() external {\n        trancheIdService().setupTrancheSlot();\n    }\n\n    function _checkAssetToken(address token) internal view virtual {}\n\n    function viewTranchesByOwner(address owner)\n        public\n        view\n        virtual\n        returns (uint256[] memory)\n    {\n        uint256 num = balanceOf(owner);\n        uint256[] memory result = new uint256[](num);\n        for (uint256 i; num > i; i++) {\n            result[i] = tokenOfOwnerByIndex(owner, i);\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/roles/CallsStableCoinMintBurn.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependsOnStableCoin.sol\";\n\nabstract contract CallsStableCoinMintBurn is DependsOnStableCoin {\n    constructor() {\n        _rolesPlayed.push(MINTER_BURNER);\n    }\n\n    function _mintStable(address account, uint256 amount) internal {\n        stableCoin().mint(account, amount);\n    }\n\n    function _burnStable(address account, uint256 amount) internal {\n        stableCoin().burn(account, amount);\n    }\n}\n"
    },
    "contracts/roles/DependsOnLiquidator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\n\nabstract contract DependsOnLiquidator is DependentContract {\n    constructor() {\n        _dependsOnRoles.push(LIQUIDATOR);\n    }\n\n    function isLiquidator(address contr) internal view returns (bool) {\n        return roleCache[contr][LIQUIDATOR];\n    }\n}\n"
    },
    "contracts/roles/DependsOnFeeRecipient.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\n\nabstract contract DependsOnFeeRecipient is DependentContract {\n    constructor() {\n        _dependsOnCharacters.push(FEE_RECIPIENT);\n    }\n\n    function feeRecipient() internal view returns (address) {\n        return mainCharacterCache[FEE_RECIPIENT];\n    }\n}\n"
    },
    "contracts/ProxyOwnershipERC721.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IProxyOwnership.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\nabstract contract ProxyOwnershipERC721 is ERC721Enumerable, IProxyOwnership {\n    using Address for address;\n\n    mapping(uint256 => uint256) public _containedIn;\n\n    function containedIn(uint256 tokenId)\n        public\n        view\n        override\n        returns (address owner, uint256 containerId)\n    {\n        return (ownerOf(tokenId), _containedIn[tokenId]);\n    }\n\n    function isAuthorized(address spender, uint256 tokenId)\n        public\n        view\n        override\n        returns (bool)\n    {\n        address tokenOwner = ownerOf(tokenId);\n        return\n            _isApprovedOrOwner(spender, tokenId) ||\n            (tokenOwner.isContract() &&\n                IProxyOwnership(tokenOwner).isAuthorized(\n                    spender,\n                    _containedIn[tokenId]\n                ));\n    }\n}\n"
    },
    "contracts/StrategyRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./roles/RoleAware.sol\";\nimport \"../interfaces/IStrategy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n// TODO: handle non-ERC20 migrations\n\ncontract StrategyRegistry is RoleAware {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using SafeERC20 for IERC20;\n    mapping(address => address) public replacementStrategy;\n\n    EnumerableSet.AddressSet enabledStrategies;\n    EnumerableSet.AddressSet allStrategiesEver;\n\n    mapping(address => uint256) public _tokenCount;\n    uint256 public totalTokenStratRows;\n    uint256 public enabledTokenStratRows;\n\n    constructor(address _roles) RoleAware(_roles) {\n        _charactersPlayed.push(STRATEGY_REGISTRY);\n    }\n\n    function allEnabledStrategies() external view returns (address[] memory) {\n        return enabledStrategies.values();\n    }\n\n    function enableStrategy(address strat) external onlyOwnerExec {\n        enabledStrategies.add(strat);\n        allStrategiesEver.add(strat);\n        updateTokenCount(strat);\n    }\n\n    function disableStrategy(address strat) external onlyOwnerExec {\n        totalTokenStratRows -= _tokenCount[strat];\n        enabledStrategies.remove(strat);\n    }\n\n    function enabledStrategy(address strat) external view returns (bool) {\n        return enabledStrategies.contains(strat);\n    }\n\n    function replaceStrategy(address legacyStrat, address replacementStrat)\n        external\n        onlyOwnerExec\n    {\n        require(\n            enabledStrategies.contains(replacementStrat),\n            \"Replacement strategy is not enabled\"\n        );\n        IStrategy(legacyStrat).migrateAllTo(replacementStrat);\n        enabledStrategies.remove(legacyStrat);\n        replacementStrategy[legacyStrat] = replacementStrat;\n    }\n\n    function getCurrentStrategy(address strat) external view returns (address) {\n        address result = strat;\n        while (replacementStrategy[result] != address(0)) {\n            result = replacementStrategy[result];\n        }\n        return result;\n    }\n\n    function migrateTokenTo(address destination, address token) external {\n        uint256 amount = IERC20(token).balanceOf(msg.sender);\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        IERC20(token).approve(destination, amount);\n    }\n\n    function updateTokenCount(address strat) public {\n        require(enabledStrategies.contains(strat), \"Not an enabled strategy!\");\n        uint256 oldCount = _tokenCount[strat];\n        uint256 newCount = IStrategy(strat).approvedTokensCount();\n        totalTokenStratRows = totalTokenStratRows + newCount - oldCount;\n        _tokenCount[strat] = newCount;\n    }\n\n    function viewAllEnabledStrategyMetadata()\n        external\n        view\n        returns (IStrategy.StrategyMetadata[] memory)\n    {\n        IStrategy.StrategyMetadata[]\n            memory result = new IStrategy.StrategyMetadata[](\n                totalTokenStratRows\n            );\n        uint256 enabledTotal = enabledStrategies.length();\n        uint256 resultI;\n        for (uint256 stratI; enabledTotal > stratI; stratI++) {\n            IStrategy strat = IStrategy(enabledStrategies.at(stratI));\n            IStrategy.StrategyMetadata[] memory meta = strat\n                .viewAllStrategyMetadata();\n            for (uint256 i; meta.length > i; i++) {\n                result[resultI + i] = meta[i];\n            }\n            resultI += meta.length;\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/roles/DependsOnStrategyRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\nimport \"../StrategyRegistry.sol\";\n\nabstract contract DependsOnStrategyRegistry is DependentContract {\n    constructor() {\n        _dependsOnCharacters.push(STRATEGY_REGISTRY);\n    }\n\n    function strategyRegistry() internal view returns (StrategyRegistry) {\n        return StrategyRegistry(mainCharacterCache[STRATEGY_REGISTRY]);\n    }\n}\n"
    },
    "contracts/roles/DependsOnFundTransferer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\n\nabstract contract DependsOnFundTransferer is DependentContract {\n    constructor() {\n        _dependsOnRoles.push(FUND_TRANSFERER);\n    }\n\n    function isFundTransferer(address contr) internal view returns (bool) {\n        return roleCache[contr][FUND_TRANSFERER];\n    }\n}\n"
    },
    "interfaces/IProxyOwnership.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n// TODO naming of these different proxy functions\n\ninterface IProxyOwnership {\n    function containedIn(uint256 tokenId)\n        external\n        view\n        returns (address containerAddress, uint256 containerId);\n\n    function isAuthorized(address spender, uint256 tokenId)\n        external\n        view\n        returns (bool);\n\n    function isViable(uint256 tokenId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./IAsset.sol\";\n\ninterface IStrategy is IAsset {\n    enum YieldType {\n        REPAYING,\n        COMPOUNDING,\n        NOYIELD\n    }\n\n    struct StrategyMetadata {\n        address strategy;\n        address token;\n        uint256 APF;\n        uint256 totalCollateral;\n        uint256 borrowablePer10k;\n        uint256 valuePer1e18;\n        bytes32 strategyName;\n        uint256 tvl;\n        uint256 harvestBalance2Tally;\n        YieldType yieldType;\n        uint256 stabilityFee;\n    }\n\n    function acceptMigration(\n        uint256 trancheId,\n        address sourceStrategy,\n        address tokenContract,\n        uint256 tokenId,\n        uint256 amount\n    ) external;\n\n    function registerMintTranche(\n        address minter,\n        uint256 trancheId,\n        address assetToken,\n        uint256 assetTokenId,\n        uint256 assetAmount\n    ) external;\n\n    function strategyName() external view returns (bytes32);\n\n    function isActive() external returns (bool);\n\n    function migrateAllTo(address destination) external;\n\n    function trancheToken(uint256 trancheId)\n        external\n        view\n        returns (address token);\n\n    function trancheTokenID(uint256 trancheId)\n        external\n        view\n        returns (uint256 tokenId);\n\n    function viewTargetCollateralAmount(uint256 trancheId)\n        external\n        view\n        returns (uint256);\n\n    function approvedToken(address token) external view returns (bool);\n\n    function viewAllApprovedTokens() external view returns (address[] memory);\n\n    function approvedTokensCount() external view returns (uint256);\n\n    function viewStrategyMetadata(address token)\n        external\n        view\n        returns (StrategyMetadata memory);\n\n    function viewAllStrategyMetadata()\n        external\n        view\n        returns (StrategyMetadata[] memory);\n\n    function viewAPF(address token) external view returns (uint256);\n\n    function viewValueBorrowable(uint256 trancheId, address valueCurrency)\n        external\n        view\n        returns (uint256, uint256);\n\n    function yieldType() external view returns (YieldType);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "interfaces/IAsset.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\ninterface IAsset {\n    function deposit(uint256 trancheId, uint256 tokenAmount) external;\n\n    function registerDepositFor(\n        address depositor,\n        uint256 trancheId,\n        uint256 amount\n    ) external;\n\n    function withdraw(\n        uint256 trancheId,\n        uint256 tokenAmount,\n        address recipient\n    ) external;\n\n    function burnTranche(\n        uint256 trancheId,\n        address yieldToken,\n        address recipient\n    ) external;\n\n    function migrateStrategy(\n        uint256 trancheId,\n        address targetStrategy,\n        address yieldToken,\n        address yieldRecipient\n    )\n        external\n        returns (\n            address token,\n            uint256 tokenId,\n            uint256 targetAmount\n        );\n\n    function collectYield(\n        uint256 tokenId,\n        address currency,\n        address recipient\n    ) external returns (uint256);\n\n    function viewYield(uint256 tokenId, address currency)\n        external\n        view\n        returns (uint256);\n\n    function viewValue(uint256 tokenId, address currency)\n        external\n        view\n        returns (uint256);\n\n    function viewBorrowable(uint256 tokenId) external view returns (uint256);\n\n    function collectYieldValueBorrowable(\n        uint256 tokenId,\n        address yieldCurrency,\n        address valueCurrency,\n        address recipient\n    )\n        external\n        returns (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k\n        );\n\n    function viewYieldValueBorrowable(\n        uint256 tokenId,\n        address yieldCurrency,\n        address valueCurrency\n    )\n        external\n        view\n        returns (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k\n        );\n}\n"
    },
    "contracts/roles/DependsOnStableCoin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\nimport \"../Stablecoin.sol\";\n\nabstract contract DependsOnStableCoin is DependentContract {\n    constructor() {\n        _dependsOnCharacters.push(STABLECOIN);\n    }\n\n    function stableCoin() internal view returns (Stablecoin) {\n        return Stablecoin(mainCharacterCache[STABLECOIN]);\n    }\n}\n"
    },
    "contracts/Stablecoin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./roles/RoleAware.sol\";\nimport \"./roles/DependsOnMinterBurner.sol\";\n\ncontract Stablecoin is\n    RoleAware,\n    ERC20,\n    ReentrancyGuard,\n    DependsOnMinterBurner\n{\n    uint256 public globalDebtCeiling = 100_000 ether;\n\n    constructor(address _roles) RoleAware(_roles) ERC20(\"USD Money\", \"USDM\") {\n        _charactersPlayed.push(STABLECOIN);\n    }\n\n    function mint(address account, uint256 amount) external nonReentrant {\n        require(isMinterBurner(msg.sender), \"Not an autorized minter/burner\");\n        _mint(account, amount);\n\n        require(\n            globalDebtCeiling > totalSupply(),\n            \"Total supply exceeds global debt ceiling\"\n        );\n    }\n\n    function burn(address account, uint256 amount) external nonReentrant {\n        require(isMinterBurner(msg.sender), \"Not an authorized minter/burner\");\n        _burn(account, amount);\n    }\n\n    function setGlobalDebtCeiling(uint256 debtCeiling) external onlyOwnerExec {\n        globalDebtCeiling = debtCeiling;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/roles/DependsOnMinterBurner.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./DependentContract.sol\";\n\nabstract contract DependsOnMinterBurner is DependentContract {\n    constructor() {\n        _dependsOnRoles.push(MINTER_BURNER);\n    }\n\n    function isMinterBurner(address contr) internal view returns (bool) {\n        return roleCache[contr][MINTER_BURNER];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/strategies/YieldYakStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../Strategy.sol\";\n\nimport \"../../interfaces/IYakStrategy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../roles/DependsOnFeeRecipient.sol\";\n\ncontract YieldYakStrategy is Strategy, DependsOnFeeRecipient {\n    using SafeERC20 for IERC20;\n\n    mapping(address => address) public yakStrategy;\n    mapping(uint256 => uint256) public depositedShares;\n    mapping(address => uint256) public withdrawnFees;\n    mapping(uint256 => uint256) public trancheAPFLastUpdated;\n\n    uint256 feePer10k = 1000;\n\n    constructor(address _roles)\n        Strategy(\"YieldYak liquidation token\")\n        TrancheIDAware(_roles)\n    {\n        apfSmoothingPer10k = 500;\n    }\n\n    function collectCollateral(\n        address source,\n        address token,\n        uint256 collateralAmount\n    ) internal override returns (uint256) {\n        IERC20(token).safeTransferFrom(source, address(this), collateralAmount);\n\n        address yS = yakStrategy[token];\n        IERC20(token).approve(yS, collateralAmount);\n\n        uint256 balanceBefore = IERC20(yS).balanceOf(address(this));\n        IYakStrategy(yS).deposit(collateralAmount);\n        uint256 balanceDelta = IERC20(yS).balanceOf(address(this)) -\n            balanceBefore;\n\n        return balanceDelta;\n    }\n\n    function returnCollateral(\n        address recipient,\n        address token,\n        uint256 targetAmount\n    ) internal override returns (uint256) {\n        address yS = yakStrategy[token];\n        uint256 receiptAmount = IYakStrategy(yS).getSharesForDepositTokens(\n            targetAmount\n        );\n        IYakStrategy(yS).withdraw(receiptAmount);\n\n        IERC20(token).safeTransfer(recipient, targetAmount);\n\n        return receiptAmount;\n    }\n\n    function viewTargetCollateralAmount(uint256 trancheId)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        CollateralAccount storage account = _accounts[trancheId];\n        uint256 originalAmount = account.collateral;\n        uint256 currentWithYield = IYakStrategy(\n            yakStrategy[account.trancheToken]\n        ).getDepositTokensForShares(depositedShares[trancheId]);\n\n        uint256 feeFactor = 10_000 - feePer10k;\n        return\n            originalAmount +\n            (currentWithYield * feeFactor) /\n            10_000 -\n            (originalAmount * feeFactor) /\n            10_000;\n    }\n\n    function setYakStrategy(address token, address strategy)\n        external\n        onlyOwnerExec\n    {\n        yakStrategy[token] = strategy;\n    }\n\n    function checkApprovedAndEncode(address token)\n        public\n        view\n        returns (bool, bytes memory)\n    {\n        return (approvedToken(token), abi.encode());\n    }\n\n    function _applyCompounding(uint256 trancheId) internal override {\n        CollateralAccount storage account = _accounts[trancheId];\n        if (account.collateral > 0) {\n            address token = account.trancheToken;\n            TokenMetadata storage tokenMeta = tokenMetadata[token];\n            uint256 newAmount = viewTargetCollateralAmount(trancheId);\n            uint256 oldAmount = account.collateral;\n\n            if (newAmount > oldAmount) {\n                // disburse fee\n                returnCollateral(\n                    feeRecipient(),\n                    token,\n                    (feePer10k * (newAmount - oldAmount)) / (10_000 - feePer10k)\n                );\n\n                uint256 lastUpdated = trancheAPFLastUpdated[trancheId];\n                uint256 timeDelta = lastUpdated > 0\n                    ? block.timestamp - lastUpdated\n                    : 1 weeks;\n                _updateAPF(timeDelta, token, newAmount - oldAmount, oldAmount);\n            }\n\n            tokenMeta.totalCollateralNow =\n                tokenMeta.totalCollateralNow +\n                newAmount -\n                oldAmount;\n            account.collateral = newAmount;\n\n            depositedShares[trancheId] = IYakStrategy(yakStrategy[token])\n                .getSharesForDepositTokens(newAmount);\n        }\n        trancheAPFLastUpdated[trancheId] = block.timestamp;\n    }\n\n    function _deposit(\n        address depositor,\n        uint256 trancheId,\n        uint256 amount\n    ) internal override {\n        super._deposit(depositor, trancheId, amount);\n        CollateralAccount storage account = _accounts[trancheId];\n        depositedShares[trancheId] = IYakStrategy(\n            yakStrategy[account.trancheToken]\n        ).getSharesForDepositTokens(_accounts[trancheId].collateral);\n    }\n\n    function _withdraw(\n        uint256 trancheId,\n        uint256 amount,\n        address recipient\n    ) internal override {\n        super._withdraw(trancheId, amount, recipient);\n        CollateralAccount storage account = _accounts[trancheId];\n        uint256 remainingBalance = account.collateral;\n        if (remainingBalance > 0) {\n            depositedShares[trancheId] = IYakStrategy(\n                yakStrategy[account.trancheToken]\n            ).getSharesForDepositTokens(remainingBalance);\n        }\n    }\n\n    function _viewTVL(address token) public view override returns (uint256) {\n        address strat = yakStrategy[token];\n        return\n            IYakStrategy(strat).getDepositTokensForShares(\n                IERC20(strat).balanceOf(address(this))\n            );\n    }\n\n    function yieldType() public pure override returns (IStrategy.YieldType) {\n        return IStrategy.YieldType.COMPOUNDING;\n    }\n}\n"
    },
    "interfaces/IYakStrategy.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IYakStrategy {\n    /**\n     * @notice Deposit and deploy deposits tokens to the strategy\n     * @dev Must mint receipt tokens to `msg.sender`\n     * @param amount deposit tokens\n     */\n    function deposit(uint256 amount) external;\n\n    /**\n     * @notice Deposit using Permit\n     * @dev Should revert for tokens without Permit\n     * @param amount Amount of tokens to deposit\n     * @param deadline The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function depositWithPermit(\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @notice Deposit on behalf of another account\n     * @dev Must mint receipt tokens to `account`\n     * @param account address to receive receipt tokens\n     * @param amount deposit tokens\n     */\n    function depositFor(address account, uint256 amount) external;\n\n    /**\n     * @notice Redeem receipt tokens for deposit tokens\n     * @param amount receipt tokens\n     */\n    function withdraw(uint256 amount) external;\n\n    /**\n     * @notice Reinvest reward tokens into deposit tokens\n     */\n    function reinvest() external;\n\n    /**\n     * @notice Estimate reinvest reward\n     * @return reward tokens\n     */\n    function estimateReinvestReward() external view returns (uint256);\n\n    /**\n     * @notice Reward tokens avialable to strategy, including balance\n     * @return reward tokens\n     */\n    function checkReward() external view returns (uint256);\n\n    /**\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\n     * @return deposit tokens\n     */\n    function estimateDeployedBalance() external view returns (uint256);\n\n    /**\n     * @notice Rescue all available deployed deposit tokens back to Strategy\n     * @param minReturnAmountAccepted min deposit tokens to receive\n     * @param disableDeposits bool\n     */\n    function rescueDeployedFunds(\n        uint256 minReturnAmountAccepted,\n        bool disableDeposits\n    ) external;\n\n    /**\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\n     * @dev If contract is empty, use 1:1 ratio\n     * @dev Could return zero shares for very low amounts of deposit tokens\n     * @param amount deposit tokens\n     * @return receipt tokens\n     */\n    function getSharesForDepositTokens(uint256 amount)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\n     * @param amount receipt tokens\n     * @return deposit tokens\n     */\n    function getDepositTokensForShares(uint256 amount)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/strategies/SimpleHoldingStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../Strategy.sol\";\nimport \"../roles/DependsOnFeeRecipient.sol\";\n\ncontract SimpleHoldingStrategy is Strategy, DependsOnFeeRecipient {\n    using SafeERC20 for IERC20;\n\n    mapping(address => uint256) private _stabilityFeePer10k;\n    mapping(uint256 => uint256) public depositTime;\n\n    constructor(address _roles)\n        Strategy(\"Simple holding strategy\")\n        TrancheIDAware(_roles)\n    {}\n\n    function collectCollateral(\n        address source,\n        address token,\n        uint256 collateralAmount\n    ) internal override returns (uint256) {\n        IERC20(token).safeTransferFrom(source, address(this), collateralAmount);\n        return collateralAmount;\n    }\n\n    function returnCollateral(\n        address recipient,\n        address token,\n        uint256 collateralAmount\n    ) internal override returns (uint256) {\n        IERC20(token).safeTransfer(recipient, collateralAmount);\n        return collateralAmount;\n    }\n\n    function viewTargetCollateralAmount(uint256 trancheId)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        CollateralAccount storage account = _accounts[trancheId];\n        uint256 amount = account.collateral;\n        uint256 delta = (amount *\n            (block.timestamp - depositTime[trancheId]) *\n            _stabilityFeePer10k[account.trancheToken]) /\n            (365 days) /\n            10_000;\n        if (amount > delta) {\n            return amount - delta;\n        } else {\n            return 0;\n        }\n    }\n\n    function _applyCompounding(uint256 trancheId) internal override {\n        CollateralAccount storage account = _accounts[trancheId];\n        if (account.collateral > 0) {\n            address token = account.trancheToken;\n            TokenMetadata storage tokenMeta = tokenMetadata[token];\n            uint256 newAmount = viewTargetCollateralAmount(trancheId);\n            uint256 oldAmount = account.collateral;\n\n            if (oldAmount > newAmount) {\n                returnCollateral(feeRecipient(), token, oldAmount - newAmount);\n\n                tokenMeta.totalCollateralNow =\n                    tokenMeta.totalCollateralNow +\n                    newAmount -\n                    oldAmount;\n            }\n\n            account.collateral = newAmount;\n            depositTime[trancheId] = block.timestamp;\n        }\n    }\n\n    function setStabilityFeePer10k(address token, uint256 yearlyFeePer10k)\n        external\n        onlyOwnerExec\n    {\n        _stabilityFeePer10k[token] = yearlyFeePer10k;\n    }\n\n    function _approveToken(address token, bytes calldata data)\n        internal\n        override\n    {\n        uint256 stabilityFee = abi.decode(data, (uint256));\n        _stabilityFeePer10k[token] = stabilityFee;\n\n        super._approveToken(token, data);\n    }\n\n    function checkApprovedAndEncode(address token, uint256 stabilityFee)\n        public\n        view\n        returns (bool, bytes memory)\n    {\n        return (approvedToken(token), abi.encode(stabilityFee));\n    }\n\n    function yieldType() public pure override returns (IStrategy.YieldType) {\n        return IStrategy.YieldType.NOYIELD;\n    }\n\n    function stabilityFeePer10k(address token)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _stabilityFeePer10k[token];\n    }\n}\n"
    },
    "contracts/strategies/YieldConversionStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../Strategy.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../roles/DependsOnFeeRecipient.sol\";\n\nabstract contract YieldConversionStrategy is Strategy, DependsOnFeeRecipient {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for Stablecoin;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    IERC20 public immutable rewardToken;\n\n    mapping(address => uint256) public totalRewardPerAsset;\n    mapping(address => uint256) public totalStableTallied;\n    uint256 public totalConvertedStable;\n    uint256 public totalRewardCumulative;\n    uint256 public currentTalliedRewardReserve;\n\n    uint256 public minimumBidPer10k = 9_600;\n\n    uint256 public feePer10k = 1000;\n\n    constructor(address _rewardToken) {\n        rewardToken = IERC20(_rewardToken);\n    }\n\n    function convertReward2Stable(uint256 conversionAmount, uint256 usdmBid)\n        external\n    {\n        uint256 reward2Convert = min(\n            conversionAmount,\n            currentTalliedRewardReserve\n        );\n\n        require(reward2Convert > 0, \"No currently convertible reward\");\n        uint256 targetValue = _getValue(\n            address(rewardToken),\n            conversionAmount,\n            address(stableCoin())\n        );\n        require(\n            usdmBid * 10_000 >= targetValue * minimumBidPer10k,\n            \"Insufficient bid\"\n        );\n\n        uint256 stableAmount = (reward2Convert * usdmBid) / conversionAmount;\n\n        stableCoin().burn(msg.sender, stableAmount);\n\n        stableCoin().mint(feeRecipient(), (feePer10k * stableAmount) / 10_000);\n\n        totalConvertedStable += (stableAmount * (10_000 - feePer10k)) / 10_000;\n\n        rewardToken.safeTransfer(msg.sender, reward2Convert);\n        currentTalliedRewardReserve -= reward2Convert;\n    }\n\n    /// roll over stable balance into yield to accounts\n    function tallyHarvestBalance()\n        internal\n        virtual\n        override\n        returns (uint256 balance)\n    {\n        for (uint256 i; _allTokensEver.length() > i; i++) {\n            address token = _allTokensEver.at(i);\n            balance += tallyHarvestBalance(token);\n        }\n    }\n\n    function viewHarvestBalance2Tally(address token)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        if (totalRewardCumulative > 0) {\n            return\n                (totalConvertedStable * totalRewardPerAsset[token]) /\n                totalRewardCumulative -\n                totalStableTallied[token];\n        } else {\n            return 0;\n        }\n    }\n\n    function tallyHarvestBalance(address token)\n        public\n        virtual\n        returns (uint256 balance)\n    {\n        balance = viewHarvestBalance2Tally(token);\n        TokenMetadata storage tokenMeta = tokenMetadata[token];\n        _updateAPF(\n            token,\n            balance,\n            _getValue(\n                token,\n                tokenMeta.totalCollateralNow,\n                address(stableCoin())\n            )\n        );\n\n        tokenMeta.cumulYieldPerCollateralFP +=\n            (balance * FP64) /\n            tokenMeta.totalCollateralPast;\n        tokenMeta.yieldCheckpoints.push(tokenMeta.cumulYieldPerCollateralFP);\n        tokenMeta.totalCollateralPast = tokenMeta.totalCollateralNow;\n\n        totalStableTallied[token] += balance;\n    }\n\n    function tallyReward(address token) public {\n        uint256 balance = rewardToken.balanceOf(address(this));\n        uint256 additionalReward = balance - currentTalliedRewardReserve;\n        if (additionalReward > 0) {\n            totalRewardPerAsset[token] += additionalReward;\n            currentTalliedRewardReserve = balance;\n        }\n    }\n\n    function setMinimumBidPer10k(uint256 bidmin) external onlyOwnerExec {\n        minimumBidPer10k = bidmin;\n    }\n\n    function setFeePer10k(uint256 fee) external onlyOwnerExec {\n        feePer10k = fee;\n    }\n\n    function yieldType() public pure override returns (IStrategy.YieldType) {\n        return IStrategy.YieldType.REPAYING;\n    }\n}\n"
    },
    "contracts/strategies/StakingRewardsStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./YieldConversionStrategy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IStakingRewards.sol\";\n\ncontract StakingRewardsStrategy is YieldConversionStrategy {\n    using SafeERC20 for IERC20;\n\n    mapping(address => address) public stakingContracts;\n\n    constructor(\n        bytes32 stratName,\n        address _rewardToken,\n        address _roles\n    )\n        Strategy(stratName)\n        YieldConversionStrategy(_rewardToken)\n        TrancheIDAware(_roles)\n    {}\n\n    function collectCollateral(\n        address source,\n        address token,\n        uint256 collateralAmount\n    ) internal override returns (uint256) {\n        IERC20(token).safeTransferFrom(source, address(this), collateralAmount);\n\n        address stakingContract = stakingContracts[token];\n        IERC20(token).approve(stakingContract, collateralAmount);\n\n        IStakingRewards(stakingContract).stake(collateralAmount);\n        IStakingRewards(stakingContract).getReward();\n        tallyReward(token);\n\n        return collateralAmount;\n    }\n\n    function returnCollateral(\n        address recipient,\n        address token,\n        uint256 collateralAmount\n    ) internal override returns (uint256) {\n        IStakingRewards stakingContract = IStakingRewards(\n            stakingContracts[token]\n        );\n        stakingContract.withdraw(collateralAmount);\n        IERC20(token).safeTransfer(recipient, collateralAmount);\n        stakingContract.getReward();\n        tallyReward(token);\n\n        return collateralAmount;\n    }\n\n    function _approveToken(address token, bytes calldata data)\n        internal\n        override\n    {\n        address stakingContractAddress = abi.decode(data, (address));\n        IStakingRewards stakingContract = IStakingRewards(\n            stakingContractAddress\n        );\n\n        IERC20 _rewardToken = stakingContract.rewardsToken();\n        IERC20 _stakingToken = stakingContract.stakingToken();\n\n        require(\n            address(_stakingToken) == token,\n            \"Staking token does not match\"\n        );\n        require(_rewardToken == rewardToken, \"Reward token does not match\");\n\n        stakingContracts[token] = stakingContractAddress;\n\n        super._approveToken(token, data);\n    }\n\n    function checkApprovedAndEncode(address token, address stakingContract)\n        public\n        view\n        returns (bool, bytes memory)\n    {\n        return (approvedToken(token), abi.encode(stakingContract));\n    }\n}\n"
    },
    "interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStakingRewards {\n    function rewardsToken() external view returns (IERC20);\n\n    function stakingToken() external view returns (IERC20);\n\n    function periodFinish() external returns (uint256);\n\n    function rewardRate() external returns (uint256);\n\n    function rewardsDuration() external returns (uint256);\n\n    function lastUpdateTime() external returns (uint256);\n\n    function rewardPerTokenStored() external returns (uint256);\n\n    function userRewardPerTokenPaid(address user) external returns (uint256);\n\n    function rewards(address user) external returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stakeWithPermit(\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n\n    function exit() external;\n}\n"
    },
    "interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMasterChef {\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.\n        uint256 lastRewardTimestamp; // Last block number that JOE distribution occurs.\n        uint256 accJoePerShare; // Accumulated JOE per share, times 1e12. See below.\n    }\n\n    function poolInfo(uint256 pid)\n        external\n        view\n        returns (IMasterChef.PoolInfo memory);\n\n    function poolLength() external view returns (uint256 pools);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n}\n"
    },
    "contracts/strategies/MasterChefStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./YieldConversionStrategy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IMasterChef.sol\";\n\ncontract MasterChefStrategy is YieldConversionStrategy {\n    using SafeERC20 for IERC20;\n\n    IMasterChef public immutable chef;\n    mapping(address => uint256) public pids;\n\n    constructor(\n        bytes32 stratName,\n        address _chef,\n        address _rewardToken,\n        address _roles\n    )\n        Strategy(stratName)\n        YieldConversionStrategy(_rewardToken)\n        TrancheIDAware(_roles)\n    {\n        chef = IMasterChef(_chef);\n    }\n\n    function collectCollateral(\n        address source,\n        address ammPair,\n        uint256 collateralAmount\n    ) internal override returns (uint256) {\n        IERC20(ammPair).safeTransferFrom(\n            source,\n            address(this),\n            collateralAmount\n        );\n        IERC20(ammPair).approve(address(chef), collateralAmount);\n        chef.deposit(pids[ammPair], collateralAmount);\n        tallyReward(ammPair);\n\n        return collateralAmount;\n    }\n\n    function returnCollateral(\n        address recipient,\n        address ammPair,\n        uint256 collateralAmount\n    ) internal override returns (uint256) {\n        chef.withdraw(pids[ammPair], collateralAmount);\n        tallyReward(ammPair);\n        IERC20(ammPair).safeTransfer(recipient, collateralAmount);\n\n        return collateralAmount;\n    }\n\n    function _approveToken(address token, bytes calldata data)\n        internal\n        override\n    {\n        uint256 pid = abi.decode(data, (uint256));\n        require(\n            address(chef.poolInfo(pid).lpToken) == token,\n            \"Provided PID does not correspond to MasterChef\"\n        );\n        pids[token] = pid;\n\n        super._approveToken(token, data);\n    }\n\n    function checkApprovedAndEncode(address token, uint256 pid)\n        public\n        view\n        returns (bool, bytes memory)\n    {\n        return (approvedToken(token), abi.encode(pid));\n    }\n}\n"
    },
    "contracts/strategies/TraderJoeMasterChefStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./MasterChefStrategy.sol\";\n\ncontract TraderJoeMasterChefStrategy is MasterChefStrategy {\n    constructor(address _roles)\n        MasterChefStrategy(\n            \"Trader Joe self-repaying\",\n            0xd6a4F121CA35509aF06A0Be99093d08462f53052,\n            0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd,\n            _roles\n        )\n    {}\n}\n"
    },
    "contracts/Fund.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"./roles/RoleAware.sol\";\nimport \"./roles/DependsOnFundTransferer.sol\";\n\n/// @title Manage funding\ncontract Fund is RoleAware, DependsOnFundTransferer {\n    using SafeERC20 for IERC20;\n    /// wrapped ether\n    address public immutable WETH;\n\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\n        WETH = _WETH;\n        _charactersPlayed.push(FUND);\n    }\n\n    /// Deposit an active token\n    function deposit(address depositToken, uint256 depositAmount) external {\n        IERC20(depositToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            depositAmount\n        );\n    }\n\n    /// Deposit token on behalf of `sender`\n    function depositFor(\n        address sender,\n        address depositToken,\n        uint256 depositAmount\n    ) external {\n        require(isFundTransferer(msg.sender), \"Unauthorized deposit\");\n        IERC20(depositToken).safeTransferFrom(\n            sender,\n            address(this),\n            depositAmount\n        );\n    }\n\n    /// Deposit to wrapped ether\n    function depositToWETH() external payable {\n        IWETH(WETH).deposit{value: msg.value}();\n    }\n\n    // withdrawers role\n    function withdraw(\n        address withdrawalToken,\n        address recipient,\n        uint256 withdrawalAmount\n    ) external {\n        require(isFundTransferer(msg.sender), \"Unauthorized withdraw\");\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\n    }\n\n    // withdrawers role\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\n        require(isFundTransferer(msg.sender), \"Unauthorized withdraw\");\n        IWETH(WETH).withdraw(withdrawalAmount);\n        Address.sendValue(payable(recipient), withdrawalAmount);\n    }\n}\n"
    },
    "interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./ProxyOwnershipERC721.sol\";\nimport \"./Tranche.sol\";\nimport \"./TrancheIDAware.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"./roles/DependsOnTranche.sol\";\nimport \"./roles/DependsOnFundTransferer.sol\";\n\nabstract contract Vault is\n    ProxyOwnershipERC721,\n    IERC721Receiver,\n    TrancheIDAware,\n    IVault,\n    DependsOnTranche,\n    DependsOnFundTransferer\n{\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    event VaultMinted(address indexed owner, uint256 indexed vaultId);\n    uint256 nextVaultIndex = 1;\n\n    mapping(uint256 => EnumerableSet.UintSet) internal vaultTranches;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _roles\n    ) TrancheIDAware(_roles) ERC721(_name, _symbol) {}\n\n    function _mintVault(address recipient) internal returns (uint256) {\n        uint256 id = nextVaultIndex;\n        nextVaultIndex++;\n\n        _safeMint(recipient, id);\n        return id;\n    }\n\n    function safeTransferTrancheFromVault(\n        uint256 vaultId,\n        uint256 trancheId,\n        address recipient,\n        uint256 recipientVaultId\n    ) external {\n        _checkAuthorizedAndTrancheInVault(msg.sender, vaultId, trancheId);\n        Tranche(tranche(trancheId)).safeTransferFrom(\n            address(this),\n            recipient,\n            trancheId,\n            abi.encode(recipientVaultId)\n        );\n        EnumerableSet.UintSet storage vault = vaultTranches[vaultId];\n        vault.remove(trancheId);\n\n        require(isViable(vaultId), \"Transfer makes vault unviable\");\n    }\n\n    function mintTranche(\n        address trancheContract,\n        uint256 vaultId,\n        address strategy,\n        address assetToken,\n        uint256 assetTokenId,\n        uint256 assetAmount\n    ) external override returns (uint256) {\n        require(\n            isAuthorized(_msgSender(), vaultId),\n            \"Not authorized to mint tranche from vault\"\n        );\n        return\n            Tranche(trancheContract).mintTranche(\n                vaultId,\n                strategy,\n                assetToken,\n                assetTokenId,\n                assetAmount\n            );\n    }\n\n    function registerMintTrancheForVault(\n        address trancheContract,\n        address minter,\n        uint256 vaultId,\n        address strategy,\n        address assetToken,\n        uint256 assetTokenId,\n        uint256 assetAmount\n    ) external {\n        require(\n            isFundTransferer(msg.sender),\n            \"Not authorized to transfer user funds\"\n        );\n        require(\n            isAuthorized(minter, vaultId),\n            \"Not authorized to withdraw from vault\"\n        );\n        require(isTranche(trancheContract), \"Not a valid tranche contract\");\n        Tranche(trancheContract).mintTranche(\n            vaultId,\n            strategy,\n            assetToken,\n            assetTokenId,\n            assetAmount\n        );\n    }\n\n    function deposit(\n        uint256 vaultId,\n        uint256 trancheId,\n        uint256 tokenAmount\n    ) external override {\n        _checkAuthorizedAndTrancheInVault(_msgSender(), vaultId, trancheId);\n        Tranche(tranche(trancheId)).registerDepositFor(\n            msg.sender,\n            trancheId,\n            tokenAmount\n        );\n    }\n\n    function withdraw(\n        uint256 vaultId,\n        uint256 trancheId,\n        uint256 tokenAmount,\n        address recipient\n    ) external override {\n        _checkAuthorizedAndTrancheInVault(_msgSender(), vaultId, trancheId);\n        Tranche(tranche(trancheId)).withdraw(trancheId, tokenAmount, recipient);\n        require(isViable(vaultId), \"Vault no longer viable after withdraw\");\n    }\n\n    function burnTranche(\n        uint256 vaultId,\n        uint256 trancheId,\n        address yieldToken,\n        address recipient\n    ) external override {\n        _checkAuthorizedAndTrancheInVault(_msgSender(), vaultId, trancheId);\n        Tranche(tranche(trancheId)).burnTranche(\n            trancheId,\n            yieldToken,\n            recipient\n        );\n        EnumerableSet.UintSet storage vault = vaultTranches[vaultId];\n        vault.remove(trancheId);\n        require(isViable(vaultId), \"Vault no longer viable after withdraw\");\n    }\n\n    function migrateStrategy(\n        uint256 vaultId,\n        uint256 trancheId,\n        address targetStrategy,\n        address yieldToken,\n        address yieldRecipient\n    )\n        external\n        override\n        returns (\n            address token,\n            uint256 tokenId,\n            uint256 targetAmount\n        )\n    {\n        _checkAuthorizedAndTrancheInVault(_msgSender(), vaultId, trancheId);\n        return\n            Tranche(tranche(trancheId)).migrateStrategy(\n                trancheId,\n                targetStrategy,\n                yieldToken,\n                yieldRecipient\n            );\n    }\n\n    function _checkAuthorizedAndTrancheInVault(\n        address operator,\n        uint256 vaultId,\n        uint256 trancheId\n    ) internal view {\n        require(\n            isAuthorized(operator, vaultId),\n            \"Not authorized to modify vault\"\n        );\n        EnumerableSet.UintSet storage vault = vaultTranches[vaultId];\n        require(vault.contains(trancheId), \"Vault does not contain tranche\");\n    }\n\n    function collectYield(\n        uint256 vaultId,\n        address currency,\n        address recipient\n    ) public override returns (uint256) {\n        require(\n            isAuthorized(msg.sender, vaultId),\n            \"Not authorized to modify vault\"\n        );\n        uint256[] memory trancheIds = vaultTranches[vaultId].values();\n        address[] memory trancheContracts = tranche(trancheIds);\n\n        uint256 yield;\n        for (uint256 i; trancheContracts.length > i; i++) {\n            yield += Tranche(trancheContracts[i]).batchCollectYield(\n                vaultTranches[vaultId].values(),\n                currency,\n                recipient\n            );\n        }\n\n        return yield;\n    }\n\n    function viewYield(uint256 vaultId, address currency)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256[] memory trancheIds = vaultTranches[vaultId].values();\n        address[] memory trancheContracts = tranche(trancheIds);\n\n        uint256 yield;\n        for (uint256 i; trancheContracts.length > i; i++) {\n            yield += Tranche(trancheContracts[i]).batchViewYield(\n                vaultTranches[vaultId].values(),\n                currency\n            );\n        }\n        return yield;\n    }\n\n    function viewBorrowable(uint256 vaultId, address currency)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256[] memory trancheIds = vaultTranches[vaultId].values();\n        address[] memory trancheContracts = tranche(trancheIds);\n\n        uint256 totalBorrowablePer10k;\n        uint256 totalValue;\n        for (uint256 i; trancheContracts.length > i; i++) {\n            (uint256 value, uint256 borrowablePer10k) = Tranche(\n                trancheContracts[i]\n            ).batchViewValueBorrowable(\n                    vaultTranches[vaultId].values(),\n                    currency\n                );\n            totalValue += value;\n            totalBorrowablePer10k += borrowablePer10k * value;\n        }\n        return totalBorrowablePer10k / totalValue;\n    }\n\n    function viewValue(uint256 vaultId, address currency)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256[] memory trancheIds = vaultTranches[vaultId].values();\n        address[] memory trancheContracts = tranche(trancheIds);\n\n        uint256 value;\n        for (uint256 i; trancheContracts.length > i; i++) {\n            value += Tranche(trancheContracts[i]).batchViewValue(\n                vaultTranches[vaultId].values(),\n                currency\n            );\n        }\n        return value;\n    }\n\n    function collectYieldValueBorrowable(\n        uint256 vaultId,\n        address yieldCurrency,\n        address valueCurrency,\n        address recipient\n    )\n        public\n        override\n        returns (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k\n        )\n    {\n        uint256[] memory trancheIds = vaultTranches[vaultId].values();\n        address[] memory trancheContracts = tranche(trancheIds);\n\n        for (uint256 i; trancheContracts.length > i; i++) {\n            (\n                uint256 _yield,\n                uint256 _value,\n                uint256 _borrowablePer10k\n            ) = Tranche(trancheContracts[i]).batchCollectYieldValueBorrowable(\n                    vaultTranches[vaultId].values(),\n                    yieldCurrency,\n                    valueCurrency,\n                    recipient\n                );\n\n            yield += _yield;\n            value += _value;\n            borrowablePer10k += _borrowablePer10k * _value;\n        }\n        borrowablePer10k = borrowablePer10k / value;\n    }\n\n    function onERC721Received(\n        address from,\n        address to,\n        uint256 trancheId,\n        bytes calldata data\n    ) public virtual override returns (bytes4) {\n        require(\n            msg.sender == tranche(trancheId),\n            \"Only tranche contract NFTs accepted\"\n        );\n        require(to == address(this), \"not set to correct address\");\n        uint256 vaultId = abi.decode(data, (uint256));\n        if (vaultId == 0) {\n            vaultId = _mintVault(from);\n        }\n        _addTranche2Vault(vaultId, trancheId);\n        return this.onERC721Received.selector;\n    }\n\n    function transferTranche(\n        uint256 vaultId,\n        address recipient,\n        uint256 trancheId,\n        uint256 recipientVaultId\n    ) external {\n        require(\n            _isApprovedOrOwner(msg.sender, vaultId),\n            \"Not authorized to transfer out of vault\"\n        );\n\n        IERC721(tranche(trancheId)).safeTransferFrom(\n            address(this),\n            recipient,\n            trancheId,\n            abi.encode(recipientVaultId)\n        );\n        _removeTrancheFromVault(vaultId, trancheId);\n        require(isViable(vaultId), \"Vault no longer viable\");\n    }\n\n    function _addTranche2Vault(uint256 vaultId, uint256 trancheId)\n        internal\n        virtual\n    {\n        vaultTranches[vaultId].add(trancheId);\n    }\n\n    function _removeTrancheFromVault(uint256 vaultId, uint256 trancheId)\n        internal\n        virtual\n    {\n        vaultTranches[vaultId].remove(trancheId);\n    }\n\n    function getVaultTranches(uint256 vaultId)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return vaultTranches[vaultId].values();\n    }\n\n    function isViable(uint256 vaultId)\n        public\n        view\n        virtual\n        override\n        returns (bool);\n\n    function tranche(uint256[] memory trancheIds)\n        public\n        view\n        virtual\n        returns (address[] memory)\n    {\n        address[] memory trancheContracts = new address[](trancheIds.length);\n        for (uint256 i; trancheIds.length > i; i++) {\n            trancheContracts[i] = tranche(trancheIds[i]);\n        }\n\n        return trancheContracts;\n    }\n}\n\n// allow as many wrappers as we may want, but have a unique ID space for our wrappers?\n// or we tie it to a fixed issuer of NFTs also has its benefits\n"
    },
    "interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\ninterface IVault {\n    function mintTranche(\n        address trancheContract,\n        uint256 ownerTokenId,\n        address strategy,\n        address assetToken,\n        uint256 assetTokenId,\n        uint256 assetAmount\n    ) external returns (uint256);\n\n    function deposit(\n        uint256 vaultId,\n        uint256 trancheId,\n        uint256 tokenAmount\n    ) external;\n\n    function withdraw(\n        uint256 vaultId,\n        uint256 trancheId,\n        uint256 tokenAmount,\n        address recipient\n    ) external;\n\n    function burnTranche(\n        uint256 vaultId,\n        uint256 trancheId,\n        address yieldToken,\n        address recipient\n    ) external;\n\n    function migrateStrategy(\n        uint256 vaultId,\n        uint256 trancheId,\n        address targetStrategy,\n        address yieldToken,\n        address yieldRecipient\n    )\n        external\n        returns (\n            address token,\n            uint256 tokenId,\n            uint256 targetAmount\n        );\n\n    function collectYield(\n        uint256 tokenId,\n        address currency,\n        address recipient\n    ) external returns (uint256);\n\n    function viewYield(uint256 tokenId, address currency)\n        external\n        view\n        returns (uint256);\n\n    function viewValue(uint256 tokenId, address currency)\n        external\n        view\n        returns (uint256);\n\n    function viewBorrowable(uint256 tokenId, address currency)\n        external\n        view\n        returns (uint256);\n\n    function collectYieldValueBorrowable(\n        uint256 tokenId,\n        address yieldCurrency,\n        address valueCurrency,\n        address recipient\n    )\n        external\n        returns (\n            uint256 yield,\n            uint256 value,\n            uint256 borrowablePer10k\n        );\n}\n"
    },
    "contracts/IsolatedLendingLiquidation.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./oracles/OracleAware.sol\";\nimport \"./roles/RoleAware.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./IsolatedLending.sol\";\nimport \"./roles/DependsOnStableCoin.sol\";\nimport \"./roles/DependsOnIsolatedLending.sol\";\nimport \"./roles/DependsOnFeeRecipient.sol\";\n\ncontract IsolatedLendingLiquidation is\n    RoleAware,\n    DependsOnStableCoin,\n    DependsOnIsolatedLending,\n    DependsOnFeeRecipient\n{\n    int256 public liquidationSharePer10k = 300;\n    uint256 public pendingFees;\n\n    constructor(address _roles) RoleAware(_roles) {\n        _rolesPlayed.push(LIQUIDATOR);\n        _rolesPlayed.push(FUND_TRANSFERER);\n    }\n\n    function liquidatable(uint256 trancheId) public view returns (bool) {\n        address stable = address(stableCoin());\n        IsolatedLending lending = isolatedLending();\n        (uint256 yield, uint256 value, uint256 borrowablePer10k) = lending\n            .viewYieldValueBorrowable(trancheId, stable, stable);\n        uint256 debt = lending.trancheDebt(trancheId);\n\n        uint256 thresholdPer10k = lending.borrowable2LiqThresh(\n            borrowablePer10k\n        );\n\n        // value / debt > 10k / threshold\n        return (value + yield) * thresholdPer10k > 10_000 * debt;\n    }\n\n    function getLiquidatability(uint256 trancheId)\n        public\n        returns (bool, int256)\n    {\n        IsolatedLending lending = isolatedLending();\n        address stable = address(stableCoin());\n        (, uint256 value, uint256 borrowablePer10k) = lending\n            .collectYieldValueBorrowable(\n                trancheId,\n                stable,\n                stable,\n                lending.ownerOf(trancheId)\n            );\n        uint256 debt = lending.trancheDebt(trancheId);\n\n        uint256 thresholdPer10k = lending.borrowable2LiqThresh(\n            borrowablePer10k\n        );\n\n        bool _liquidatable = value * thresholdPer10k > 10_000 * debt;\n        int256 netValueThreshold = (int256(value) *\n            (10_000 - liquidationSharePer10k)) /\n            10_000 -\n            int256(debt);\n\n        return (_liquidatable, netValueThreshold);\n    }\n\n    function liquidate(\n        uint256 trancheId,\n        int256 bid,\n        address recipient,\n        bytes calldata _data\n    ) external {\n        (bool _liquidatable, int256 netValueThresh) = getLiquidatability(\n            trancheId\n        );\n        require(_liquidatable, \"Tranche is not liquidatable\");\n\n        if (bid > netValueThresh) {\n            IsolatedLending lending = isolatedLending();\n            Stablecoin stable = stableCoin();\n\n            if (bid > 0) {\n                uint256 posBid = uint256(bid);\n                stable.burn(msg.sender, posBid);\n\n                stable.mint(lending.ownerOf(trancheId), posBid / 2);\n                pendingFees += posBid / 2;\n            } else {\n                uint256 posBid = uint256(0 - bid);\n                stable.mint(recipient, posBid);\n            }\n\n            lending.liquidateTo(trancheId, recipient, _data);\n        }\n    }\n\n    function withdrawFees() external {\n        stableCoin().mint(feeRecipient(), pendingFees);\n        pendingFees = 0;\n    }\n}\n"
    },
    "contracts/controller-actions/StrategyTokenActivation.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../Executor.sol\";\nimport \"../roles/DependsOnIsolatedLending.sol\";\nimport \"../roles/DependsOnOracleRegistry.sol\";\nimport \"../Strategy.sol\";\n\ncontract StrategyTokenActivation is\n    Executor,\n    DependsOnIsolatedLending,\n    DependsOnOracleRegistry\n{\n    address[] public tokens;\n    address[] public strategies;\n    bytes[] public data;\n\n    constructor(\n        address[] memory _tokens,\n        address[] memory _strategies,\n        bytes[] memory _data,\n        address _roles\n    ) RoleAware(_roles) {\n        tokens = _tokens;\n        strategies = _strategies;\n        data = _data;\n    }\n\n    function execute() external override {\n        uint256 len = tokens.length;\n        for (uint256 i; len > i; i++) {\n            address token = tokens[i];\n\n            Strategy strat = Strategy(strategies[i]);\n            if (!strat.approvedToken(token)) {\n                Strategy(strategies[i]).approveToken(token, data[i]);\n            }\n        }\n\n        delete tokens;\n        delete strategies;\n        delete data;\n        selfdestruct(payable(tx.origin));\n    }\n}\n"
    },
    "contracts/controller-actions/OracleActivation.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../Executor.sol\";\nimport \"../roles/DependsOnIsolatedLending.sol\";\nimport \"../roles/DependsOnOracleRegistry.sol\";\nimport \"../Strategy.sol\";\n\ncontract OracleActivation is Executor, DependsOnOracleRegistry {\n    address public immutable oracle;\n    address[] public tokens;\n    address[] public pegCurrencies;\n    uint256[] public borrowablePer10ks;\n    bytes[] public data;\n\n    constructor(\n        address _oracle,\n        address[] memory _tokens,\n        address[] memory _pegCurrencies,\n        uint256[] memory _borrowablePer10ks,\n        bytes[] memory _data,\n        address _roles\n    ) RoleAware(_roles) {\n        tokens = _tokens;\n        pegCurrencies = _pegCurrencies;\n        data = _data;\n        oracle = _oracle;\n        borrowablePer10ks = _borrowablePer10ks;\n    }\n\n    function execute() external override {\n        uint256 len = tokens.length;\n\n        for (uint256 i; len > i; i++) {\n            oracleRegistry().setOracleParams(\n                tokens[i],\n                pegCurrencies[i],\n                oracle,\n                borrowablePer10ks[i],\n                data[i]\n            );\n        }\n\n        delete tokens;\n        delete pegCurrencies;\n        delete borrowablePer10ks;\n        delete data;\n        selfdestruct(payable(tx.origin));\n    }\n}\n"
    },
    "contracts/oracles/ChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./Oracle.sol\";\nimport \"./OracleAware.sol\";\nimport \"../roles/DependsOnStableCoin.sol\";\n\ncontract ChainlinkOracle is Oracle, OracleAware, DependsOnStableCoin {\n    uint256 immutable pegDecimalFactor;\n    address immutable twapStandinToken;\n    uint256 immutable standinDecimalFactor;\n\n    struct ChainlinkOracleParams {\n        AggregatorV3Interface oracle;\n        uint256 oracleDecimalFactor;\n        uint256 tokenDecimalFactor;\n    }\n\n    mapping(address => ChainlinkOracleParams) public clOracleParams;\n    uint256 public stalenessWindow = 30 minutes;\n\n    constructor(\n        address _twapStandin,\n        uint256 standinDecimals,\n        address _roles\n    ) RoleAware(_roles) {\n        pegDecimalFactor = 1e18;\n        twapStandinToken = _twapStandin;\n        standinDecimalFactor = 1e18 / (10**standinDecimals);\n    }\n\n    function getChainlinkPrice(AggregatorV3Interface oracle)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        (, int256 tokenPrice, , uint256 tstamp, ) = oracle.latestRoundData();\n\n        return (uint256(tokenPrice), tstamp);\n    }\n\n    function setStalenessWindow(uint256 staleness) external onlyOwnerExec {\n        stalenessWindow = staleness;\n    }\n\n    function viewAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public view override returns (uint256) {\n        require(\n            pegCurrency == address(stableCoin()),\n            \"Chainlink just used for USD val\"\n        );\n        ChainlinkOracleParams storage params = clOracleParams[token];\n\n        (uint256 oraclePrice, uint256 tstamp) = getChainlinkPrice(\n            params.oracle\n        );\n        if (block.timestamp > tstamp + stalenessWindow) {\n            return\n                standinDecimalFactor *\n                _viewValue(token, inAmount, twapStandinToken);\n        } else {\n            return\n                (pegDecimalFactor * inAmount * oraclePrice) /\n                params.oracleDecimalFactor /\n                params.tokenDecimalFactor;\n        }\n    }\n\n    function getAmountInPeg(\n        address token,\n        uint256 inAmount,\n        address pegCurrency\n    ) public override returns (uint256) {\n        require(\n            pegCurrency == address(stableCoin()),\n            \"Chainlink just used for USD val\"\n        );\n\n        ChainlinkOracleParams storage params = clOracleParams[token];\n        (uint256 oraclePrice, uint256 tstamp) = getChainlinkPrice(\n            params.oracle\n        );\n\n        bool stale = block.timestamp > tstamp + stalenessWindow;\n        uint256 twapAmount;\n        if (stale || block.timestamp % (5 minutes) > 3 minutes) {\n            // this is conceivably vulnerable to degenerate cases\n            // where only the attacker is using the oracle\n            // and they can force chainlink to go stale\n            // and have the capital to manipulate stale twap state\n            // significantly\n            twapAmount =\n                standinDecimalFactor *\n                _getValue(token, inAmount, twapStandinToken);\n        }\n\n        if (stale) {\n            return twapAmount;\n        } else {\n            return\n                (pegDecimalFactor * inAmount * oraclePrice) /\n                params.oracleDecimalFactor /\n                params.tokenDecimalFactor;\n        }\n    }\n\n    function setOracleSpecificParams(\n        address token,\n        address pegCurrency,\n        address oracle,\n        uint256 tokenDecimals\n    ) external onlyOwnerExec {\n        _setOracleSpecificParams(token, pegCurrency, oracle, tokenDecimals);\n    }\n\n    function _setOracleSpecificParams(\n        address token,\n        address pegCurrency,\n        address oracle,\n        uint256 tokenDecimals\n    ) internal {\n        require(\n            pegCurrency == address(stableCoin()),\n            \"Chainlink just used for USD val\"\n        );\n        clOracleParams[token] = ChainlinkOracleParams({\n            oracle: AggregatorV3Interface(oracle),\n            oracleDecimalFactor: 10**AggregatorV3Interface(oracle).decimals(),\n            tokenDecimalFactor: 10**tokenDecimals\n        });\n        require(\n            _getValue(token, 1e18, twapStandinToken) > 0,\n            \"Twap standin oracle not set up\"\n        );\n    }\n\n    function _setOracleParams(\n        address token,\n        address pegCurrency,\n        bytes calldata data\n    ) internal override {\n        (address oracle, uint256 tokenDecimals) = abi.decode(\n            data,\n            (address, uint256)\n        );\n        _setOracleSpecificParams(token, pegCurrency, oracle, tokenDecimals);\n    }\n\n    function encodeAndCheckOracleParams(\n        address token,\n        address pegCurrency,\n        address oracle,\n        uint256 tokenDecimals\n    ) external view returns (bool, bytes memory) {\n        require(\n            pegCurrency == address(stableCoin()),\n            \"Chainlink just used for USD val\"\n        );\n        ChainlinkOracleParams storage clOracle = clOracleParams[token];\n        bool matches = address(clOracle.oracle) == oracle &&\n            clOracle.tokenDecimalFactor == 10**tokenDecimals;\n        return (matches, abi.encode(oracle, tokenDecimals));\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/strategies/PangolinStakingRewardsStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./StakingRewardsStrategy.sol\";\n\ncontract PangolinStakingRewardsStrategy is StakingRewardsStrategy {\n    constructor(address _roles)\n        StakingRewardsStrategy(\n            \"Pangolin self-repaying\",\n            0x60781C2586D68229fde47564546784ab3fACA982,\n            _roles\n        )\n    {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}