{
  "address": "0xFac89EbFe7d0E09777f755B87293f74e5C600afE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "_listenForOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_oracleCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowablePer10ks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "singleSideToken",
          "type": "address"
        }
      ],
      "name": "encodeAndCheckOracleParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "getAmountInPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "getPegAmountAndBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "newCurrentOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpt",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "name": "setBorrowable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setOracleParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "singleSideToken",
          "type": "address"
        }
      ],
      "name": "setOracleSpecificParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "singleSideValuation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "viewAmountInPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "viewPegAmountAndBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ebbc39f99fbae24a7c2c61ffdc14b1443f664ecc02d6d4c8a0c196ca7d3a191",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0xFac89EbFe7d0E09777f755B87293f74e5C600afE",
    "transactionIndex": 20,
    "gasUsed": "1607594",
    "logsBloom": "0x
    "blockHash": "0x91a2fa6ee3fc3bbe4e800e34798ac9cc043db527859bd351b38929200f87cae6",
    "transactionHash": "0x7ebbc39f99fbae24a7c2c61ffdc14b1443f664ecc02d6d4c8a0c196ca7d3a191",
    "logs": [],
    "blockNumber": 6659944,
    "cumulativeGasUsed": "5382448",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x70429C9357D150E3a9088f94b8D91d944106137B"
  ],
  "solcInputHash": "28c9fd7028c7235019505a3b598cc36a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"_listenForOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_oracleCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowablePer10ks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"singleSideToken\",\"type\":\"address\"}],\"name\":\"encodeAndCheckOracleParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"getAmountInPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"getPegAmountAndBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"newCurrentOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"name\":\"setBorrowable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setOracleParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"singleSideToken\",\"type\":\"address\"}],\"name\":\"setOracleSpecificParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"singleSideValuation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"viewAmountInPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"viewPegAmountAndBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/UniswapV2LPTOracle.sol\":\"UniswapV2LPTOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/OracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./oracles/OracleAware.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./roles/DependsOnOracleListener.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract OracleRegistry is RoleAware, DependsOracleListener {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    mapping(address => mapping(address => address)) public tokenOracle;\\n    mapping(address => mapping(address => EnumerableSet.AddressSet)) _listeners;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(ORACLE_REGISTRY);\\n    }\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        address oracle,\\n        uint256 borrowablePer10k,\\n        bytes calldata data\\n    ) external onlyOwnerExecActivator {\\n        tokenOracle[token][pegCurrency] = oracle;\\n        IOracle(oracle).setOracleParams(\\n            token,\\n            pegCurrency,\\n            borrowablePer10k,\\n            data\\n        );\\n    }\\n\\n    function listenForCurrentOracleUpdates(address token, address pegCurrency)\\n        external\\n    {\\n        require(isOracleListener(msg.sender), \\\"Not allowed to listen\\\");\\n        _listeners[token][pegCurrency].add(msg.sender);\\n        OracleAware(msg.sender).newCurrentOracle(token, pegCurrency);\\n    }\\n}\\n\",\"keccak256\":\"0x59041f3c52118ff8b2fbd314006956c830bd6edade5df461fefcca32cba86125\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\n\\nabstract contract TrancheIDAware is RoleAware, DependsOnTrancheIDService {\\n    uint256 immutable totalTrancheSlots;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        totalTrancheSlots = TrancheIDService(\\n            Roles(_roles).mainCharacters(TRANCHE_ID_SERVICE)\\n        ).totalTrancheSlots();\\n    }\\n\\n    mapping(uint256 => address) _slotTranches;\\n\\n    function tranche(uint256 trancheId) public view returns (address) {\\n        uint256 slot = trancheId % totalTrancheSlots;\\n        address trancheContract = _slotTranches[slot];\\n        if (trancheContract == address(0)) {\\n            trancheContract = trancheIdService().slotTranches(slot);\\n        }\\n\\n        return trancheContract;\\n    }\\n}\\n\",\"keccak256\":\"0x5bb76f49729b9c9f20e09c82bd52888c63eece2d947b81141b5c4dec4caf4fa6\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnTranche.sol\\\";\\n\\ncontract TrancheIDService is RoleAware, DependsOnTranche {\\n    uint256 public constant totalTrancheSlots = 1e8;\\n    uint256 public nextTrancheSlot = 1;\\n\\n    struct TrancheSlot {\\n        uint256 nextTrancheIdRange;\\n        uint256 trancheSlot;\\n    }\\n\\n    mapping(address => TrancheSlot) public trancheSlots;\\n    mapping(uint256 => address) public slotTranches;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function getNextTrancheId() external returns (uint256 id) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        TrancheSlot storage slot = trancheSlots[msg.sender];\\n        require(slot.trancheSlot != 0, \\\"Caller doesn't have a slot\\\");\\n        id = slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n        slot.nextTrancheIdRange++;\\n    }\\n\\n    function setupTrancheSlot() external returns (TrancheSlot memory) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        require(\\n            trancheSlots[msg.sender].trancheSlot == 0,\\n            \\\"Tranche already has a slot\\\"\\n        );\\n        trancheSlots[msg.sender] = TrancheSlot({\\n            nextTrancheIdRange: 1,\\n            trancheSlot: nextTrancheSlot\\n        });\\n        slotTranches[nextTrancheSlot] = msg.sender;\\n        nextTrancheSlot++;\\n        return trancheSlots[msg.sender];\\n    }\\n\\n    function viewNextTrancheId(address trancheContract)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheSlot storage slot = trancheSlots[trancheContract];\\n        return slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n    }\\n\\n    function viewTrancheContractByID(uint256 trancheId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return slotTranches[trancheId % totalTrancheSlots];\\n    }\\n\\n    function viewSlotByTrancheContract(address tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return trancheSlots[tranche].trancheSlot;\\n    }\\n}\\n\",\"keccak256\":\"0x2ff50771604993c3d0c405e26e33a054d55c7e5291e41993086c0c911a9d97fc\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/RoleAware.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\nabstract contract Oracle is IOracle, RoleAware, DependsOnOracleRegistry {\\n    mapping(address => uint256) public borrowablePer10ks;\\n\\n    function setBorrowable(address lpt, uint256 borrowablePer10k)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowablePer10ks[lpt] = borrowablePer10k;\\n    }\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        uint256 borrowablePer10k,\\n        bytes calldata data\\n    ) external override {\\n        require(\\n            address(oracleRegistry()) == msg.sender,\\n            \\\"Not authorized to init oracle\\\"\\n        );\\n        borrowablePer10ks[token] = borrowablePer10k;\\n        _setOracleParams(token, pegCurrency, data);\\n    }\\n\\n    function _setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        bytes calldata data\\n    ) internal virtual;\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view override returns (uint256, uint256) {\\n        return (\\n            viewAmountInPeg(token, inAmount, pegCurrency),\\n            borrowablePer10ks[token]\\n        );\\n    }\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external override returns (uint256, uint256) {\\n        return (\\n            getAmountInPeg(token, inAmount, pegCurrency),\\n            borrowablePer10ks[token]\\n        );\\n    }\\n\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view virtual override returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public virtual override returns (uint256);\\n}\\n\",\"keccak256\":\"0xd88a772499a26688ff4b707fe83703188e5354428d191ee03a44507ae933cc9d\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../TrancheIDAware.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\nabstract contract OracleAware is RoleAware, DependsOnOracleRegistry {\\n    mapping(address => mapping(address => address)) public _oracleCache;\\n\\n    constructor() {\\n        _rolesPlayed.push(ORACLE_LISTENER);\\n    }\\n\\n    function newCurrentOracle(address token, address pegCurrency) external {\\n        if (_oracleCache[token][pegCurrency] != address(0)) {\\n            // make sure we don't init cache without listening\\n            _oracleCache[token][pegCurrency] = oracleRegistry().tokenOracle(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    function _listenForOracle(address token, address pegCurrency)\\n        public\\n        returns (address oracle)\\n    {\\n        if (_oracleCache[token][pegCurrency] == address(0)) {\\n            oracleRegistry().listenForCurrentOracleUpdates(token, pegCurrency);\\n            oracle = oracleRegistry().tokenOracle(token, pegCurrency);\\n            _oracleCache[token][pegCurrency] = oracle;\\n        }\\n    }\\n\\n    function _viewValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        return IOracle(oracle).viewAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    function _getValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = _listenForOracle(token, valueCurrency);\\n        }\\n\\n        return IOracle(oracle).getAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    function _viewValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value, uint256 borrowablePer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        (value, borrowablePer10k) = IOracle(oracle).viewPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n\\n        require(borrowablePer10k > 0, \\\"Uninitialized borrowable per 10k\\\");\\n    }\\n\\n    function _getValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value, uint256 borrowablerPer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = _listenForOracle(token, valueCurrency);\\n        }\\n\\n        (value, borrowablerPer10k) = IOracle(oracle).getPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n\\n        require(borrowablerPer10k > 0, \\\"Uninitialized borrowable per 10k\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3f43392a8cd1fb540b3da7a87c4cd64b42851d3b74b971c882325395ef891339\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/TwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ncontract TwapOracle is Oracle {\\n    uint256 constant FP112 = 2**112;\\n    uint256 constant FP56 = 2**56;\\n\\n    struct TwapOracleState {\\n        address token0;\\n        address token1;\\n        uint256 cumulativePrice0;\\n        uint256 price0FP;\\n        uint256 lastUpdated;\\n    }\\n\\n    mapping(address => TwapOracleState) public pairState;\\n\\n    mapping(address => mapping(address => address)) public bestPairByTokens;\\n\\n    uint256 priceUpdateWindow = 5 minutes;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TWAP_ORACLE);\\n    }\\n\\n    function viewPairState(address pair)\\n        public\\n        view\\n        returns (TwapOracleState memory oracleState)\\n    {\\n        oracleState = pairState[pair];\\n\\n        (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\\n        uint256 timeDelta = pairLastUpdated - oracleState.lastUpdated;\\n\\n        if (timeDelta > priceUpdateWindow) {\\n            uint256 newCumul0 = IUniswapV2Pair(pair).price0CumulativeLast();\\n            oracleState.price0FP =\\n                (newCumul0 - oracleState.cumulativePrice0) /\\n                timeDelta;\\n            oracleState.cumulativePrice0 = newCumul0;\\n            oracleState.lastUpdated = pairLastUpdated;\\n        }\\n    }\\n\\n    function _getPairState(address pair)\\n        internal\\n        returns (TwapOracleState storage oracleState)\\n    {\\n        oracleState = pairState[pair];\\n\\n        (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\\n        uint256 timeDelta = pairLastUpdated - oracleState.lastUpdated;\\n\\n        if (timeDelta > priceUpdateWindow) {\\n            uint256 newCumul0 = IUniswapV2Pair(pair).price0CumulativeLast();\\n            oracleState.price0FP =\\n                (newCumul0 - oracleState.cumulativePrice0) /\\n                timeDelta;\\n            oracleState.cumulativePrice0 = newCumul0;\\n            oracleState.lastUpdated = pairLastUpdated;\\n        }\\n    }\\n\\n    function getPairState(address pair)\\n        external\\n        returns (TwapOracleState memory oracleState)\\n    {\\n        return _getPairState(pair);\\n    }\\n\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view virtual override returns (uint256) {\\n        (address token0, address token1) = sortTokens(token, pegCurrency);\\n        TwapOracleState memory oracleState = viewPairState(\\n            bestPairByTokens[token0][token1]\\n        );\\n        if (token == token0) {\\n            return (inAmount * oracleState.price0FP) / FP112;\\n        } else {\\n            return (inAmount * FP112) / oracleState.price0FP;\\n        }\\n    }\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public virtual override returns (uint256) {\\n        (address token0, address token1) = sortTokens(token, pegCurrency);\\n        TwapOracleState storage oracleState = _getPairState(\\n            bestPairByTokens[token0][token1]\\n        );\\n        if (token == token0) {\\n            return (inAmount * oracleState.price0FP) / FP112;\\n        } else {\\n            return (inAmount * FP112) / oracleState.price0FP;\\n        }\\n    }\\n\\n    function initPairState(address pair)\\n        public\\n        returns (TwapOracleState memory)\\n    {\\n        TwapOracleState storage oracleState = pairState[pair];\\n\\n        // To avoid sandwich attacks on this activation call getAmountInPeg once more\\n        // before releasing to public\\n        if (oracleState.token0 == address(0)) {\\n            IUniswapV2Pair uniPair = IUniswapV2Pair(pair);\\n\\n            (\\n                uint112 reserve0,\\n                uint112 reserve1,\\n                uint256 pairLastUpdated\\n            ) = uniPair.getReserves();\\n\\n            pairState[pair] = TwapOracleState({\\n                token0: uniPair.token0(),\\n                token1: uniPair.token1(),\\n                cumulativePrice0: uniPair.price0CumulativeLast(),\\n                price0FP: (FP112 * reserve1) / reserve0,\\n                lastUpdated: pairLastUpdated\\n            });\\n\\n            return pairState[pair];\\n        } else {\\n            return _getPairState(pair);\\n        }\\n    }\\n\\n    function setPriceUpdateWindow(uint256 window)\\n        external\\n        onlyOwnerExecDisabler\\n    {\\n        priceUpdateWindow = window;\\n    }\\n\\n    function getTwapReserves(address pair)\\n        external\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 res0,\\n            uint256 res1\\n        )\\n    {\\n        TwapOracleState storage oracleState = _getPairState(pair);\\n\\n        (res0, res1) = price0FP2Reserves(pair, oracleState.price0FP);\\n        token0 = oracleState.token0;\\n        token1 = oracleState.token1;\\n    }\\n\\n    function viewTwapReserves(address pair)\\n        external\\n        view\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 res0,\\n            uint256 res1\\n        )\\n    {\\n        TwapOracleState memory oracleState = viewPairState(pair);\\n\\n        (res0, res1) = price0FP2Reserves(pair, oracleState.price0FP);\\n        token0 = oracleState.token0;\\n        token1 = oracleState.token1;\\n    }\\n\\n    function price0FP2Reserves(address pair, uint256 price0FP)\\n        public\\n        view\\n        returns (uint256 res0, uint256 res1)\\n    {\\n        uint256 k = IUniswapV2Pair(pair).kLast();\\n\\n        res0 = sqrt(((k * FP56) / price0FP) * FP56);\\n        res1 = k / res0;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Identical address!\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address!\\\");\\n    }\\n\\n    function setOracleSpecificParams(\\n        address fromToken,\\n        address toToken,\\n        address pair,\\n        bool isBest\\n    ) external onlyOwnerExec {\\n        _setOracleSpecificParams(fromToken, toToken, pair, isBest);\\n    }\\n\\n    function _setOracleSpecificParams(\\n        address fromToken,\\n        address toToken,\\n        address pair,\\n        bool isBest\\n    ) internal {\\n        (address token0, address token1) = sortTokens(fromToken, toToken);\\n        require(\\n            IUniswapV2Pair(pair).token0() == token0 &&\\n                IUniswapV2Pair(pair).token1() == token1,\\n            \\\"Pair does not match tokens\\\"\\n        );\\n        initPairState(pair);\\n\\n        if (isBest) {\\n            bestPairByTokens[token0][token1] = pair;\\n        }\\n    }\\n\\n    function _setOracleParams(\\n        address fromToken,\\n        address toToken,\\n        bytes calldata data\\n    ) internal override {\\n        (address pair, bool isBest) = abi.decode(data, (address, bool));\\n        _setOracleSpecificParams(fromToken, toToken, pair, isBest);\\n    }\\n\\n    function encodeAndCheckOracleParams(\\n        address tokenFrom,\\n        address tokenTo,\\n        address pair,\\n        bool isBest\\n    ) external view returns (bool, bytes memory) {\\n        (address token0, address token1) = sortTokens(tokenFrom, tokenTo);\\n        TwapOracleState storage state = pairState[pair];\\n        bool matches = state.token0 == token0 && state.token1 == token1;\\n\\n        if (isBest) {\\n            matches = matches && bestPairByTokens[token0][token1] == pair;\\n        }\\n\\n        return (matches, abi.encode(pair, isBest));\\n    }\\n}\\n\",\"keccak256\":\"0xe5f8124c58c1bae742ecde0cf1148494ba3c78b7284d59ed67a53eaa6511b06e\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/UniswapV2LPTOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"./OracleAware.sol\\\";\\nimport \\\"./TwapOracle.sol\\\";\\nimport \\\"../roles/DependsOnTwapOracle.sol\\\";\\n\\ncontract UniswapV2LPTOracle is Oracle, OracleAware, DependsonTwapOracle {\\n    mapping(address => address) public singleSideValuation;\\n\\n    constructor(address _roles) RoleAware(_roles) {}\\n\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view override returns (uint256) {\\n        (\\n            address token0,\\n            address token1,\\n            uint256 reserve0,\\n            uint256 reserve1\\n        ) = twapOracle().viewTwapReserves(token);\\n\\n        address singleSideToken = singleSideValuation[token];\\n        uint256 totalResVal;\\n        if (singleSideToken == token0) {\\n            uint256 resVal0 = _viewValue(token0, reserve0, pegCurrency);\\n            totalResVal = resVal0 * 2;\\n        } else if (singleSideToken == token1) {\\n            uint256 resVal1 = _viewValue(token1, reserve1, pegCurrency);\\n            totalResVal = resVal1 * 2;\\n        } else {\\n            uint256 resVal0 = _viewValue(token0, reserve0, pegCurrency);\\n            uint256 resVal1 = _viewValue(token1, reserve1, pegCurrency);\\n            totalResVal = resVal0 + resVal1;\\n        }\\n        return (inAmount * totalResVal) / IUniswapV2Pair(token).totalSupply();\\n    }\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public override returns (uint256) {\\n        (\\n            address token0,\\n            address token1,\\n            uint256 reserve0,\\n            uint256 reserve1\\n        ) = twapOracle().getTwapReserves(token);\\n\\n        address singleSideToken = singleSideValuation[token];\\n        uint256 totalResVal;\\n        if (singleSideToken == token0) {\\n            uint256 resVal0 = _getValue(token0, reserve0, pegCurrency);\\n            totalResVal = resVal0 * 2;\\n        } else if (singleSideToken == token1) {\\n            uint256 resVal1 = _getValue(token1, reserve1, pegCurrency);\\n            totalResVal = resVal1 * 2;\\n        } else {\\n            uint256 resVal0 = _getValue(token0, reserve0, pegCurrency);\\n            uint256 resVal1 = _getValue(token1, reserve1, pegCurrency);\\n            totalResVal = resVal0 + resVal1;\\n        }\\n        return (inAmount * totalResVal) / IUniswapV2Pair(token).totalSupply();\\n    }\\n\\n    function setOracleSpecificParams(\\n        address token,\\n        address pegCurrency,\\n        address singleSideToken\\n    ) external onlyOwnerExec {\\n        _setOracleSpecificParams(token, pegCurrency, singleSideToken);\\n    }\\n\\n    function _setOracleSpecificParams(\\n        address token,\\n        address pegCurrency,\\n        address singleSideToken\\n    ) internal {\\n        TwapOracle.TwapOracleState memory pairState = twapOracle()\\n            .initPairState(token);\\n\\n        require(\\n            singleSideToken == pairState.token0 ||\\n                singleSideToken == pairState.token1 ||\\n                singleSideToken == address(0),\\n            \\\"Not a valid single side token\\\"\\n        );\\n        if (singleSideToken != pairState.token0) {\\n            require(\\n                _getValue(pairState.token1, 1e18, pegCurrency) > 0,\\n                \\\"Constituent oracle for token1 not set up\\\"\\n            );\\n        }\\n        if (singleSideToken != pairState.token1) {\\n            require(\\n                _getValue(pairState.token0, 1e18, pegCurrency) > 0,\\n                \\\"Constituent oracle for token0 not set up\\\"\\n            );\\n        }\\n        singleSideValuation[token] = singleSideToken;\\n    }\\n\\n    function _setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        bytes calldata data\\n    ) internal override {\\n        address singleSideToken = abi.decode(data, (address));\\n        _setOracleSpecificParams(token, pegCurrency, singleSideToken);\\n    }\\n\\n    function encodeAndCheckOracleParams(\\n        address token,\\n        address,\\n        address singleSideToken\\n    ) external view returns (bool, bytes memory) {\\n        TwapOracle.TwapOracleState memory pairState = twapOracle()\\n            .viewPairState(token);\\n        bool matches = pairState.token0 != address(0) &&\\n            singleSideValuation[token] == singleSideToken;\\n\\n        return (matches, abi.encode(singleSideToken));\\n    }\\n}\\n\",\"keccak256\":\"0x3814f1a9928a6705cb25d60e65322ffeaf65916d26b070b0dbb984024eb986c6\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xe60ca0ee32e5ddbb66bf65cd9358f7cd5bcee3de9e78c8427e8fe58a7d5d94e4\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleListener.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOracleListener is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(ORACLE_LISTENER);\\n    }\\n\\n    function isOracleListener(address contr) internal view returns (bool) {\\n        return roleCache[contr][ORACLE_LISTENER];\\n    }\\n}\\n\",\"keccak256\":\"0x12ae03a26b336364f75b3e9f720808e9685e7e18d52d71b4f7e166a0cce87540\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\n\\nabstract contract DependsOnOracleRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(ORACLE_REGISTRY);\\n    }\\n\\n    function oracleRegistry() internal view returns (OracleRegistry) {\\n        return OracleRegistry(mainCharacterCache[ORACLE_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xfbac5de676c7a5e178c70f897c70e366c39de56fe07c830ca8733a2ff1ebcfd3\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnTranche is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(TRANCHE);\\n    }\\n\\n    function isTranche(address contr) internal view returns (bool) {\\n        return roleCache[contr][TRANCHE];\\n    }\\n}\\n\",\"keccak256\":\"0x6e67b0afd0d3fc00998b226343fef13aeca167d19eb8cec8b8a55ebf96063962\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../TrancheIDService.sol\\\";\\n\\nabstract contract DependsOnTrancheIDService is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function trancheIdService() internal view returns (TrancheIDService) {\\n        return TrancheIDService(mainCharacterCache[TRANCHE_ID_SERVICE]);\\n    }\\n}\\n\",\"keccak256\":\"0x88e728c6f64f4e84351f9eaa921bfca6f3dc22b58d433d8077a844edb9bd93c1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../oracles/TwapOracle.sol\\\";\\n\\nabstract contract DependsonTwapOracle is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(TWAP_ORACLE);\\n    }\\n\\n    function twapOracle() internal view returns (TwapOracle) {\\n        return TwapOracle(mainCharacterCache[TWAP_ORACLE]);\\n    }\\n}\\n\",\"keccak256\":\"0xe3531667ae4aca30fd9d855d2443a6633aaf29524764ffbac0d56134a9838971\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.getRole(ACTIVATOR, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x51333b30c6d7814d5f8cbd86fef19cde8732cda16c96f4e2e069d659e89a6dc4\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant LIQUIDATOR = 5;\\n\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x46e286203c6188b0ed8c67d09a1158acb2dcd5b931ba51e7d6f980fcc8b42714\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256);\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256, uint256);\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256, uint256);\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        uint256 borrowable,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// TODO: compatible with NFTs\\n\",\"keccak256\":\"0x58b453d894b93c6fbd184ebfb39c3fda3f89843c38a6d84fcb5d2f75cbc243d8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611b90380380611b9083398101604081905261002f91610120565b806001600160a01b0381166100955760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b031916608052506002805460018082018355606a7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace928301556005805480830190915560047f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db09091015582549081018355600092909252606c91015561014e565b600060208284031215610131578081fd5b81516001600160a01b0381168114610147578182fd5b9392505050565b60805160601c611a086101886000396000818161023f01528181610461015281816106ca01528181610ff001526110880152611a086000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063885fa056116100de578063aeb38d8b11610097578063d9d4afe111610071578063d9d4afe1146103ff578063dc94cb7d14610412578063e8ea4fae1461041a578063e9c3f77d146104225761018e565b8063aeb38d8b146103c6578063bf184ea4146103d9578063cb9aa425146103ec5761018e565b8063885fa05614610330578063891ea1aa146103435780638b0b2b92146103565780638eaab58c1461037f578063a4870df214610392578063abcbc4fc146103b35761018e565b8063447d52ba1161014b578063576cbc3011610125578063576cbc30146102c45780636caa9c11146102d75780637a1a04df146102ea5780637dad209b146103285761018e565b8063447d52ba146102745780634a7a7f41146102875780634fcd54a41461029c5761018e565b8063071060a61461019357806315c2ba50146101a85780632642b606146101db57806328f3fc7314610227578063392f5f641461023a5780633cf685d614610261575b600080fd5b6101a66101a1366004611858565b61044b565b005b6101c86101b63660046115a8565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b61020f6101e93660046115e7565b60076020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b6101a66102353660046115e7565b610511565b61020f7f000000000000000000000000000000000000000000000000000000000000000081565b6101a661026f36600461174a565b61060a565b6101a6610282366004611888565b6106a4565b61028f61077c565b6040516101d291906118ac565b6102af6102aa366004611775565b6107d4565b604080519283526020830191909152016101d2565b6101c86102d2366004611775565b610806565b6101c86102e5366004611858565b6109ce565b6103186102f836600461174a565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101d2565b61028f6109ef565b6102af61033e366004611775565b610a45565b6101a6610351366004611669565b610a53565b61020f6103643660046115a8565b6008602052600090815260409020546001600160a01b031681565b6101c861038d366004611775565b610ae0565b6103a56103a036600461161f565b610bed565b6040516101d29291906118f0565b6101c86103c1366004611858565b610ce5565b6101c86103d4366004611858565b610cf5565b6101c86103e7366004611858565b610d05565b6101a66103fa36600461161f565b610d15565b61020f61040d3660046115e7565b610d9e565b61028f610f08565b61028f610f5e565b61020f610430366004611858565b6000602081905290815260409020546001600160a01b031681565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156104ab57600080fd5b505afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e391906115cb565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0382811660009081526007602090815260408083208585168452909152902054161561060657610546610fb4565b60405163179ce80d60e21b81526001600160a01b03848116600483015283811660248301529190911690635e73a0349060440160206040518083038186803b15801561059157600080fd5b505afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c991906115cb565b6001600160a01b0383811660009081526007602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b33610613610fec565b6001600160a01b0316148061063757503361062c611084565b6001600160a01b0316145b6106885760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572000060448201526064015b60405180910390fd5b6001600160a01b03909116600090815260066020526040902055565b6040516393552a3d60e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074491906117ab565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b606060038054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020905b8154815260200190600101908083116107b6575b5050505050905090565b6000806107e2858585610ae0565b6001600160a01b039590951660009081526006602052604090205494959350505050565b60008060008060006108166110f5565b60405163727a86f160e11b81526001600160a01b038a81166004830152919091169063e4f50de290602401608060405180830381600087803b15801561085b57600080fd5b505af115801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190611703565b6001600160a01b03808d1660009081526008602052604081205495995093975091955093509182169186168214156108e75760006108d287868b61112d565b90506108df816002611985565b91505061093b565b846001600160a01b0316826001600160a01b0316141561090e5760006108d286858b61112d565b600061091b87868b61112d565b9050600061092a87868c61112d565b9050610936818361194d565b925050505b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561097457600080fd5b505afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190611870565b6109b6828b611985565b6109c09190611965565b9a9950505050505050505050565b600581815481106109de57600080fd5b600091825260209091200154905081565b606060048054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020908154815260200190600101908083116107b6575050505050905090565b6000806107e2858585610806565b33610a5c610fb4565b6001600160a01b031614610ab25760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420617574686f72697a656420746f20696e6974206f7261636c65000000604482015260640161067f565b6001600160a01b0385166000908152600660205260409020839055610ad9858584846111fc565b5050505050565b6000806000806000610af06110f5565b60405163423437fb60e11b81526001600160a01b038a8116600483015291909116906384686ff69060240160806040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b9190611703565b6001600160a01b03808d166000908152600860205260408120549599509397509195509350918216918616821415610baa5760006108d287868b611217565b846001600160a01b0316826001600160a01b03161415610bd15760006108d286858b611217565b6000610bde87868b611217565b9050600061092a87868c611217565b600060606000610bfb6110f5565b604051620b57c760e21b81526001600160a01b0388811660048301529190911690622d5f1c9060240160a06040518083038186803b158015610c3c57600080fd5b505afa158015610c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7491906117cb565b80519091506000906001600160a01b031615801590610caf57506001600160a01b038781166000908152600860205260409020548116908616145b604080516001600160a01b0388166020820152919250829101604051602081830303815290604052935093505050935093915050565b600281815481106109de57600080fd5b600481815481106109de57600080fd5b600381815481106109de57600080fd5b33610d1e610fec565b6001600160a01b03161480610d42575033610d37611084565b6001600160a01b0316145b610d8e5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e65720000604482015260640161067f565b610d99838383611338565b505050565b6001600160a01b0382811660009081526007602090815260408083208585168452909152812054909116610f0257610dd4610fb4565b6040516302eaec2d60e31b81526001600160a01b03858116600483015284811660248301529190911690631757616890604401600060405180830381600087803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b50505050610e41610fb4565b60405163179ce80d60e21b81526001600160a01b03858116600483015284811660248301529190911690635e73a0349060440160206040518083038186803b158015610e8c57600080fd5b505afa158015610ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec491906115cb565b6001600160a01b0384811660009081526007602090815260408083208785168452909152902080546001600160a01b03191691831691909117905590505b92915050565b606060028054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020908154815260200190600101908083116107b6575050505050905090565b606060058054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020908154815260200190600101908083116107b6575050505050905090565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104757600080fd5b505afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f91906115cb565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156110e157600080fd5b505af115801561105b573d6000803e3d6000fd5b606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc92546001600160a01b031690565b6001600160a01b038084166000908152600760209081526040808320858516845290915281205490911680611169576111668584610d9e565b90505b604051630576cbc360e41b81526001600160a01b03868116600483015260248201869052848116604483015282169063576cbc3090606401602060405180830381600087803b1580156111bb57600080fd5b505af11580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f39190611870565b95945050505050565b600061120a828401846115a8565b9050610ad9858583611338565b6001600160a01b0380841660009081526007602090815260408083208585168452909152812054909116806112d45761124e610fb4565b60405163179ce80d60e21b81526001600160a01b03878116600483015285811660248301529190911690635e73a0349060440160206040518083038186803b15801561129957600080fd5b505afa1580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d191906115cb565b90505b6040516323aaad6360e21b81526001600160a01b038681166004830152602482018690528481166044830152821690638eaab58c9060640160206040518083038186803b15801561132457600080fd5b505afa1580156111cf573d6000803e3d6000fd5b60006113426110f5565b60405163ef6eeded60e01b81526001600160a01b038681166004830152919091169063ef6eeded9060240160a060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf91906117cb565b905080600001516001600160a01b0316826001600160a01b031614806113fa575080602001516001600160a01b0316826001600160a01b0316145b8061140c57506001600160a01b038216155b6114585760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420612076616c69642073696e676c65207369646520746f6b656e000000604482015260640161067f565b80516001600160a01b038381169116146114e35760006114858260200151670de0b6b3a76400008661112d565b116114e35760405162461bcd60e51b815260206004820152602860248201527f436f6e7374697475656e74206f7261636c6520666f7220746f6b656e31206e6f604482015267074207365742075760c41b606482015260840161067f565b80602001516001600160a01b0316826001600160a01b0316146115775760006115198260000151670de0b6b3a76400008661112d565b116115775760405162461bcd60e51b815260206004820152602860248201527f436f6e7374697475656e74206f7261636c6520666f7220746f6b656e30206e6f604482015267074207365742075760c41b606482015260840161067f565b506001600160a01b03928316600090815260086020526040902080546001600160a01b031916919093161790915550565b6000602082840312156115b9578081fd5b81356115c4816119ba565b9392505050565b6000602082840312156115dc578081fd5b81516115c4816119ba565b600080604083850312156115f9578081fd5b8235611604816119ba565b91506020830135611614816119ba565b809150509250929050565b600080600060608486031215611633578081fd5b833561163e816119ba565b9250602084013561164e816119ba565b9150604084013561165e816119ba565b809150509250925092565b600080600080600060808688031215611680578081fd5b853561168b816119ba565b9450602086013561169b816119ba565b935060408601359250606086013567ffffffffffffffff808211156116be578283fd5b818801915088601f8301126116d1578283fd5b8135818111156116df578384fd5b8960208285010111156116f0578384fd5b9699959850939650602001949392505050565b60008060008060808587031215611718578384fd5b8451611723816119ba565b6020860151909450611734816119ba565b6040860151606090960151949790965092505050565b6000806040838503121561175c578182fd5b8235611767816119ba565b946020939093013593505050565b600080600060608486031215611789578283fd5b8335611794816119ba565b925060208401359150604084013561165e816119ba565b6000602082840312156117bc578081fd5b815180151581146115c4578182fd5b600060a082840312156117dc578081fd5b60405160a0810181811067ffffffffffffffff8211171561180b57634e487b7160e01b83526041600452602483fd5b6040528251611819816119ba565b81526020830151611829816119ba565b806020830152506040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215611869578081fd5b5035919050565b600060208284031215611881578081fd5b5051919050565b6000806040838503121561189a578182fd5b823591506020830135611614816119ba565b6020808252825182820181905260009190848201906040850190845b818110156118e4578351835292840192918401916001016118c8565b50909695505050505050565b6000831515825260206040818401528351806040850152825b8181101561192557858101830151858201606001528201611909565b818111156119365783606083870101525b50601f01601f191692909201606001949350505050565b60008219821115611960576119606119a4565b500190565b60008261198057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561199f5761199f6119a4565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146119cf57600080fd5b5056fea26469706673582212207e4080d61e18ae7fa80667b6f951c3d0e9fddcfc974d071f4a02caad9c56aa1364736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063885fa056116100de578063aeb38d8b11610097578063d9d4afe111610071578063d9d4afe1146103ff578063dc94cb7d14610412578063e8ea4fae1461041a578063e9c3f77d146104225761018e565b8063aeb38d8b146103c6578063bf184ea4146103d9578063cb9aa425146103ec5761018e565b8063885fa05614610330578063891ea1aa146103435780638b0b2b92146103565780638eaab58c1461037f578063a4870df214610392578063abcbc4fc146103b35761018e565b8063447d52ba1161014b578063576cbc3011610125578063576cbc30146102c45780636caa9c11146102d75780637a1a04df146102ea5780637dad209b146103285761018e565b8063447d52ba146102745780634a7a7f41146102875780634fcd54a41461029c5761018e565b8063071060a61461019357806315c2ba50146101a85780632642b606146101db57806328f3fc7314610227578063392f5f641461023a5780633cf685d614610261575b600080fd5b6101a66101a1366004611858565b61044b565b005b6101c86101b63660046115a8565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b61020f6101e93660046115e7565b60076020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b6101a66102353660046115e7565b610511565b61020f7f000000000000000000000000000000000000000000000000000000000000000081565b6101a661026f36600461174a565b61060a565b6101a6610282366004611888565b6106a4565b61028f61077c565b6040516101d291906118ac565b6102af6102aa366004611775565b6107d4565b604080519283526020830191909152016101d2565b6101c86102d2366004611775565b610806565b6101c86102e5366004611858565b6109ce565b6103186102f836600461174a565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101d2565b61028f6109ef565b6102af61033e366004611775565b610a45565b6101a6610351366004611669565b610a53565b61020f6103643660046115a8565b6008602052600090815260409020546001600160a01b031681565b6101c861038d366004611775565b610ae0565b6103a56103a036600461161f565b610bed565b6040516101d29291906118f0565b6101c86103c1366004611858565b610ce5565b6101c86103d4366004611858565b610cf5565b6101c86103e7366004611858565b610d05565b6101a66103fa36600461161f565b610d15565b61020f61040d3660046115e7565b610d9e565b61028f610f08565b61028f610f5e565b61020f610430366004611858565b6000602081905290815260409020546001600160a01b031681565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156104ab57600080fd5b505afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e391906115cb565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0382811660009081526007602090815260408083208585168452909152902054161561060657610546610fb4565b60405163179ce80d60e21b81526001600160a01b03848116600483015283811660248301529190911690635e73a0349060440160206040518083038186803b15801561059157600080fd5b505afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c991906115cb565b6001600160a01b0383811660009081526007602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b33610613610fec565b6001600160a01b0316148061063757503361062c611084565b6001600160a01b0316145b6106885760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572000060448201526064015b60405180910390fd5b6001600160a01b03909116600090815260066020526040902055565b6040516393552a3d60e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074491906117ab565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b606060038054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020905b8154815260200190600101908083116107b6575b5050505050905090565b6000806107e2858585610ae0565b6001600160a01b039590951660009081526006602052604090205494959350505050565b60008060008060006108166110f5565b60405163727a86f160e11b81526001600160a01b038a81166004830152919091169063e4f50de290602401608060405180830381600087803b15801561085b57600080fd5b505af115801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190611703565b6001600160a01b03808d1660009081526008602052604081205495995093975091955093509182169186168214156108e75760006108d287868b61112d565b90506108df816002611985565b91505061093b565b846001600160a01b0316826001600160a01b0316141561090e5760006108d286858b61112d565b600061091b87868b61112d565b9050600061092a87868c61112d565b9050610936818361194d565b925050505b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561097457600080fd5b505afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190611870565b6109b6828b611985565b6109c09190611965565b9a9950505050505050505050565b600581815481106109de57600080fd5b600091825260209091200154905081565b606060048054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020908154815260200190600101908083116107b6575050505050905090565b6000806107e2858585610806565b33610a5c610fb4565b6001600160a01b031614610ab25760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420617574686f72697a656420746f20696e6974206f7261636c65000000604482015260640161067f565b6001600160a01b0385166000908152600660205260409020839055610ad9858584846111fc565b5050505050565b6000806000806000610af06110f5565b60405163423437fb60e11b81526001600160a01b038a8116600483015291909116906384686ff69060240160806040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b9190611703565b6001600160a01b03808d166000908152600860205260408120549599509397509195509350918216918616821415610baa5760006108d287868b611217565b846001600160a01b0316826001600160a01b03161415610bd15760006108d286858b611217565b6000610bde87868b611217565b9050600061092a87868c611217565b600060606000610bfb6110f5565b604051620b57c760e21b81526001600160a01b0388811660048301529190911690622d5f1c9060240160a06040518083038186803b158015610c3c57600080fd5b505afa158015610c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7491906117cb565b80519091506000906001600160a01b031615801590610caf57506001600160a01b038781166000908152600860205260409020548116908616145b604080516001600160a01b0388166020820152919250829101604051602081830303815290604052935093505050935093915050565b600281815481106109de57600080fd5b600481815481106109de57600080fd5b600381815481106109de57600080fd5b33610d1e610fec565b6001600160a01b03161480610d42575033610d37611084565b6001600160a01b0316145b610d8e5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e65720000604482015260640161067f565b610d99838383611338565b505050565b6001600160a01b0382811660009081526007602090815260408083208585168452909152812054909116610f0257610dd4610fb4565b6040516302eaec2d60e31b81526001600160a01b03858116600483015284811660248301529190911690631757616890604401600060405180830381600087803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b50505050610e41610fb4565b60405163179ce80d60e21b81526001600160a01b03858116600483015284811660248301529190911690635e73a0349060440160206040518083038186803b158015610e8c57600080fd5b505afa158015610ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec491906115cb565b6001600160a01b0384811660009081526007602090815260408083208785168452909152902080546001600160a01b03191691831691909117905590505b92915050565b606060028054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020908154815260200190600101908083116107b6575050505050905090565b606060058054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020908154815260200190600101908083116107b6575050505050905090565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104757600080fd5b505afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f91906115cb565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156110e157600080fd5b505af115801561105b573d6000803e3d6000fd5b606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc92546001600160a01b031690565b6001600160a01b038084166000908152600760209081526040808320858516845290915281205490911680611169576111668584610d9e565b90505b604051630576cbc360e41b81526001600160a01b03868116600483015260248201869052848116604483015282169063576cbc3090606401602060405180830381600087803b1580156111bb57600080fd5b505af11580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f39190611870565b95945050505050565b600061120a828401846115a8565b9050610ad9858583611338565b6001600160a01b0380841660009081526007602090815260408083208585168452909152812054909116806112d45761124e610fb4565b60405163179ce80d60e21b81526001600160a01b03878116600483015285811660248301529190911690635e73a0349060440160206040518083038186803b15801561129957600080fd5b505afa1580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d191906115cb565b90505b6040516323aaad6360e21b81526001600160a01b038681166004830152602482018690528481166044830152821690638eaab58c9060640160206040518083038186803b15801561132457600080fd5b505afa1580156111cf573d6000803e3d6000fd5b60006113426110f5565b60405163ef6eeded60e01b81526001600160a01b038681166004830152919091169063ef6eeded9060240160a060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf91906117cb565b905080600001516001600160a01b0316826001600160a01b031614806113fa575080602001516001600160a01b0316826001600160a01b0316145b8061140c57506001600160a01b038216155b6114585760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420612076616c69642073696e676c65207369646520746f6b656e000000604482015260640161067f565b80516001600160a01b038381169116146114e35760006114858260200151670de0b6b3a76400008661112d565b116114e35760405162461bcd60e51b815260206004820152602860248201527f436f6e7374697475656e74206f7261636c6520666f7220746f6b656e31206e6f604482015267074207365742075760c41b606482015260840161067f565b80602001516001600160a01b0316826001600160a01b0316146115775760006115198260000151670de0b6b3a76400008661112d565b116115775760405162461bcd60e51b815260206004820152602860248201527f436f6e7374697475656e74206f7261636c6520666f7220746f6b656e30206e6f604482015267074207365742075760c41b606482015260840161067f565b506001600160a01b03928316600090815260086020526040902080546001600160a01b031916919093161790915550565b6000602082840312156115b9578081fd5b81356115c4816119ba565b9392505050565b6000602082840312156115dc578081fd5b81516115c4816119ba565b600080604083850312156115f9578081fd5b8235611604816119ba565b91506020830135611614816119ba565b809150509250929050565b600080600060608486031215611633578081fd5b833561163e816119ba565b9250602084013561164e816119ba565b9150604084013561165e816119ba565b809150509250925092565b600080600080600060808688031215611680578081fd5b853561168b816119ba565b9450602086013561169b816119ba565b935060408601359250606086013567ffffffffffffffff808211156116be578283fd5b818801915088601f8301126116d1578283fd5b8135818111156116df578384fd5b8960208285010111156116f0578384fd5b9699959850939650602001949392505050565b60008060008060808587031215611718578384fd5b8451611723816119ba565b6020860151909450611734816119ba565b6040860151606090960151949790965092505050565b6000806040838503121561175c578182fd5b8235611767816119ba565b946020939093013593505050565b600080600060608486031215611789578283fd5b8335611794816119ba565b925060208401359150604084013561165e816119ba565b6000602082840312156117bc578081fd5b815180151581146115c4578182fd5b600060a082840312156117dc578081fd5b60405160a0810181811067ffffffffffffffff8211171561180b57634e487b7160e01b83526041600452602483fd5b6040528251611819816119ba565b81526020830151611829816119ba565b806020830152506040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215611869578081fd5b5035919050565b600060208284031215611881578081fd5b5051919050565b6000806040838503121561189a578182fd5b823591506020830135611614816119ba565b6020808252825182820181905260009190848201906040850190845b818110156118e4578351835292840192918401916001016118c8565b50909695505050505050565b6000831515825260206040818401528351806040850152825b8181101561192557858101830151858201606001528201611909565b818111156119365783606083870101525b50601f01601f191692909201606001949350505050565b60008219821115611960576119606119a4565b500190565b60008261198057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561199f5761199f6119a4565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146119cf57600080fd5b5056fea26469706673582212207e4080d61e18ae7fa80667b6f951c3d0e9fddcfc974d071f4a02caad9c56aa1364736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14106,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 14112,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 14115,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14118,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14121,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14124,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12047,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "borrowablePer10ks",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12200,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_oracleCache",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 13651,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "singleSideValuation",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}