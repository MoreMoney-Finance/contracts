{
  "address": "0x4839A360D370117ef3558D56f2c76f479a47457c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_oracleCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowablePer10ks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "singleSideToken",
          "type": "address"
        }
      ],
      "name": "encodeAndCheckOracleParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "getAmountInPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "getPegAmountAndBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "newCurrentOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpt",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "name": "setBorrowable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setOracleParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "singleSideToken",
          "type": "address"
        }
      ],
      "name": "setOracleSpecificParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "singleSideValuation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "viewAmountInPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "viewPegAmountAndBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1384e45a9992fee49cf9a99b419b1848c9626b3337598efe44eba92ca1673fd",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x4839A360D370117ef3558D56f2c76f479a47457c",
    "transactionIndex": 2,
    "gasUsed": "1576864",
    "logsBloom": "0x
    "blockHash": "0x7c32e90b35840c79e473761d3e38be2d803524afbc156dfefdd6efb8bf6a7c1b",
    "transactionHash": "0xe1384e45a9992fee49cf9a99b419b1848c9626b3337598efe44eba92ca1673fd",
    "logs": [],
    "blockNumber": 7701530,
    "cumulativeGasUsed": "1668036",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x218861760D5560bF7dd41488642cf857C4F27388"
  ],
  "solcInputHash": "db0fa14b887431f79499ee725feab18f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_oracleCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowablePer10ks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"singleSideToken\",\"type\":\"address\"}],\"name\":\"encodeAndCheckOracleParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"getAmountInPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"getPegAmountAndBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"newCurrentOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"name\":\"setBorrowable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setOracleParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"singleSideToken\",\"type\":\"address\"}],\"name\":\"setOracleSpecificParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"singleSideValuation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"viewAmountInPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"viewPegAmountAndBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"charactersPlayed()\":{\"details\":\"returns all characters played by this contract (e.g. stable coin, oracle registry)\"},\"dependsOnCharacters()\":{\"details\":\"returns all the character dependencies like FEE_RECIPIENT\"},\"dependsOnRoles()\":{\"details\":\"returns all the roles dependencies of this contract like FUND_TRANSFERER\"},\"rolesPlayed()\":{\"details\":\"returns all roles played by this contract\"},\"updateMainCharacterCache(uint256)\":{\"details\":\"Updates the main character cache for a speciic character\"},\"updateRoleCache(uint256,address)\":{\"details\":\"Updates the role cache for a specific role and address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndCheckOracleParams(address,address,address)\":{\"notice\":\"Encode params for initialization\"},\"getAmountInPeg(address,uint256,address)\":{\"notice\":\"Get value of LPT via its reserves\"},\"newCurrentOracle(address,address)\":{\"notice\":\"Notify contract to update oracle cache\"},\"setOracleSpecificParams(address,address,address)\":{\"notice\":\"Set single side token (if any)\"},\"viewAmountInPeg(address,uint256,address)\":{\"notice\":\"View value of LPT via its reserves\"}},\"notice\":\"Calculates value of LPT based on the reserves they represent, via the Value of their twap-tracked reserves\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/UniswapV2LPTOracle.sol\":\"UniswapV2LPTOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xfac19be5f0d198ac556731a5589a4ae1c0c1622437d0b6b53b2cf3f317071acd\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/OracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./oracles/OracleAware.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./roles/DependsOnOracleListener.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\n/// Central hub and router for all oracles\\ncontract OracleRegistry is RoleAware, DependsOracleListener {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    mapping(address => mapping(address => address)) public tokenOracle;\\n    mapping(address => mapping(address => EnumerableSet.AddressSet))\\n        internal _listeners;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(ORACLE_REGISTRY);\\n    }\\n\\n    /// Initialize oracle for a specific token\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        address oracle,\\n        uint256 borrowablePer10k,\\n        bool primary,\\n        bytes calldata data\\n    ) external onlyOwnerExecActivator {\\n        IOracle(oracle).setOracleParams(\\n            token,\\n            pegCurrency,\\n            borrowablePer10k,\\n            data\\n        );\\n\\n        // only overwrite oracle and update listeners if update is for a primary\\n        // or there is no pre-existing oracle\\n        address previousOracle = tokenOracle[token][pegCurrency];\\n        if (previousOracle == address(0) || primary) {\\n            tokenOracle[token][pegCurrency] = oracle;\\n\\n            EnumerableSet.AddressSet storage listeners = _listeners[token][\\n                pegCurrency\\n            ];\\n            for (uint256 i; listeners.length() > i; i++) {\\n                OracleAware(listeners.at(i)).newCurrentOracle(\\n                    token,\\n                    pegCurrency\\n                );\\n            }\\n        }\\n    }\\n\\n    /// Which oracle contract is currently responsible for a token is cached\\n    /// This updates\\n    function listenForCurrentOracleUpdates(address token, address pegCurrency)\\n        external\\n        returns (address)\\n    {\\n        require(isOracleListener(msg.sender), \\\"Not allowed to listen\\\");\\n        _listeners[token][pegCurrency].add(msg.sender);\\n        return tokenOracle[token][pegCurrency];\\n    }\\n\\n    /// View converted value in currently registered oracle\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view returns (uint256) {\\n        return\\n            IOracle(tokenOracle[token][pegCurrency]).viewAmountInPeg(\\n                token,\\n                inAmount,\\n                pegCurrency\\n            );\\n    }\\n\\n    /// View amounts for an array of tokens\\n    function viewAmountsInPeg(\\n        address[] calldata tokens,\\n        uint256[] calldata inAmounts,\\n        address pegCurrency\\n    ) external view returns (uint256[] memory) {\\n        uint256[] memory result = new uint256[](inAmounts.length);\\n        for (uint256 i; inAmounts.length > i; i++) {\\n            result[i] = viewAmountInPeg(tokens[i], inAmounts[i], pegCurrency);\\n        }\\n        return result;\\n    }\\n\\n    /// Update converted value in currently registered oracle\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public returns (uint256) {\\n        return\\n            IOracle(tokenOracle[token][pegCurrency]).getAmountInPeg(\\n                token,\\n                inAmount,\\n                pegCurrency\\n            );\\n    }\\n\\n    /// Get amounts for an array of tokens\\n    function getAmountsInPeg(\\n        address[] calldata tokens,\\n        uint256[] calldata inAmounts,\\n        address pegCurrency\\n    ) external returns (uint256[] memory) {\\n        uint256[] memory result = new uint256[](inAmounts.length);\\n        for (uint256 i; inAmounts.length > i; i++) {\\n            result[i] = getAmountInPeg(tokens[i], inAmounts[i], pegCurrency);\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x522539fe3bfce909e1d52a2f4b4aca852c0cc2efd99febcacea0f89398ae71c9\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\n\\nabstract contract TrancheIDAware is RoleAware, DependsOnTrancheIDService {\\n    uint256 immutable totalTrancheSlots;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        totalTrancheSlots = TrancheIDService(\\n            Roles(_roles).mainCharacters(TRANCHE_ID_SERVICE)\\n        ).totalTrancheSlots();\\n    }\\n\\n    mapping(uint256 => address) _slotTranches;\\n\\n    function tranche(uint256 trancheId) public view returns (address) {\\n        uint256 slot = trancheId % totalTrancheSlots;\\n        address trancheContract = _slotTranches[slot];\\n        if (trancheContract == address(0)) {\\n            trancheContract = trancheIdService().slotTranches(slot);\\n        }\\n\\n        return trancheContract;\\n    }\\n}\\n\",\"keccak256\":\"0x5bb76f49729b9c9f20e09c82bd52888c63eece2d947b81141b5c4dec4caf4fa6\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnTranche.sol\\\";\\n\\ncontract TrancheIDService is RoleAware, DependsOnTranche {\\n    uint256 public constant totalTrancheSlots = 1e8;\\n    uint256 public nextTrancheSlot = 1;\\n\\n    struct TrancheSlot {\\n        uint256 nextTrancheIdRange;\\n        uint256 trancheSlot;\\n    }\\n\\n    mapping(address => TrancheSlot) public trancheSlots;\\n    mapping(uint256 => address) public slotTranches;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function getNextTrancheId() external returns (uint256 id) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        TrancheSlot storage slot = trancheSlots[msg.sender];\\n        require(slot.trancheSlot != 0, \\\"Caller doesn't have a slot\\\");\\n        id = slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n        slot.nextTrancheIdRange++;\\n    }\\n\\n    function setupTrancheSlot() external returns (TrancheSlot memory) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        require(\\n            trancheSlots[msg.sender].trancheSlot == 0,\\n            \\\"Tranche already has a slot\\\"\\n        );\\n        trancheSlots[msg.sender] = TrancheSlot({\\n            nextTrancheIdRange: 1,\\n            trancheSlot: nextTrancheSlot\\n        });\\n        slotTranches[nextTrancheSlot] = msg.sender;\\n        nextTrancheSlot++;\\n        return trancheSlots[msg.sender];\\n    }\\n\\n    function viewNextTrancheId(address trancheContract)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheSlot storage slot = trancheSlots[trancheContract];\\n        return slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n    }\\n\\n    function viewTrancheContractByID(uint256 trancheId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return slotTranches[trancheId % totalTrancheSlots];\\n    }\\n\\n    function viewSlotByTrancheContract(address tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return trancheSlots[tranche].trancheSlot;\\n    }\\n}\\n\",\"keccak256\":\"0x2ff50771604993c3d0c405e26e33a054d55c7e5291e41993086c0c911a9d97fc\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/RoleAware.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\n/// Abstract base for oracles, concerned with parameter init\\nabstract contract Oracle is IOracle, RoleAware, DependsOnOracleRegistry {\\n    mapping(address => uint256) public borrowablePer10ks;\\n\\n    function setBorrowable(address lpt, uint256 borrowablePer10k)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowablePer10ks[lpt] = borrowablePer10k;\\n    }\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        uint256 borrowablePer10k,\\n        bytes calldata data\\n    ) external override {\\n        require(\\n            address(oracleRegistry()) == msg.sender,\\n            \\\"Not authorized to init oracle\\\"\\n        );\\n        borrowablePer10ks[token] = borrowablePer10k;\\n        _setOracleParams(token, pegCurrency, data);\\n    }\\n\\n    function _setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        bytes calldata data\\n    ) internal virtual;\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view override returns (uint256, uint256) {\\n        return (\\n            viewAmountInPeg(token, inAmount, pegCurrency),\\n            borrowablePer10ks[token]\\n        );\\n    }\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external override returns (uint256, uint256) {\\n        return (\\n            getAmountInPeg(token, inAmount, pegCurrency),\\n            borrowablePer10ks[token]\\n        );\\n    }\\n\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view virtual override returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public virtual override returns (uint256);\\n}\\n\",\"keccak256\":\"0xc18add11b2262cb295d51d3c283a4847bfb5395f55c21351d56a4a6907994a91\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../TrancheIDAware.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\n/// Mixin for contracts that depend on oracles, caches current oracles\\n/// resposible for a token pair\\nabstract contract OracleAware is RoleAware, DependsOnOracleRegistry {\\n    mapping(address => mapping(address => address)) public _oracleCache;\\n\\n    constructor() {\\n        _rolesPlayed.push(ORACLE_LISTENER);\\n    }\\n\\n    /// Notify contract to update oracle cache\\n    function newCurrentOracle(address token, address pegCurrency) external {\\n        // make sure we don't init cache if we aren't listening\\n        if (_oracleCache[token][pegCurrency] != address(0)) {\\n            _oracleCache[token][pegCurrency] = oracleRegistry().tokenOracle(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    /// get current oracle and subscribe to cache updates if necessary\\n    function _getOracle(address token, address pegCurrency)\\n        internal\\n        returns (address oracle)\\n    {\\n        oracle = _oracleCache[token][pegCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().listenForCurrentOracleUpdates(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    /// View value of a token amount in value currency\\n    function _viewValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        return IOracle(oracle).viewAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    /// Get value of a token amount in value currency, updating oracle state\\n    function _getValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        oracle = _getOracle(token, valueCurrency);\\n\\n        return IOracle(oracle).getAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    /// View value and borrowable together\\n    function _viewValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value, uint256 borrowablePer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        (value, borrowablePer10k) = IOracle(oracle).viewPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n    }\\n\\n    /// Retrieve value (updating oracle) as well as borrowable per 10k\\n    function _getValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value, uint256 borrowablerPer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        oracle = _getOracle(token, valueCurrency);\\n\\n        (value, borrowablerPer10k) = IOracle(oracle).getPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x34395fbb11f56a47045262f0e9d4b5a21c698a10311e0a201ad200875057dde0\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/TwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\n/// Use UniswapV2-compatible pairs to kepp up a twap oracle\\n/// In all this one must be careful of staleness\\ncontract TwapOracle is Oracle {\\n    uint256 constant FP112 = 2**112;\\n    uint256 constant FP56 = 2**56;\\n\\n    struct TwapOracleState {\\n        address token0;\\n        address token1;\\n        uint256 cumulativePrice0;\\n        uint256 price0FP;\\n        uint256 lastUpdated;\\n        uint256 kLast;\\n        uint256 totalSupplyLast;\\n        uint256 kCurrent;\\n        uint256 totalSupplyCurrent;\\n    }\\n\\n    mapping(address => TwapOracleState) public pairState;\\n\\n    mapping(address => mapping(address => address)) public bestPairByTokens;\\n\\n    uint256 priceUpdateWindow = 5 minutes;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TWAP_ORACLE);\\n    }\\n\\n    /// View TwapOracleState of pair\\n    function viewPairState(address pair)\\n        public\\n        view\\n        returns (TwapOracleState memory oracleState)\\n    {\\n        oracleState = pairState[pair];\\n\\n        (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\\n        uint256 timeDelta = pairLastUpdated - oracleState.lastUpdated;\\n\\n        if (timeDelta > priceUpdateWindow) {\\n            uint256 newCumul0 = IUniswapV2Pair(pair).price0CumulativeLast();\\n            oracleState.price0FP =\\n                (newCumul0 - oracleState.cumulativePrice0) /\\n                timeDelta;\\n            oracleState.cumulativePrice0 = newCumul0;\\n            oracleState.lastUpdated = pairLastUpdated;\\n\\n            oracleState.kLast = oracleState.kCurrent;\\n            oracleState.totalSupplyLast = oracleState.totalSupplyCurrent;\\n            oracleState.kCurrent = IUniswapV2Pair(pair).kLast();\\n            oracleState.totalSupplyCurrent = IUniswapV2Pair(pair).totalSupply();\\n        }\\n    }\\n\\n    /// Retrieve TwapOracleState of pair, updating\\n    function _getPairState(address pair)\\n        internal\\n        returns (TwapOracleState storage oracleState)\\n    {\\n        oracleState = pairState[pair];\\n\\n        (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\\n        uint256 timeDelta = pairLastUpdated - oracleState.lastUpdated;\\n\\n        if (timeDelta > priceUpdateWindow) {\\n            uint256 newCumul0 = IUniswapV2Pair(pair).price0CumulativeLast();\\n            oracleState.price0FP =\\n                (newCumul0 - oracleState.cumulativePrice0) /\\n                timeDelta;\\n            oracleState.cumulativePrice0 = newCumul0;\\n            oracleState.lastUpdated = pairLastUpdated;\\n\\n            oracleState.kLast = oracleState.kCurrent;\\n            oracleState.totalSupplyLast = oracleState.totalSupplyCurrent;\\n            oracleState.kCurrent = IUniswapV2Pair(pair).kLast();\\n            oracleState.totalSupplyCurrent = IUniswapV2Pair(pair).totalSupply();\\n        }\\n    }\\n\\n    /// Retrieve TwapOracleState of pair, updating\\n    function getPairState(address pair)\\n        external\\n        returns (TwapOracleState memory oracleState)\\n    {\\n        return _getPairState(pair);\\n    }\\n\\n    /// View amount in peg via twap price\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view virtual override returns (uint256) {\\n        (address token0, address token1) = sortTokens(token, pegCurrency);\\n        TwapOracleState memory oracleState = viewPairState(\\n            bestPairByTokens[token0][token1]\\n        );\\n        if (token == token0) {\\n            return (inAmount * oracleState.price0FP) / FP112;\\n        } else {\\n            return (inAmount * FP112) / oracleState.price0FP;\\n        }\\n    }\\n\\n    /// Update twap price and get corresponding peg amount\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public virtual override returns (uint256) {\\n        (address token0, address token1) = sortTokens(token, pegCurrency);\\n        TwapOracleState storage oracleState = _getPairState(\\n            bestPairByTokens[token0][token1]\\n        );\\n        if (token == token0) {\\n            return (inAmount * oracleState.price0FP) / FP112;\\n        } else {\\n            return (inAmount * FP112) / oracleState.price0FP;\\n        }\\n    }\\n\\n    /// Init price via reserves\\n    function initPairState(address pair)\\n        public\\n        returns (TwapOracleState memory)\\n    {\\n        TwapOracleState storage oracleState = pairState[pair];\\n\\n        // To avoid sandwich attacks on this activation call getAmountInPeg once more\\n        // before releasing to public\\n        if (oracleState.token0 == address(0)) {\\n            IUniswapV2Pair uniPair = IUniswapV2Pair(pair);\\n\\n            (\\n                uint112 reserve0,\\n                uint112 reserve1,\\n                uint256 pairLastUpdated\\n            ) = uniPair.getReserves();\\n\\n            uint256 kLast = uniPair.kLast();\\n            uint256 totalSupply = uniPair.totalSupply();\\n            pairState[pair] = TwapOracleState({\\n                token0: uniPair.token0(),\\n                token1: uniPair.token1(),\\n                cumulativePrice0: uniPair.price0CumulativeLast(),\\n                price0FP: (FP112 * reserve1) / reserve0,\\n                lastUpdated: pairLastUpdated,\\n                kLast: kLast,\\n                kCurrent: kLast,\\n                totalSupplyLast: totalSupply,\\n                totalSupplyCurrent: totalSupply\\n            });\\n\\n            return pairState[pair];\\n        } else {\\n            return _getPairState(pair);\\n        }\\n    }\\n\\n    /// Time window after which price is updated\\n    function setPriceUpdateWindow(uint256 window)\\n        external\\n        onlyOwnerExecDisabler\\n    {\\n        priceUpdateWindow = window;\\n    }\\n\\n    /// Update reserves of a pair in a time weighted manner\\n    function getTwapReserves(address pair)\\n        external\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 res0,\\n            uint256 res1,\\n            uint256 kLast,\\n            uint256 totalSupplyLast\\n        )\\n    {\\n        TwapOracleState storage oracleState = _getPairState(pair);\\n\\n        (res0, res1) = price0FP2Reserves(\\n            oracleState.kLast,\\n            oracleState.price0FP\\n        );\\n        token0 = oracleState.token0;\\n        token1 = oracleState.token1;\\n\\n        kLast = oracleState.kLast;\\n        totalSupplyLast = oracleState.totalSupplyLast;\\n    }\\n\\n    /// view reserves of a pair in a time weighted manner\\n    function viewTwapReserves(address pair)\\n        external\\n        view\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 res0,\\n            uint256 res1,\\n            uint256 kLast,\\n            uint256 totalSupplyLast\\n        )\\n    {\\n        TwapOracleState memory oracleState = viewPairState(pair);\\n\\n        (res0, res1) = price0FP2Reserves(\\n            oracleState.kLast,\\n            oracleState.price0FP\\n        );\\n        token0 = oracleState.token0;\\n        token1 = oracleState.token1;\\n\\n        kLast = oracleState.kLast;\\n        totalSupplyLast = oracleState.totalSupplyLast;\\n    }\\n\\n    /// Convert price to reserves\\n    function price0FP2Reserves(uint256 k, uint256 price0FP)\\n        public\\n        pure\\n        returns (uint256 res0, uint256 res1)\\n    {\\n        // price0FP ~= FP112 * res1 / res0 and k = res1 * res0\\n        // => k * price0FP = FP112 * res1 / res0 * res1 * res0\\n        // => k * price0FP / FP112 = res1^2\\n        // => res0 = sqrt(k * price1FP / FP112) and price1FP = FP112 * 1 / (price0FP / FP112)\\n        // => res0 = sqrt(k * FP112 / price0FP)\\n        if (k > price0FP) {\\n            res0 = sqrt((((k * FP56) / price0FP) * FP56));\\n        } else {\\n            // for small k scale up completely first\\n            res0 = sqrt((k * FP112) / price0FP);\\n        }\\n        res1 = k / res0;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n\\n    /// returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Identical address!\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address!\\\");\\n    }\\n\\n    /// Set up oracle based on a pair and whether we prefer this one\\n    function setOracleSpecificParams(\\n        address fromToken,\\n        address toToken,\\n        address pair,\\n        bool isBest\\n    ) external onlyOwnerExec {\\n        _setOracleSpecificParams(fromToken, toToken, pair, isBest);\\n    }\\n\\n    /// Set up pair, initializing pair state\\n    /// Note: vulnerable to sandwich attack if lending starts immediately\\n    function _setOracleSpecificParams(\\n        address fromToken,\\n        address toToken,\\n        address pair,\\n        bool isBest\\n    ) internal {\\n        (address token0, address token1) = sortTokens(fromToken, toToken);\\n        require(\\n            IUniswapV2Pair(pair).token0() == token0 &&\\n                IUniswapV2Pair(pair).token1() == token1,\\n            \\\"Pair does not match tokens\\\"\\n        );\\n        initPairState(pair);\\n\\n        if (isBest) {\\n            bestPairByTokens[token0][token1] = pair;\\n        }\\n    }\\n\\n    /// Set up the pair for a twap oracle\\n    function _setOracleParams(\\n        address fromToken,\\n        address toToken,\\n        bytes calldata data\\n    ) internal override {\\n        (address pair, bool isBest) = abi.decode(data, (address, bool));\\n        _setOracleSpecificParams(fromToken, toToken, pair, isBest);\\n    }\\n\\n    /// Encode params for initialization\\n    function encodeAndCheckOracleParams(\\n        address tokenFrom,\\n        address tokenTo,\\n        address pair,\\n        bool isBest\\n    ) external view returns (bool, bytes memory) {\\n        (address token0, address token1) = sortTokens(tokenFrom, tokenTo);\\n        TwapOracleState storage state = pairState[pair];\\n        bool matches = state.token0 == token0 && state.token1 == token1;\\n\\n        if (isBest) {\\n            matches = matches && bestPairByTokens[token0][token1] == pair;\\n        }\\n\\n        return (matches, abi.encode(pair, isBest));\\n    }\\n}\\n\",\"keccak256\":\"0xd6ad5f0619b5038cebf1ddc4df2356d77708540bae4a4cce47caa4822d09b087\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/UniswapV2LPTOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"./OracleAware.sol\\\";\\nimport \\\"./TwapOracle.sol\\\";\\nimport \\\"../roles/DependsOnTwapOracle.sol\\\";\\n\\n/// Calculates value of LPT based on the reserves they represent, via the\\n/// Value of their twap-tracked reserves\\ncontract UniswapV2LPTOracle is Oracle, OracleAware, DependsonTwapOracle {\\n    mapping(address => address) public singleSideValuation;\\n\\n    constructor(address _roles) RoleAware(_roles) {}\\n\\n    /// View value of LPT via its reserves\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view override returns (uint256) {\\n        (\\n            address token0,\\n            address token1,\\n            uint256 reserve0,\\n            uint256 reserve1,\\n            ,\\n            uint256 totalSupplyLast\\n        ) = twapOracle().viewTwapReserves(token);\\n\\n        address singleSideToken = singleSideValuation[token];\\n        uint256 totalResVal;\\n        if (singleSideToken == token0) {\\n            uint256 resVal0 = _viewValue(token0, reserve0, pegCurrency);\\n            totalResVal = resVal0 * 2;\\n        } else if (singleSideToken == token1) {\\n            uint256 resVal1 = _viewValue(token1, reserve1, pegCurrency);\\n            totalResVal = resVal1 * 2;\\n        } else {\\n            uint256 resVal0 = _viewValue(token0, reserve0, pegCurrency);\\n            uint256 resVal1 = _viewValue(token1, reserve1, pegCurrency);\\n            totalResVal = resVal0 + resVal1;\\n        }\\n        return (inAmount * totalResVal) / totalSupplyLast;\\n    }\\n\\n    /// Get value of LPT via its reserves\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public override returns (uint256) {\\n        (\\n            address token0,\\n            address token1,\\n            uint256 reserve0,\\n            uint256 reserve1,\\n            ,\\n            uint256 totalSupplyLast\\n        ) = twapOracle().getTwapReserves(token);\\n\\n        address singleSideToken = singleSideValuation[token];\\n        uint256 totalResVal;\\n        if (singleSideToken == token0) {\\n            uint256 resVal0 = _getValue(token0, reserve0, pegCurrency);\\n            totalResVal = resVal0 * 2;\\n        } else if (singleSideToken == token1) {\\n            uint256 resVal1 = _getValue(token1, reserve1, pegCurrency);\\n            totalResVal = resVal1 * 2;\\n        } else {\\n            uint256 resVal0 = _getValue(token0, reserve0, pegCurrency);\\n            uint256 resVal1 = _getValue(token1, reserve1, pegCurrency);\\n            totalResVal = resVal0 + resVal1;\\n        }\\n        return (inAmount * totalResVal) / totalSupplyLast;\\n    }\\n\\n    /// Set single side token (if any)\\n    function setOracleSpecificParams(\\n        address token,\\n        address pegCurrency,\\n        address singleSideToken\\n    ) external onlyOwnerExec {\\n        _setOracleSpecificParams(token, pegCurrency, singleSideToken);\\n    }\\n\\n    /// Set single side token (if any)\\n    function _setOracleSpecificParams(\\n        address token,\\n        address pegCurrency,\\n        address singleSideToken\\n    ) internal {\\n        TwapOracle.TwapOracleState memory pairState = twapOracle()\\n            .initPairState(token);\\n\\n        require(\\n            singleSideToken == pairState.token0 ||\\n                singleSideToken == pairState.token1 ||\\n                singleSideToken == address(0),\\n            \\\"Not a valid single side token\\\"\\n        );\\n        if (singleSideToken != pairState.token0) {\\n            require(\\n                _getValue(pairState.token1, 1e18, pegCurrency) > 0,\\n                \\\"Constituent oracle for token1 not set up\\\"\\n            );\\n        }\\n        if (singleSideToken != pairState.token1) {\\n            require(\\n                _getValue(pairState.token0, 1e18, pegCurrency) > 0,\\n                \\\"Constituent oracle for token0 not set up\\\"\\n            );\\n        }\\n        singleSideValuation[token] = singleSideToken;\\n    }\\n\\n    /// Set single side token (if any)\\n    function _setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        bytes calldata data\\n    ) internal override {\\n        address singleSideToken = abi.decode(data, (address));\\n        _setOracleSpecificParams(token, pegCurrency, singleSideToken);\\n    }\\n\\n    /// Encode params for initialization\\n    function encodeAndCheckOracleParams(\\n        address token,\\n        address,\\n        address singleSideToken\\n    ) external view returns (bool, bytes memory) {\\n        TwapOracle.TwapOracleState memory pairState = twapOracle()\\n            .viewPairState(token);\\n        bool matches = pairState.token0 != address(0) &&\\n            singleSideValuation[token] == singleSideToken;\\n\\n        return (matches, abi.encode(singleSideToken));\\n    }\\n}\\n\",\"keccak256\":\"0x05f0c5c2b72ca02e139ea1b239e7eb0336c1b30dbec9829a3f8ebbcc4324f689\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title DependentContract.\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    /// @dev returns all characters played by this contract (e.g. stable coin, oracle registry)\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    /// @dev returns all roles played by this contract\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    /// @dev returns all the character dependencies like FEE_RECIPIENT\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    /// @dev returns all the roles dependencies of this contract like FUND_TRANSFERER\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xaea783afd230965aa519d2cc53f26a44f3f507b8d2089b8092c09caf35bd0d81\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleListener.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOracleListener is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(ORACLE_LISTENER);\\n    }\\n\\n    function isOracleListener(address contr) internal view returns (bool) {\\n        return roleCache[contr][ORACLE_LISTENER];\\n    }\\n}\\n\",\"keccak256\":\"0x12ae03a26b336364f75b3e9f720808e9685e7e18d52d71b4f7e166a0cce87540\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\n\\nabstract contract DependsOnOracleRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(ORACLE_REGISTRY);\\n    }\\n\\n    function oracleRegistry() internal view returns (OracleRegistry) {\\n        return OracleRegistry(mainCharacterCache[ORACLE_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xfbac5de676c7a5e178c70f897c70e366c39de56fe07c830ca8733a2ff1ebcfd3\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnTranche is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(TRANCHE);\\n    }\\n\\n    function isTranche(address contr) internal view returns (bool) {\\n        return roleCache[contr][TRANCHE];\\n    }\\n}\\n\",\"keccak256\":\"0x6e67b0afd0d3fc00998b226343fef13aeca167d19eb8cec8b8a55ebf96063962\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../TrancheIDService.sol\\\";\\n\\nabstract contract DependsOnTrancheIDService is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function trancheIdService() internal view returns (TrancheIDService) {\\n        return TrancheIDService(mainCharacterCache[TRANCHE_ID_SERVICE]);\\n    }\\n}\\n\",\"keccak256\":\"0x88e728c6f64f4e84351f9eaa921bfca6f3dc22b58d433d8077a844edb9bd93c1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../oracles/TwapOracle.sol\\\";\\n\\nabstract contract DependsonTwapOracle is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(TWAP_ORACLE);\\n    }\\n\\n    function twapOracle() internal view returns (TwapOracle) {\\n        return TwapOracle(mainCharacterCache[TWAP_ORACLE]);\\n    }\\n}\\n\",\"keccak256\":\"0xe3531667ae4aca30fd9d855d2443a6633aaf29524764ffbac0d56134a9838971\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Roles: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or disabler\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or activator\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Updates the role cache for a specific role and address\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.roles(contr, role);\\n    }\\n\\n    /// @dev Updates the main character cache for a speciic character\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    /// @dev returns the owner's address\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    /// @dev returns the executor address\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    /// @dev returns the disabler address\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    /// @dev checks whether the passed address is activator or not\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.roles(contr, ACTIVATOR);\\n    }\\n}\\n\",\"keccak256\":\"0xf4bbc653872c7a3f3f32c7864bede7bcc80cfaccf1bf4e36355972233a13a65c\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant LIQUIDATOR = 5;\\nuint256 constant UNDERWATER_LIQUIDATOR = 6;\\n\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev assign role to an account\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    /// @dev revoke role of a particular account\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    /// @dev set main character\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    /// @dev returns the current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xde2ea7721cd144736303e9ca0293b822d5294b8ca5390fd4e03050fed9a1cde2\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256);\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256, uint256);\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256, uint256);\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        uint256 borrowable,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// TODO: compatible with NFTs\\n\",\"keccak256\":\"0x58b453d894b93c6fbd184ebfb39c3fda3f89843c38a6d84fcb5d2f75cbc243d8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611b02380380611b0283398101604081905261002f91610120565b806001600160a01b0381166100955760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b031916608052506002805460018082018355606a7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace928301556005805480830190915560047f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db09091015582549081018355600092909252606c91015561014e565b600060208284031215610131578081fd5b81516001600160a01b0381168114610147578182fd5b9392505050565b60805160601c61197a61018860003960008181610224015281816104330152818161067001528181610df40152610e8c015261197a6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637dad209b116100de578063abcbc4fc11610097578063cb9aa42511610071578063cb9aa425146103d1578063dc94cb7d146103e4578063e8ea4fae146103ec578063e9c3f77d146103f457610173565b8063abcbc4fc14610398578063aeb38d8b146103ab578063bf184ea4146103be57610173565b80637dad209b1461030d578063885fa05614610315578063891ea1aa146103285780638b0b2b921461033b5780638eaab58c14610364578063a4870df21461037757610173565b8063447d52ba11610130578063447d52ba146102595780634a7a7f411461026c5780634fcd54a414610281578063576cbc30146102a95780636caa9c11146102bc5780637a1a04df146102cf57610173565b8063071060a61461017857806315c2ba501461018d5780632642b606146101c057806328f3fc731461020c578063392f5f641461021f5780633cf685d614610246575b600080fd5b61018b610186366004611741565b61041d565b005b6101ad61019b36600461147c565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b6101f46101ce3660046114bb565b60076020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b0390911681526020016101b7565b61018b61021a3660046114bb565b6104e3565b6101f47f000000000000000000000000000000000000000000000000000000000000000081565b61018b610254366004611634565b6105dc565b61018b610267366004611771565b61064a565b610274610722565b6040516101b79190611795565b61029461028f36600461165f565b61077a565b604080519283526020830191909152016101b7565b6101ad6102b736600461165f565b6107ac565b6101ad6102ca366004611741565b610938565b6102fd6102dd366004611634565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101b7565b610274610959565b61029461032336600461165f565b6109af565b61018b61033636600461153d565b6109bd565b6101f461034936600461147c565b6008602052600090815260409020546001600160a01b031681565b6101ad61037236600461165f565b610a4a565b61038a6103853660046114f3565b610b8a565b6040516101b79291906117d9565b6101ad6103a6366004611741565b610c83565b6101ad6103b9366004611741565b610c93565b6101ad6103cc366004611741565b610ca3565b61018b6103df3660046114f3565b610cb3565b610274610d0c565b610274610d62565b6101f4610402366004611741565b6000602081905290815260409020546001600160a01b031681565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561047d57600080fd5b505afa158015610491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b5919061149f565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b038281166000908152600760209081526040808320858516845290915290205416156105d857610518610db8565b60405163179ce80d60e21b81526001600160a01b03848116600483015283811660248301529190911690635e73a0349060440160206040518083038186803b15801561056357600080fd5b505afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b919061149f565b6001600160a01b0383811660009081526007602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b336105e5610df0565b6001600160a01b031614806106095750336105fe610e88565b6001600160a01b0316145b61062e5760405162461bcd60e51b815260040161062590611836565b60405180910390fd5b6001600160a01b03909116600090815260066020526040902055565b60405163f0723d9760e01b81526001600160a01b038281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f0723d979060440160206040518083038186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea9190611695565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b6060600380548060200260200160405190810160405280929190818152602001828054801561077057602002820191906000526020600020905b81548152602001906001019080831161075c575b5050505050905090565b600080610788858585610a4a565b6001600160a01b039590951660009081526006602052604090205494959350505050565b6000806000806000806107bd610ef9565b60405163727a86f160e11b81526001600160a01b038b81166004830152919091169063e4f50de29060240160c060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a91906115d7565b95505094509450945094506000600860008b6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031690506000866001600160a01b0316826001600160a01b031614156108c05760006108ab88878c610f31565b90506108b88160026118f7565b915050610914565b856001600160a01b0316826001600160a01b031614156108e75760006108ab87868c610f31565b60006108f488878c610f31565b9050600061090388878d610f31565b905061090f81836118bf565b925050505b8261091f828c6118f7565b61092991906118d7565b9b9a5050505050505050505050565b6005818154811061094857600080fd5b600091825260209091200154905081565b60606004805480602002602001604051908101604052809291908181526020018280548015610770576020028201919060005260206000209081548152602001906001019080831161075c575050505050905090565b6000806107888585856107ac565b336109c6610db8565b6001600160a01b031614610a1c5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420617574686f72697a656420746f20696e6974206f7261636c650000006044820152606401610625565b6001600160a01b0385166000908152600660205260409020839055610a4385858484610ffc565b5050505050565b600080600080600080610a5b610ef9565b60405163423437fb60e11b81526001600160a01b038b8116600483015291909116906384686ff69060240160c06040518083038186803b158015610a9e57600080fd5b505afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad691906115d7565b95505094509450945094506000600860008b6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031690506000866001600160a01b0316826001600160a01b03161415610b475760006108ab88878c611017565b856001600160a01b0316826001600160a01b03161415610b6e5760006108ab87868c611017565b6000610b7b88878c611017565b9050600061090388878d611017565b600060606000610b98610ef9565b604051620b57c760e21b81526001600160a01b0388811660048301529190911690622d5f1c906024016101206040518083038186803b158015610bda57600080fd5b505afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1291906116b5565b80519091506000906001600160a01b031615801590610c4d57506001600160a01b038781166000908152600860205260409020548116908616145b604080516001600160a01b0388166020820152919250829101604051602081830303815290604052935093505050935093915050565b6002818154811061094857600080fd5b6004818154811061094857600080fd5b6003818154811061094857600080fd5b33610cbc610df0565b6001600160a01b03161480610ce0575033610cd5610e88565b6001600160a01b0316145b610cfc5760405162461bcd60e51b815260040161062590611836565b610d07838383611138565b505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610770576020028201919060005260206000209081548152602001906001019080831161075c575050505050905090565b60606005805480602002602001604051908101604052809291908181526020018280548015610770576020028201919060005260206000209081548152602001906001019080831161075c575050505050905090565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e83919061149f565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ee557600080fd5b505af1158015610e5f573d6000803e3d6000fd5b606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc92546001600160a01b031690565b6001600160a01b0380841660009081526007602090815260408083208585168452909152812054909116610f6585846113a9565b604051630576cbc360e41b81526001600160a01b0387811660048301526024820187905285811660448301529192509082169063576cbc3090606401602060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff39190611759565b95945050505050565b600061100a8284018461147c565b9050610a43858583611138565b6001600160a01b0380841660009081526007602090815260408083208585168452909152812054909116806110d45761104e610db8565b60405163179ce80d60e21b81526001600160a01b03878116600483015285811660248301529190911690635e73a0349060440160206040518083038186803b15801561109957600080fd5b505afa1580156110ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d1919061149f565b90505b6040516323aaad6360e21b81526001600160a01b038681166004830152602482018690528481166044830152821690638eaab58c9060640160206040518083038186803b15801561112457600080fd5b505afa158015610fcf573d6000803e3d6000fd5b6000611142610ef9565b60405163ef6eeded60e01b81526001600160a01b038681166004830152919091169063ef6eeded9060240161012060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c091906116b5565b905080600001516001600160a01b0316826001600160a01b031614806111fb575080602001516001600160a01b0316826001600160a01b0316145b8061120d57506001600160a01b038216155b6112595760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420612076616c69642073696e676c65207369646520746f6b656e0000006044820152606401610625565b80516001600160a01b038381169116146112e45760006112868260200151670de0b6b3a764000086610f31565b116112e45760405162461bcd60e51b815260206004820152602860248201527f436f6e7374697475656e74206f7261636c6520666f7220746f6b656e31206e6f604482015267074207365742075760c41b6064820152608401610625565b80602001516001600160a01b0316826001600160a01b03161461137857600061131a8260000151670de0b6b3a764000086610f31565b116113785760405162461bcd60e51b815260206004820152602860248201527f436f6e7374697475656e74206f7261636c6520666f7220746f6b656e30206e6f604482015267074207365742075760c41b6064820152608401610625565b506001600160a01b03928316600090815260086020526040902080546001600160a01b031916919093161790915550565b6001600160a01b03808316600090815260076020908152604080832085851684529091529020541680611466576113de610db8565b6040516302eaec2d60e31b81526001600160a01b03858116600483015284811660248301529190911690631757616890604401602060405180830381600087803b15801561142b57600080fd5b505af115801561143f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611463919061149f565b90505b92915050565b80516114778161192c565b919050565b60006020828403121561148d578081fd5b81356114988161192c565b9392505050565b6000602082840312156114b0578081fd5b81516114988161192c565b600080604083850312156114cd578081fd5b82356114d88161192c565b915060208301356114e88161192c565b809150509250929050565b600080600060608486031215611507578081fd5b83356115128161192c565b925060208401356115228161192c565b915060408401356115328161192c565b809150509250925092565b600080600080600060808688031215611554578081fd5b853561155f8161192c565b9450602086013561156f8161192c565b935060408601359250606086013567ffffffffffffffff80821115611592578283fd5b818801915088601f8301126115a5578283fd5b8135818111156115b3578384fd5b8960208285010111156115c4578384fd5b9699959850939650602001949392505050565b60008060008060008060c087890312156115ef578081fd5b86516115fa8161192c565b602088015190965061160b8161192c565b6040880151606089015160808a015160a0909a0151989b929a5090989097909650945092505050565b60008060408385031215611646578182fd5b82356116518161192c565b946020939093013593505050565b600080600060608486031215611673578283fd5b833561167e8161192c565b92506020840135915060408401356115328161192c565b6000602082840312156116a6578081fd5b81518015158114611498578182fd5b60006101208083850312156116c8578182fd5b6116d181611880565b90506116dc8361146c565b81526116ea6020840161146c565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b600060208284031215611752578081fd5b5035919050565b60006020828403121561176a578081fd5b5051919050565b60008060408385031215611783578182fd5b8235915060208301356114e88161192c565b6020808252825182820181905260009190848201906040850190845b818110156117cd578351835292840192918401916001016117b1565b50909695505050505050565b6000831515825260206040818401528351806040850152825b8181101561180e578581018301518582016060015282016117f2565b8181111561181f5783606083870101525b50601f01601f191692909201606001949350505050565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156118b757634e487b7160e01b600052604160045260246000fd5b604052919050565b600082198211156118d2576118d2611916565b500190565b6000826118f257634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561191157611911611916565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461194157600080fd5b5056fea2646970667358221220bd7168d8a041cc34a280a5c14fe623c1e67580f7590ae63f4cfafddae704483564736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80637dad209b116100de578063abcbc4fc11610097578063cb9aa42511610071578063cb9aa425146103d1578063dc94cb7d146103e4578063e8ea4fae146103ec578063e9c3f77d146103f457610173565b8063abcbc4fc14610398578063aeb38d8b146103ab578063bf184ea4146103be57610173565b80637dad209b1461030d578063885fa05614610315578063891ea1aa146103285780638b0b2b921461033b5780638eaab58c14610364578063a4870df21461037757610173565b8063447d52ba11610130578063447d52ba146102595780634a7a7f411461026c5780634fcd54a414610281578063576cbc30146102a95780636caa9c11146102bc5780637a1a04df146102cf57610173565b8063071060a61461017857806315c2ba501461018d5780632642b606146101c057806328f3fc731461020c578063392f5f641461021f5780633cf685d614610246575b600080fd5b61018b610186366004611741565b61041d565b005b6101ad61019b36600461147c565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b6101f46101ce3660046114bb565b60076020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b0390911681526020016101b7565b61018b61021a3660046114bb565b6104e3565b6101f47f000000000000000000000000000000000000000000000000000000000000000081565b61018b610254366004611634565b6105dc565b61018b610267366004611771565b61064a565b610274610722565b6040516101b79190611795565b61029461028f36600461165f565b61077a565b604080519283526020830191909152016101b7565b6101ad6102b736600461165f565b6107ac565b6101ad6102ca366004611741565b610938565b6102fd6102dd366004611634565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101b7565b610274610959565b61029461032336600461165f565b6109af565b61018b61033636600461153d565b6109bd565b6101f461034936600461147c565b6008602052600090815260409020546001600160a01b031681565b6101ad61037236600461165f565b610a4a565b61038a6103853660046114f3565b610b8a565b6040516101b79291906117d9565b6101ad6103a6366004611741565b610c83565b6101ad6103b9366004611741565b610c93565b6101ad6103cc366004611741565b610ca3565b61018b6103df3660046114f3565b610cb3565b610274610d0c565b610274610d62565b6101f4610402366004611741565b6000602081905290815260409020546001600160a01b031681565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561047d57600080fd5b505afa158015610491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b5919061149f565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b038281166000908152600760209081526040808320858516845290915290205416156105d857610518610db8565b60405163179ce80d60e21b81526001600160a01b03848116600483015283811660248301529190911690635e73a0349060440160206040518083038186803b15801561056357600080fd5b505afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b919061149f565b6001600160a01b0383811660009081526007602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b336105e5610df0565b6001600160a01b031614806106095750336105fe610e88565b6001600160a01b0316145b61062e5760405162461bcd60e51b815260040161062590611836565b60405180910390fd5b6001600160a01b03909116600090815260066020526040902055565b60405163f0723d9760e01b81526001600160a01b038281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f0723d979060440160206040518083038186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea9190611695565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b6060600380548060200260200160405190810160405280929190818152602001828054801561077057602002820191906000526020600020905b81548152602001906001019080831161075c575b5050505050905090565b600080610788858585610a4a565b6001600160a01b039590951660009081526006602052604090205494959350505050565b6000806000806000806107bd610ef9565b60405163727a86f160e11b81526001600160a01b038b81166004830152919091169063e4f50de29060240160c060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a91906115d7565b95505094509450945094506000600860008b6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031690506000866001600160a01b0316826001600160a01b031614156108c05760006108ab88878c610f31565b90506108b88160026118f7565b915050610914565b856001600160a01b0316826001600160a01b031614156108e75760006108ab87868c610f31565b60006108f488878c610f31565b9050600061090388878d610f31565b905061090f81836118bf565b925050505b8261091f828c6118f7565b61092991906118d7565b9b9a5050505050505050505050565b6005818154811061094857600080fd5b600091825260209091200154905081565b60606004805480602002602001604051908101604052809291908181526020018280548015610770576020028201919060005260206000209081548152602001906001019080831161075c575050505050905090565b6000806107888585856107ac565b336109c6610db8565b6001600160a01b031614610a1c5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420617574686f72697a656420746f20696e6974206f7261636c650000006044820152606401610625565b6001600160a01b0385166000908152600660205260409020839055610a4385858484610ffc565b5050505050565b600080600080600080610a5b610ef9565b60405163423437fb60e11b81526001600160a01b038b8116600483015291909116906384686ff69060240160c06040518083038186803b158015610a9e57600080fd5b505afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad691906115d7565b95505094509450945094506000600860008b6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031690506000866001600160a01b0316826001600160a01b03161415610b475760006108ab88878c611017565b856001600160a01b0316826001600160a01b03161415610b6e5760006108ab87868c611017565b6000610b7b88878c611017565b9050600061090388878d611017565b600060606000610b98610ef9565b604051620b57c760e21b81526001600160a01b0388811660048301529190911690622d5f1c906024016101206040518083038186803b158015610bda57600080fd5b505afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1291906116b5565b80519091506000906001600160a01b031615801590610c4d57506001600160a01b038781166000908152600860205260409020548116908616145b604080516001600160a01b0388166020820152919250829101604051602081830303815290604052935093505050935093915050565b6002818154811061094857600080fd5b6004818154811061094857600080fd5b6003818154811061094857600080fd5b33610cbc610df0565b6001600160a01b03161480610ce0575033610cd5610e88565b6001600160a01b0316145b610cfc5760405162461bcd60e51b815260040161062590611836565b610d07838383611138565b505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610770576020028201919060005260206000209081548152602001906001019080831161075c575050505050905090565b60606005805480602002602001604051908101604052809291908181526020018280548015610770576020028201919060005260206000209081548152602001906001019080831161075c575050505050905090565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e83919061149f565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ee557600080fd5b505af1158015610e5f573d6000803e3d6000fd5b606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc92546001600160a01b031690565b6001600160a01b0380841660009081526007602090815260408083208585168452909152812054909116610f6585846113a9565b604051630576cbc360e41b81526001600160a01b0387811660048301526024820187905285811660448301529192509082169063576cbc3090606401602060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff39190611759565b95945050505050565b600061100a8284018461147c565b9050610a43858583611138565b6001600160a01b0380841660009081526007602090815260408083208585168452909152812054909116806110d45761104e610db8565b60405163179ce80d60e21b81526001600160a01b03878116600483015285811660248301529190911690635e73a0349060440160206040518083038186803b15801561109957600080fd5b505afa1580156110ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d1919061149f565b90505b6040516323aaad6360e21b81526001600160a01b038681166004830152602482018690528481166044830152821690638eaab58c9060640160206040518083038186803b15801561112457600080fd5b505afa158015610fcf573d6000803e3d6000fd5b6000611142610ef9565b60405163ef6eeded60e01b81526001600160a01b038681166004830152919091169063ef6eeded9060240161012060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c091906116b5565b905080600001516001600160a01b0316826001600160a01b031614806111fb575080602001516001600160a01b0316826001600160a01b0316145b8061120d57506001600160a01b038216155b6112595760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420612076616c69642073696e676c65207369646520746f6b656e0000006044820152606401610625565b80516001600160a01b038381169116146112e45760006112868260200151670de0b6b3a764000086610f31565b116112e45760405162461bcd60e51b815260206004820152602860248201527f436f6e7374697475656e74206f7261636c6520666f7220746f6b656e31206e6f604482015267074207365742075760c41b6064820152608401610625565b80602001516001600160a01b0316826001600160a01b03161461137857600061131a8260000151670de0b6b3a764000086610f31565b116113785760405162461bcd60e51b815260206004820152602860248201527f436f6e7374697475656e74206f7261636c6520666f7220746f6b656e30206e6f604482015267074207365742075760c41b6064820152608401610625565b506001600160a01b03928316600090815260086020526040902080546001600160a01b031916919093161790915550565b6001600160a01b03808316600090815260076020908152604080832085851684529091529020541680611466576113de610db8565b6040516302eaec2d60e31b81526001600160a01b03858116600483015284811660248301529190911690631757616890604401602060405180830381600087803b15801561142b57600080fd5b505af115801561143f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611463919061149f565b90505b92915050565b80516114778161192c565b919050565b60006020828403121561148d578081fd5b81356114988161192c565b9392505050565b6000602082840312156114b0578081fd5b81516114988161192c565b600080604083850312156114cd578081fd5b82356114d88161192c565b915060208301356114e88161192c565b809150509250929050565b600080600060608486031215611507578081fd5b83356115128161192c565b925060208401356115228161192c565b915060408401356115328161192c565b809150509250925092565b600080600080600060808688031215611554578081fd5b853561155f8161192c565b9450602086013561156f8161192c565b935060408601359250606086013567ffffffffffffffff80821115611592578283fd5b818801915088601f8301126115a5578283fd5b8135818111156115b3578384fd5b8960208285010111156115c4578384fd5b9699959850939650602001949392505050565b60008060008060008060c087890312156115ef578081fd5b86516115fa8161192c565b602088015190965061160b8161192c565b6040880151606089015160808a015160a0909a0151989b929a5090989097909650945092505050565b60008060408385031215611646578182fd5b82356116518161192c565b946020939093013593505050565b600080600060608486031215611673578283fd5b833561167e8161192c565b92506020840135915060408401356115328161192c565b6000602082840312156116a6578081fd5b81518015158114611498578182fd5b60006101208083850312156116c8578182fd5b6116d181611880565b90506116dc8361146c565b81526116ea6020840161146c565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b600060208284031215611752578081fd5b5035919050565b60006020828403121561176a578081fd5b5051919050565b60008060408385031215611783578182fd5b8235915060208301356114e88161192c565b6020808252825182820181905260009190848201906040850190845b818110156117cd578351835292840192918401916001016117b1565b50909695505050505050565b6000831515825260206040818401528351806040850152825b8181101561180e578581018301518582016060015282016117f2565b8181111561181f5783606083870101525b50601f01601f191692909201606001949350505050565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156118b757634e487b7160e01b600052604160045260246000fd5b604052919050565b600082198211156118d2576118d2611916565b500190565b6000826118f257634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561191157611911611916565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461194157600080fd5b5056fea2646970667358221220bd7168d8a041cc34a280a5c14fe623c1e67580f7590ae63f4cfafddae704483564736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "charactersPlayed()": {
        "details": "returns all characters played by this contract (e.g. stable coin, oracle registry)"
      },
      "dependsOnCharacters()": {
        "details": "returns all the character dependencies like FEE_RECIPIENT"
      },
      "dependsOnRoles()": {
        "details": "returns all the roles dependencies of this contract like FUND_TRANSFERER"
      },
      "rolesPlayed()": {
        "details": "returns all roles played by this contract"
      },
      "updateMainCharacterCache(uint256)": {
        "details": "Updates the main character cache for a speciic character"
      },
      "updateRoleCache(uint256,address)": {
        "details": "Updates the role cache for a specific role and address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndCheckOracleParams(address,address,address)": {
        "notice": "Encode params for initialization"
      },
      "getAmountInPeg(address,uint256,address)": {
        "notice": "Get value of LPT via its reserves"
      },
      "newCurrentOracle(address,address)": {
        "notice": "Notify contract to update oracle cache"
      },
      "setOracleSpecificParams(address,address,address)": {
        "notice": "Set single side token (if any)"
      },
      "viewAmountInPeg(address,uint256,address)": {
        "notice": "View value of LPT via its reserves"
      }
    },
    "notice": "Calculates value of LPT based on the reserves they represent, via the Value of their twap-tracked reserves",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16748,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16754,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 16757,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16760,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16763,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16766,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14564,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "borrowablePer10ks",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14718,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "_oracleCache",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 16290,
        "contract": "contracts/oracles/UniswapV2LPTOracle.sol:UniswapV2LPTOracle",
        "label": "singleSideValuation",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}