{
  "address": "0xCB2E7D36FCf2afC77B42Ad3E370Cba5639c6281c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allManagedContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "characterDependenciesByContr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentExecutor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "executeAsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "giveRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "manageContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "removeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract2Disable",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contract2Enable",
          "type": "address"
        }
      ],
      "name": "replaceContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleDependenciesByContr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "setMainCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateCaches",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "character",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0377236398be525f71e2df0561a88e6e3ac2d9020c95b4fcd4268fc59933cc0b",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0xCB2E7D36FCf2afC77B42Ad3E370Cba5639c6281c",
    "transactionIndex": 4,
    "gasUsed": "2001115",
    "logsBloom": "0x
    "blockHash": "0x5e7325606eee61a16e6182c285769f8471515154b07345eb06cbf75a8b9bc90b",
    "transactionHash": "0x0377236398be525f71e2df0561a88e6e3ac2d9020c95b4fcd4268fc59933cc0b",
    "logs": [],
    "blockNumber": 7166196,
    "cumulativeGasUsed": "2350159",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3d543B2f85a06b19d47F11f916C4423FB3ECAbBd"
  ],
  "solcInputHash": "4d97e469c90a5419338b979e26a069f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allManagedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"characterDependenciesByContr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeAsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"giveRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"manageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"removeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract2Disable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contract2Enable\",\"type\":\"address\"}],\"name\":\"replaceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleDependenciesByContr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"setMainCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateCaches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"character\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"charactersPlayed()\":{\"details\":\"returns all characters played by this contract (e.g. stable coin, oracle registry)\"},\"dependsOnCharacters()\":{\"details\":\"returns all the character dependencies like FEE_RECIPIENT\"},\"dependsOnRoles()\":{\"details\":\"returns all the roles dependencies of this contract like FUND_TRANSFERER\"},\"rolesPlayed()\":{\"details\":\"returns all roles played by this contract\"}},\"title\":\"Provides a single point of reference to verify integrity of the roles structure and facilitate governance actions within our system as well as performing cache invalidation for roles and inter-contract relationships\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allManagedContracts()\":{\"notice\":\"All the contracts managed by this controller\"},\"disableContract(address)\":{\"notice\":\"Remove roles and permissions for contract\"},\"executeAsOwner(address)\":{\"notice\":\"Run an executor contract in the executor role (which has ownership privileges throughout)\"},\"giveRole(uint256,address)\":{\"notice\":\"Activate role\"},\"manageContract(address)\":{\"notice\":\"Orchestrate roles and permission for contract\"},\"removeRole(uint256,address)\":{\"notice\":\"Disable role\"},\"replaceContract(address,address)\":{\"notice\":\"Completely replace and disable old while enabling new contract Caution: no checks made that replacement contract is semantically aligned or hitherto unmanaged\"},\"setMainCharacter(uint256,address)\":{\"notice\":\"Assign main character\"},\"updateCaches(address)\":{\"notice\":\"Update cached value for all the dependencies of a contract\"},\"updateMainCharacterCache(uint256)\":{\"notice\":\"Notify all dependent contracts after main character change\"},\"updateRoleCache(uint256,address)\":{\"notice\":\"Notify all dependent contracts after role change\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DependencyController.sol\":\"DependencyController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/DependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./Executor.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./roles/DependentContract.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Provides a single point of reference to verify integrity\\n/// of the roles structure and facilitate governance actions\\n/// within our system as well as performing cache invalidation for\\n/// roles and inter-contract relationships\\ncontract DependencyController is\\n    RoleAware,\\n    IDependencyController,\\n    ReentrancyGuard\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    constructor(address _roles) RoleAware(_roles) {}\\n\\n    address public override currentExecutor;\\n\\n    EnumerableSet.AddressSet managedContracts;\\n\\n    mapping(address => uint256[]) public roleDependenciesByContr;\\n    mapping(address => uint256[]) public characterDependenciesByContr;\\n    mapping(uint256 => EnumerableSet.AddressSet) dependentsByRole;\\n    mapping(uint256 => EnumerableSet.AddressSet) dependentsByCharacter;\\n\\n    mapping(uint256 => EnumerableSet.AddressSet) knownRoleHolders;\\n\\n    /// Run an executor contract in the executor role (which has ownership privileges throughout)\\n    function executeAsOwner(address executor) external onlyOwner nonReentrant {\\n        uint256[] memory requiredRoles = Executor(executor).rolesPlayed();\\n        uint256[] memory requiredCharacters = Executor(executor)\\n            .charactersPlayed();\\n        address[] memory extantCharacters = new address[](\\n            requiredCharacters.length\\n        );\\n\\n        for (uint256 i = 0; requiredRoles.length > i; i++) {\\n            _giveRole(requiredRoles[i], executor);\\n        }\\n\\n        for (uint256 i = 0; requiredCharacters.length > i; i++) {\\n            extantCharacters[i] = roles.mainCharacters(requiredCharacters[i]);\\n            _setMainCharacter(requiredCharacters[i], executor);\\n        }\\n\\n        uint256[] memory dependsOnCharacters = DependentContract(executor)\\n            .dependsOnCharacters();\\n        uint256[] memory dependsOnRoles = DependentContract(executor)\\n            .dependsOnRoles();\\n        characterDependenciesByContr[executor] = dependsOnCharacters;\\n        roleDependenciesByContr[executor] = dependsOnRoles;\\n\\n        updateCaches(executor);\\n        currentExecutor = executor;\\n        Executor(executor).execute();\\n        currentExecutor = address(0);\\n\\n        uint256 len = requiredRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            _removeRole(requiredRoles[i], executor);\\n        }\\n\\n        for (uint256 i = 0; requiredCharacters.length > i; i++) {\\n            _setMainCharacter(requiredCharacters[i], extantCharacters[i]);\\n        }\\n    }\\n\\n    /// Orchestrate roles and permission for contract\\n    function manageContract(address contr) external onlyOwnerExec {\\n        _manageContract(contr);\\n    }\\n\\n    /// Orchestrate roles and permission for contract\\n    function _manageContract(address contr) internal {\\n        managedContracts.add(contr);\\n\\n        uint256[] memory charactersPlayed = DependentContract(contr)\\n            .charactersPlayed();\\n        uint256[] memory rolesPlayed = DependentContract(contr).rolesPlayed();\\n\\n        // set up all characters this contract plays\\n        uint256 len = charactersPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 character = charactersPlayed[i];\\n            _setMainCharacter(character, contr);\\n        }\\n\\n        // all roles this contract plays\\n        len = rolesPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 role = rolesPlayed[i];\\n            _giveRole(role, contr);\\n        }\\n\\n        uint256[] memory dependsOnCharacters = DependentContract(contr)\\n            .dependsOnCharacters();\\n        uint256[] memory dependsOnRoles = DependentContract(contr)\\n            .dependsOnRoles();\\n        characterDependenciesByContr[contr] = dependsOnCharacters;\\n        roleDependenciesByContr[contr] = dependsOnRoles;\\n\\n        for (uint256 i; dependsOnCharacters.length > i; i++) {\\n            dependentsByCharacter[dependsOnCharacters[i]].add(contr);\\n        }\\n        for (uint256 i; dependsOnRoles.length > i; i++) {\\n            dependentsByRole[dependsOnRoles[i]].add(contr);\\n        }\\n\\n        updateCaches(contr);\\n    }\\n\\n    /// Completely replace and disable old while enabling new contract\\n    /// Caution: no checks made that replacement contract is semantically aligned\\n    /// or hitherto unmanaged\\n    function replaceContract(address contract2Disable, address contract2Enable)\\n        external\\n        onlyOwnerExec\\n    {\\n        _disableContract(contract2Disable);\\n        _manageContract(contract2Enable);\\n    }\\n\\n    ///  Remove roles and permissions for contract\\n    function disableContract(address contr) external onlyOwnerExecDisabler {\\n        _disableContract(contr);\\n    }\\n\\n    /// Completely remove all roles, characters and un-manage a contract\\n    function _disableContract(address contr) internal {\\n        managedContracts.remove(contr);\\n\\n        uint256[] memory charactersPlayed = DependentContract(contr)\\n            .charactersPlayed();\\n        uint256[] memory rolesPlayed = DependentContract(contr).rolesPlayed();\\n\\n        uint256 len = rolesPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            if (roles.getRole(rolesPlayed[i], contr)) {\\n                _removeRole(rolesPlayed[i], contr);\\n            }\\n        }\\n\\n        len = charactersPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            if (roles.mainCharacters(charactersPlayed[i]) == contr) {\\n                _setMainCharacter(charactersPlayed[i], address(0));\\n            }\\n        }\\n\\n        uint256[] storage dependsOnCharacters = characterDependenciesByContr[\\n            contr\\n        ];\\n        len = dependsOnCharacters.length;\\n        for (uint256 i; len > i; i++) {\\n            dependentsByCharacter[dependsOnCharacters[i]].remove(contr);\\n        }\\n\\n        uint256[] storage dependsOnRoles = roleDependenciesByContr[contr];\\n        len = dependsOnRoles.length;\\n        for (uint256 i; len > i; i++) {\\n            dependentsByRole[dependsOnRoles[i]].remove(contr);\\n        }\\n    }\\n\\n    /// Activate role\\n    function giveRole(uint256 role, address actor) external onlyOwnerExec {\\n        _giveRole(role, actor);\\n    }\\n\\n    /// Disable role\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDisabler\\n    {\\n        _removeRole(role, actor);\\n    }\\n\\n    /// Un-assign a role, notifying all contracts depending on that role\\n    function _removeRole(uint256 role, address actor) internal {\\n        knownRoleHolders[role].remove(actor);\\n        roles.removeRole(role, actor);\\n        updateRoleCache(role, actor);\\n    }\\n\\n    /// Assign main character\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExec\\n    {\\n        _setMainCharacter(role, actor);\\n    }\\n\\n    /// Assign a role, notifying all depending contracts\\n    function _giveRole(uint256 role, address actor) internal {\\n        knownRoleHolders[role].add(actor);\\n        roles.giveRole(role, actor);\\n        updateRoleCache(role, actor);\\n    }\\n\\n    /// Assign main character, notifying all depending contracts\\n    function _setMainCharacter(uint256 character, address actor) internal {\\n        roles.setMainCharacter(character, actor);\\n        updateMainCharacterCache(character);\\n    }\\n\\n    /// Notify all dependent contracts after main character change\\n    function updateMainCharacterCache(uint256 character) public override {\\n        EnumerableSet.AddressSet storage listeners = dependentsByCharacter[\\n            character\\n        ];\\n        uint256 len = listeners.length();\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(listeners.at(i)).updateMainCharacterCache(character);\\n        }\\n    }\\n\\n    /// Notify all dependent contracts after role change\\n    function updateRoleCache(uint256 role, address contr) public override {\\n        EnumerableSet.AddressSet storage listeners = dependentsByRole[role];\\n        uint256 len = listeners.length();\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(listeners.at(i)).updateRoleCache(role, contr);\\n        }\\n    }\\n\\n    /// Update cached value for all the dependencies of a contract\\n    function updateCaches(address contr) public {\\n        // update this contract with all characters it's listening to\\n        uint256[] storage dependsOnCharacters = characterDependenciesByContr[\\n            contr\\n        ];\\n        uint256 len = dependsOnCharacters.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(contr).updateMainCharacterCache(dependsOnCharacters[i]);\\n        }\\n\\n        // update this contract with all the roles it's listening to\\n        uint256[] storage dependsOnRoles = roleDependenciesByContr[contr];\\n        len = dependsOnRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 role = dependsOnRoles[i];\\n            EnumerableSet.AddressSet storage knownHolders = knownRoleHolders[\\n                role\\n            ];\\n            for (uint256 j = 0; knownHolders.length() > j; j++) {\\n                RoleAware(contr).updateRoleCache(role, knownHolders.at(j));\\n            }\\n        }\\n    }\\n\\n    /// All the contracts managed by this controller\\n    function allManagedContracts() external view returns (address[] memory) {\\n        return managedContracts.values();\\n    }\\n}\\n\",\"keccak256\":\"0x34a23541dc31b8e117a45f542ed30010c6656ec623e507fca84cee6726bfff7c\",\"license\":\"BUSL-1.1\"},\"contracts/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\n\\n/// Execute complex transactions on contracts within\\n/// within roles system with ownership privileges\\nabstract contract Executor is RoleAware {\\n    function execute() external virtual;\\n}\\n\",\"keccak256\":\"0x5cf62eb260e53864c3b4e87d69cd3fa9015cd6a9e6fdba5715b1cbabfda02f69\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title DependentContract.\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    /// @dev returns all characters played by this contract (e.g. stable coin, oracle registry)\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    /// @dev returns all roles played by this contract\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    /// @dev returns all the character dependencies like FEE_RECIPIENT\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    /// @dev returns all the roles dependencies of this contract like FUND_TRANSFERER\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xaea783afd230965aa519d2cc53f26a44f3f507b8d2089b8092c09caf35bd0d81\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    /// @dev Throws if called by any account other than the tx initiator.\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Roles: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or disabler\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or activator\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Updates the role cache for a specific role and address\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    /// @dev Updates the main character cache for a speciic character\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    /// @dev returns the owner's address\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    /// @dev returns the executor address\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    /// @dev returns the disabler address\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    /// @dev checks whether the passed address is activator or not\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.getRole(ACTIVATOR, contr);\\n    }\\n}\\n\",\"keccak256\":\"0xa70b85212981d804dfe598210d8e5a0f8b6699d8e85f92ab0e9f9e345c026c00\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant LIQUIDATOR = 5;\\n\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev assign role to an account\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    /// @dev revoke role of a particular account\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    /// @dev set main character\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    /// @dev return the role of the particular account\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev returns the current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ae6d39ae8e56755cd2ec0630901c26214da06288ef73f59b1beebe693961814\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002419380380620024198339810160408190526200003491620000b7565b806001600160a01b0381166200009b5760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b031916608052506001600655620000e7565b600060208284031215620000c9578081fd5b81516001600160a01b0381168114620000e0578182fd5b9392505050565b60805160601c6122d462000145600039600081816101e901528181610c62015281816111b001528181611243015281816113be015281816114f601528181611afa01528181611b7b01528181611c040152611c5901526122d46000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063713dade2116100de578063abcbc4fc11610097578063c133923c11610071578063c133923c14610370578063dc94cb7d14610383578063e8ea4fae1461038b578063e9c3f77d1461039357610173565b8063abcbc4fc14610337578063aeb38d8b1461034a578063bf184ea41461035d57610173565b8063713dade2146102a55780637a1a04df146102b85780637dad209b146102f65780638dbede6c146102fe578063a154ce8214610311578063a1fdc4581461032457610173565b8063421b705c11610130578063421b705c14610223578063447d52ba146102445780634a7a7f41146102575780634d5377691461026c5780636b60a09b1461027f5780636caa9c111461029257610173565b8063071060a6146101785780631023d3e01461018d5780631ea9e5a1146101ab57806325398f83146101be5780633238405b146101d1578063392f5f64146101e4575b600080fd5b61018b6101863660046120c3565b6103bc565b005b610195610463565b6040516101a291906120ff565b60405180910390f35b61018b6101b9366004611f80565b610474565b61018b6101cc3660046120db565b6104dc565b61018b6101df3660046120db565b61052f565b61020b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a2565b610236610231366004611fb8565b61059c565b6040519081526020016101a2565b61018b6102523660046120db565b6105cd565b61025f61067a565b6040516101a2919061214c565b61018b61027a3660046120db565b6106d2565b60075461020b906001600160a01b031681565b6102366102a03660046120c3565b610725565b61018b6102b3366004611f48565b610746565b6102e66102c6366004611fb8565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101a2565b61025f610921565b61023661030c366004611fb8565b610977565b61018b61031f366004611f48565b610993565b61018b610332366004611f48565b610a02565b6102366103453660046120c3565b61104e565b6102366103583660046120c3565b61105e565b61023661036b3660046120c3565b61106e565b61018b61037e366004611f48565b61107e565b61025f6110d0565b61025f611126565b61020b6103a13660046120c3565b6000602081905290815260409020546001600160a01b031681565b6000818152600d60205260408120906103d48261117c565b905060005b8082111561045d576103eb838261118c565b6001600160a01b031663071060a6856040518263ffffffff1660e01b815260040161041891815260200190565b600060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b50505050808061045590612242565b9150506103d9565b50505050565b606061046f600861119f565b905090565b3361047d6111ac565b6001600160a01b031614806104a157503361049661123f565b6001600160a01b0316145b6104c65760405162461bcd60e51b81526004016104bd90612184565b60405180910390fd5b6104cf826112b0565b6104d8816116ff565b5050565b336104e56111ac565b6001600160a01b031614806105095750336104fe61123f565b6001600160a01b0316145b6105255760405162461bcd60e51b81526004016104bd90612184565b6104d88282611abb565b336105386111ac565b6001600160a01b0316148061055c57503361055161123f565b6001600160a01b0316145b8061057657503361056b611b61565b6001600160a01b0316145b6105925760405162461bcd60e51b81526004016104bd906121ce565b6104d88282611bc5565b600b60205281600052604060002081815481106105b857600080fd5b90600052602060002001600091509150505481565b6000828152600c60205260408120906105e58261117c565b905060005b80821115610673576105fc838261118c565b60405163223ea95d60e11b8152600481018790526001600160a01b038681166024830152919091169063447d52ba90604401600060405180830381600087803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b50505050808061066b90612242565b9150506105ea565b5050505050565b606060038054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020905b8154815260200190600101908083116106b4575b5050505050905090565b336106db6111ac565b6001600160a01b031614806106ff5750336106f461123f565b6001600160a01b0316145b61071b5760405162461bcd60e51b81526004016104bd90612184565b6104d88282611c33565b6005818154811061073557600080fd5b600091825260209091200154905081565b6001600160a01b0381166000908152600b60205260408120805490915b8082111561080857836001600160a01b031663071060a684838154811061079a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016107c391815260200190565b600060405180830381600087803b1580156107dd57600080fd5b505af11580156107f1573d6000803e3d6000fd5b50505050808061080090612242565b915050610763565b50506001600160a01b0382166000908152600a602052604081208054915b8083111561067357600082828154811061085057634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600e90915260408220909250905b806108798361117c565b111561090b576001600160a01b03881663447d52ba84610899858561118c565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b1580156108e057600080fd5b505af11580156108f4573d6000803e3d6000fd5b50505050808061090390612242565b91505061086f565b505050808061091990612242565b915050610826565b606060048054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020908154815260200190600101908083116106b4575050505050905090565b600a60205281600052604060002081815481106105b857600080fd5b3361099c6111ac565b6001600160a01b031614806109c05750336109b561123f565b6001600160a01b0316145b806109da5750336109cf611b61565b6001600160a01b0316145b6109f65760405162461bcd60e51b81526004016104bd906121ce565b6109ff816112b0565b50565b33610a0b6111ac565b6001600160a01b031614610a615760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572000060448201526064016104bd565b60026006541415610ab45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104bd565b60026006819055506000816001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b339190810190611fe3565b90506000826001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610b7057600080fd5b505afa158015610b84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bac9190810190611fe3565b90506000815167ffffffffffffffff811115610bd857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c01578160200160208202803683370190505b50905060005b8084511115610c5357610c41848281518110610c3357634e487b7160e01b600052603260045260246000fd5b602002602001015186611abb565b80610c4b81612242565b915050610c07565b5060005b8083511115610da8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ed0b6d848381518110610caf57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610cd591815260200190565b60206040518083038186803b158015610ced57600080fd5b505afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d259190611f64565b828281518110610d4557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050610d96838281518110610d8857634e487b7160e01b600052603260045260246000fd5b602002602001015186611c33565b80610da081612242565b915050610c57565b506000846001600160a01b031663dc94cb7d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610de457600080fd5b505afa158015610df8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e209190810190611fe3565b90506000856001600160a01b0316634a7a7f416040518163ffffffff1660e01b815260040160006040518083038186803b158015610e5d57600080fd5b505afa158015610e71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e999190810190611fe3565b6001600160a01b0387166000908152600b602090815260409091208451929350610ec7929091850190611ee8565b506001600160a01b0386166000908152600a602090815260409091208251610ef192840190611ee8565b50610efb86610746565b600780546001600160a01b0319166001600160a01b03881690811790915560408051631851865560e21b8152905163614619549160048082019260009290919082900301818387803b158015610f5057600080fd5b505af1158015610f64573d6000803e3d6000fd5b5050600780546001600160a01b03191690555050845160005b80821115610fc857610fb6878281518110610fa857634e487b7160e01b600052603260045260246000fd5b602002602001015189611bc5565b80610fc081612242565b915050610f7d565b5060005b808651111561103f5761102d868281518110610ff857634e487b7160e01b600052603260045260246000fd5b602002602001015186838151811061102057634e487b7160e01b600052603260045260246000fd5b6020026020010151611c33565b8061103781612242565b915050610fcc565b50506001600655505050505050565b6002818154811061073557600080fd5b6004818154811061073557600080fd5b6003818154811061073557600080fd5b336110876111ac565b6001600160a01b031614806110ab5750336110a061123f565b6001600160a01b0316145b6110c75760405162461bcd60e51b81526004016104bd90612184565b6109ff816116ff565b606060028054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020908154815260200190600101908083116106b4575050505050905090565b606060058054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020908154815260200190600101908083116106b4575050505050905090565b6000611186825490565b92915050565b60006111988383611cbe565b9392505050565b6060600061119883611cf6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561120757600080fd5b505afa15801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190611f64565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561129c57600080fd5b505af115801561121b573d6000803e3d6000fd5b6112bb600882611d52565b506000816001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156112f757600080fd5b505afa15801561130b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113339190810190611fe3565b90506000826001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b15801561137057600080fd5b505afa158015611384573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113ac9190810190611fe3565b805190915060005b808211156114db577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393552a3d84838151811061140b57634e487b7160e01b600052603260045260246000fd5b6020026020010151876040518363ffffffff1660e01b81526004016114439291909182526001600160a01b0316602082015260400190565b60206040518083038186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149391906120a3565b156114c9576114c98382815181106114bb57634e487b7160e01b600052603260045260246000fd5b602002602001015186611bc5565b806114d381612242565b9150506113b4565b5050815160005b8082111561160c57846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ed0b6d86848151811061154357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161156991815260200190565b60206040518083038186803b15801561158157600080fd5b505afa158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b99190611f64565b6001600160a01b031614156115fa576115fa8482815181106115eb57634e487b7160e01b600052603260045260246000fd5b60200260200101516000611c33565b8061160481612242565b9150506114e2565b50506001600160a01b0383166000908152600b602052604081208054915b808311156116945761168186600d600085858154811061165a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020611d5290919063ffffffff16565b508061168c81612242565b91505061162a565b506001600160a01b0385166000908152600a6020526040812080549350905b808411156116f6576116e387600c600085858154811061165a57634e487b7160e01b600052603260045260246000fd5b50806116ee81612242565b9150506116b3565b50505050505050565b61170a600882611d67565b506000816001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561174657600080fd5b505afa15801561175a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117829190810190611fe3565b90506000826001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117bf57600080fd5b505afa1580156117d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117fb9190810190611fe3565b825190915060005b8082111561185457600084828151811061182d57634e487b7160e01b600052603260045260246000fd5b602002602001015190506118418187611c33565b508061184c81612242565b915050611803565b5050805160005b808211156118ac57600083828151811061188557634e487b7160e01b600052603260045260246000fd5b602002602001015190506118998187611abb565b50806118a481612242565b91505061185b565b506000846001600160a01b031663dc94cb7d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119249190810190611fe3565b90506000856001600160a01b0316634a7a7f416040518163ffffffff1660e01b815260040160006040518083038186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261199d9190810190611fe3565b6001600160a01b0387166000908152600b6020908152604090912084519293506119cb929091850190611ee8565b506001600160a01b0386166000908152600a6020908152604090912082516119f592840190611ee8565b5060005b8083511115611a6157611a4e87600d6000868581518110611a2a57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020611d6790919063ffffffff16565b5080611a5981612242565b9150506119f9565b5060005b8082511115611aa957611a9687600c6000858581518110611a2a57634e487b7160e01b600052603260045260246000fd5b5080611aa181612242565b915050611a65565b50611ab386610746565b505050505050565b6000828152600e60205260409020611ad39082611d67565b506040516325398f8360e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906325398f83906044015b600060405180830381600087803b158015611b3f57600080fd5b505af1158015611b53573d6000803e3d6000fd5b505050506104d882826105cd565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561120757600080fd5b6000828152600e60205260409020611bdd9082611d52565b50604051633238405b60e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690633238405b90604401611b25565b604051634d53776960e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690634d53776990604401600060405180830381600087803b158015611c9d57600080fd5b505af1158015611cb1573d6000803e3d6000fd5b505050506104d8826103bc565b6000826000018281548110611ce357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611d4657602002820191906000526020600020905b815481526020019060010190808311611d32575b50505050509050919050565b6000611198836001600160a01b038416611d7c565b6000611198836001600160a01b038416611e99565b60008181526001830160205260408120548015611e8f576000611da060018361222b565b8554909150600090611db49060019061222b565b9050818114611e35576000866000018281548110611de257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611e1357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e5457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611186565b6000915050611186565b6000818152600183016020526040812054611ee057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611186565b506000611186565b828054828255906000526020600020908101928215611f23579160200282015b82811115611f23578251825591602001919060010190611f08565b50611f2f929150611f33565b5090565b5b80821115611f2f5760008155600101611f34565b600060208284031215611f59578081fd5b813561119881612289565b600060208284031215611f75578081fd5b815161119881612289565b60008060408385031215611f92578081fd5b8235611f9d81612289565b91506020830135611fad81612289565b809150509250929050565b60008060408385031215611fca578182fd5b8235611fd581612289565b946020939093013593505050565b60006020808385031215611ff5578182fd5b825167ffffffffffffffff8082111561200c578384fd5b818501915085601f83011261201f578384fd5b81518181111561203157612031612273565b8060051b604051601f19603f8301168101818110858211171561205657612056612273565b604052828152858101935084860182860187018a1015612074578788fd5b8795505b83861015612096578051855260019590950194938601938601612078565b5098975050505050505050565b6000602082840312156120b4578081fd5b81518015158114611198578182fd5b6000602082840312156120d4578081fd5b5035919050565b600080604083850312156120ed578182fd5b823591506020830135611fad81612289565b6020808252825182820181905260009190848201906040850190845b818110156121405783516001600160a01b03168352928401929184019160010161211b565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561214057835183529284019291840191600101612168565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b60208082526038908201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60408201527f72206f7220617574686f72697a65642064697361626c65720000000000000000606082015260800190565b60008282101561223d5761223d61225d565b500390565b60006000198214156122565761225661225d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109ff57600080fdfea26469706673582212207fcded56c81ba8e955f5a2bd8d613d69ad5d1f929b3d81907ca74b699c6adc2764736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063713dade2116100de578063abcbc4fc11610097578063c133923c11610071578063c133923c14610370578063dc94cb7d14610383578063e8ea4fae1461038b578063e9c3f77d1461039357610173565b8063abcbc4fc14610337578063aeb38d8b1461034a578063bf184ea41461035d57610173565b8063713dade2146102a55780637a1a04df146102b85780637dad209b146102f65780638dbede6c146102fe578063a154ce8214610311578063a1fdc4581461032457610173565b8063421b705c11610130578063421b705c14610223578063447d52ba146102445780634a7a7f41146102575780634d5377691461026c5780636b60a09b1461027f5780636caa9c111461029257610173565b8063071060a6146101785780631023d3e01461018d5780631ea9e5a1146101ab57806325398f83146101be5780633238405b146101d1578063392f5f64146101e4575b600080fd5b61018b6101863660046120c3565b6103bc565b005b610195610463565b6040516101a291906120ff565b60405180910390f35b61018b6101b9366004611f80565b610474565b61018b6101cc3660046120db565b6104dc565b61018b6101df3660046120db565b61052f565b61020b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a2565b610236610231366004611fb8565b61059c565b6040519081526020016101a2565b61018b6102523660046120db565b6105cd565b61025f61067a565b6040516101a2919061214c565b61018b61027a3660046120db565b6106d2565b60075461020b906001600160a01b031681565b6102366102a03660046120c3565b610725565b61018b6102b3366004611f48565b610746565b6102e66102c6366004611fb8565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101a2565b61025f610921565b61023661030c366004611fb8565b610977565b61018b61031f366004611f48565b610993565b61018b610332366004611f48565b610a02565b6102366103453660046120c3565b61104e565b6102366103583660046120c3565b61105e565b61023661036b3660046120c3565b61106e565b61018b61037e366004611f48565b61107e565b61025f6110d0565b61025f611126565b61020b6103a13660046120c3565b6000602081905290815260409020546001600160a01b031681565b6000818152600d60205260408120906103d48261117c565b905060005b8082111561045d576103eb838261118c565b6001600160a01b031663071060a6856040518263ffffffff1660e01b815260040161041891815260200190565b600060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b50505050808061045590612242565b9150506103d9565b50505050565b606061046f600861119f565b905090565b3361047d6111ac565b6001600160a01b031614806104a157503361049661123f565b6001600160a01b0316145b6104c65760405162461bcd60e51b81526004016104bd90612184565b60405180910390fd5b6104cf826112b0565b6104d8816116ff565b5050565b336104e56111ac565b6001600160a01b031614806105095750336104fe61123f565b6001600160a01b0316145b6105255760405162461bcd60e51b81526004016104bd90612184565b6104d88282611abb565b336105386111ac565b6001600160a01b0316148061055c57503361055161123f565b6001600160a01b0316145b8061057657503361056b611b61565b6001600160a01b0316145b6105925760405162461bcd60e51b81526004016104bd906121ce565b6104d88282611bc5565b600b60205281600052604060002081815481106105b857600080fd5b90600052602060002001600091509150505481565b6000828152600c60205260408120906105e58261117c565b905060005b80821115610673576105fc838261118c565b60405163223ea95d60e11b8152600481018790526001600160a01b038681166024830152919091169063447d52ba90604401600060405180830381600087803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b50505050808061066b90612242565b9150506105ea565b5050505050565b606060038054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020905b8154815260200190600101908083116106b4575b5050505050905090565b336106db6111ac565b6001600160a01b031614806106ff5750336106f461123f565b6001600160a01b0316145b61071b5760405162461bcd60e51b81526004016104bd90612184565b6104d88282611c33565b6005818154811061073557600080fd5b600091825260209091200154905081565b6001600160a01b0381166000908152600b60205260408120805490915b8082111561080857836001600160a01b031663071060a684838154811061079a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016107c391815260200190565b600060405180830381600087803b1580156107dd57600080fd5b505af11580156107f1573d6000803e3d6000fd5b50505050808061080090612242565b915050610763565b50506001600160a01b0382166000908152600a602052604081208054915b8083111561067357600082828154811061085057634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600e90915260408220909250905b806108798361117c565b111561090b576001600160a01b03881663447d52ba84610899858561118c565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b1580156108e057600080fd5b505af11580156108f4573d6000803e3d6000fd5b50505050808061090390612242565b91505061086f565b505050808061091990612242565b915050610826565b606060048054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020908154815260200190600101908083116106b4575050505050905090565b600a60205281600052604060002081815481106105b857600080fd5b3361099c6111ac565b6001600160a01b031614806109c05750336109b561123f565b6001600160a01b0316145b806109da5750336109cf611b61565b6001600160a01b0316145b6109f65760405162461bcd60e51b81526004016104bd906121ce565b6109ff816112b0565b50565b33610a0b6111ac565b6001600160a01b031614610a615760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572000060448201526064016104bd565b60026006541415610ab45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104bd565b60026006819055506000816001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b339190810190611fe3565b90506000826001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610b7057600080fd5b505afa158015610b84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bac9190810190611fe3565b90506000815167ffffffffffffffff811115610bd857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c01578160200160208202803683370190505b50905060005b8084511115610c5357610c41848281518110610c3357634e487b7160e01b600052603260045260246000fd5b602002602001015186611abb565b80610c4b81612242565b915050610c07565b5060005b8083511115610da8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ed0b6d848381518110610caf57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610cd591815260200190565b60206040518083038186803b158015610ced57600080fd5b505afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d259190611f64565b828281518110610d4557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050610d96838281518110610d8857634e487b7160e01b600052603260045260246000fd5b602002602001015186611c33565b80610da081612242565b915050610c57565b506000846001600160a01b031663dc94cb7d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610de457600080fd5b505afa158015610df8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e209190810190611fe3565b90506000856001600160a01b0316634a7a7f416040518163ffffffff1660e01b815260040160006040518083038186803b158015610e5d57600080fd5b505afa158015610e71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e999190810190611fe3565b6001600160a01b0387166000908152600b602090815260409091208451929350610ec7929091850190611ee8565b506001600160a01b0386166000908152600a602090815260409091208251610ef192840190611ee8565b50610efb86610746565b600780546001600160a01b0319166001600160a01b03881690811790915560408051631851865560e21b8152905163614619549160048082019260009290919082900301818387803b158015610f5057600080fd5b505af1158015610f64573d6000803e3d6000fd5b5050600780546001600160a01b03191690555050845160005b80821115610fc857610fb6878281518110610fa857634e487b7160e01b600052603260045260246000fd5b602002602001015189611bc5565b80610fc081612242565b915050610f7d565b5060005b808651111561103f5761102d868281518110610ff857634e487b7160e01b600052603260045260246000fd5b602002602001015186838151811061102057634e487b7160e01b600052603260045260246000fd5b6020026020010151611c33565b8061103781612242565b915050610fcc565b50506001600655505050505050565b6002818154811061073557600080fd5b6004818154811061073557600080fd5b6003818154811061073557600080fd5b336110876111ac565b6001600160a01b031614806110ab5750336110a061123f565b6001600160a01b0316145b6110c75760405162461bcd60e51b81526004016104bd90612184565b6109ff816116ff565b606060028054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020908154815260200190600101908083116106b4575050505050905090565b606060058054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020908154815260200190600101908083116106b4575050505050905090565b6000611186825490565b92915050565b60006111988383611cbe565b9392505050565b6060600061119883611cf6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561120757600080fd5b505afa15801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190611f64565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561129c57600080fd5b505af115801561121b573d6000803e3d6000fd5b6112bb600882611d52565b506000816001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156112f757600080fd5b505afa15801561130b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113339190810190611fe3565b90506000826001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b15801561137057600080fd5b505afa158015611384573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113ac9190810190611fe3565b805190915060005b808211156114db577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393552a3d84838151811061140b57634e487b7160e01b600052603260045260246000fd5b6020026020010151876040518363ffffffff1660e01b81526004016114439291909182526001600160a01b0316602082015260400190565b60206040518083038186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149391906120a3565b156114c9576114c98382815181106114bb57634e487b7160e01b600052603260045260246000fd5b602002602001015186611bc5565b806114d381612242565b9150506113b4565b5050815160005b8082111561160c57846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ed0b6d86848151811061154357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161156991815260200190565b60206040518083038186803b15801561158157600080fd5b505afa158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b99190611f64565b6001600160a01b031614156115fa576115fa8482815181106115eb57634e487b7160e01b600052603260045260246000fd5b60200260200101516000611c33565b8061160481612242565b9150506114e2565b50506001600160a01b0383166000908152600b602052604081208054915b808311156116945761168186600d600085858154811061165a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020611d5290919063ffffffff16565b508061168c81612242565b91505061162a565b506001600160a01b0385166000908152600a6020526040812080549350905b808411156116f6576116e387600c600085858154811061165a57634e487b7160e01b600052603260045260246000fd5b50806116ee81612242565b9150506116b3565b50505050505050565b61170a600882611d67565b506000816001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561174657600080fd5b505afa15801561175a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117829190810190611fe3565b90506000826001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117bf57600080fd5b505afa1580156117d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117fb9190810190611fe3565b825190915060005b8082111561185457600084828151811061182d57634e487b7160e01b600052603260045260246000fd5b602002602001015190506118418187611c33565b508061184c81612242565b915050611803565b5050805160005b808211156118ac57600083828151811061188557634e487b7160e01b600052603260045260246000fd5b602002602001015190506118998187611abb565b50806118a481612242565b91505061185b565b506000846001600160a01b031663dc94cb7d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119249190810190611fe3565b90506000856001600160a01b0316634a7a7f416040518163ffffffff1660e01b815260040160006040518083038186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261199d9190810190611fe3565b6001600160a01b0387166000908152600b6020908152604090912084519293506119cb929091850190611ee8565b506001600160a01b0386166000908152600a6020908152604090912082516119f592840190611ee8565b5060005b8083511115611a6157611a4e87600d6000868581518110611a2a57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020611d6790919063ffffffff16565b5080611a5981612242565b9150506119f9565b5060005b8082511115611aa957611a9687600c6000858581518110611a2a57634e487b7160e01b600052603260045260246000fd5b5080611aa181612242565b915050611a65565b50611ab386610746565b505050505050565b6000828152600e60205260409020611ad39082611d67565b506040516325398f8360e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906325398f83906044015b600060405180830381600087803b158015611b3f57600080fd5b505af1158015611b53573d6000803e3d6000fd5b505050506104d882826105cd565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561120757600080fd5b6000828152600e60205260409020611bdd9082611d52565b50604051633238405b60e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690633238405b90604401611b25565b604051634d53776960e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690634d53776990604401600060405180830381600087803b158015611c9d57600080fd5b505af1158015611cb1573d6000803e3d6000fd5b505050506104d8826103bc565b6000826000018281548110611ce357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611d4657602002820191906000526020600020905b815481526020019060010190808311611d32575b50505050509050919050565b6000611198836001600160a01b038416611d7c565b6000611198836001600160a01b038416611e99565b60008181526001830160205260408120548015611e8f576000611da060018361222b565b8554909150600090611db49060019061222b565b9050818114611e35576000866000018281548110611de257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611e1357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e5457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611186565b6000915050611186565b6000818152600183016020526040812054611ee057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611186565b506000611186565b828054828255906000526020600020908101928215611f23579160200282015b82811115611f23578251825591602001919060010190611f08565b50611f2f929150611f33565b5090565b5b80821115611f2f5760008155600101611f34565b600060208284031215611f59578081fd5b813561119881612289565b600060208284031215611f75578081fd5b815161119881612289565b60008060408385031215611f92578081fd5b8235611f9d81612289565b91506020830135611fad81612289565b809150509250929050565b60008060408385031215611fca578182fd5b8235611fd581612289565b946020939093013593505050565b60006020808385031215611ff5578182fd5b825167ffffffffffffffff8082111561200c578384fd5b818501915085601f83011261201f578384fd5b81518181111561203157612031612273565b8060051b604051601f19603f8301168101818110858211171561205657612056612273565b604052828152858101935084860182860187018a1015612074578788fd5b8795505b83861015612096578051855260019590950194938601938601612078565b5098975050505050505050565b6000602082840312156120b4578081fd5b81518015158114611198578182fd5b6000602082840312156120d4578081fd5b5035919050565b600080604083850312156120ed578182fd5b823591506020830135611fad81612289565b6020808252825182820181905260009190848201906040850190845b818110156121405783516001600160a01b03168352928401929184019160010161211b565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561214057835183529284019291840191600101612168565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b60208082526038908201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60408201527f72206f7220617574686f72697a65642064697361626c65720000000000000000606082015260800190565b60008282101561223d5761223d61225d565b500390565b60006000198214156122565761225661225d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109ff57600080fdfea26469706673582212207fcded56c81ba8e955f5a2bd8d613d69ad5d1f929b3d81907ca74b699c6adc2764736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "charactersPlayed()": {
        "details": "returns all characters played by this contract (e.g. stable coin, oracle registry)"
      },
      "dependsOnCharacters()": {
        "details": "returns all the character dependencies like FEE_RECIPIENT"
      },
      "dependsOnRoles()": {
        "details": "returns all the roles dependencies of this contract like FUND_TRANSFERER"
      },
      "rolesPlayed()": {
        "details": "returns all roles played by this contract"
      }
    },
    "title": "Provides a single point of reference to verify integrity of the roles structure and facilitate governance actions within our system as well as performing cache invalidation for roles and inter-contract relationships",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allManagedContracts()": {
        "notice": "All the contracts managed by this controller"
      },
      "disableContract(address)": {
        "notice": "Remove roles and permissions for contract"
      },
      "executeAsOwner(address)": {
        "notice": "Run an executor contract in the executor role (which has ownership privileges throughout)"
      },
      "giveRole(uint256,address)": {
        "notice": "Activate role"
      },
      "manageContract(address)": {
        "notice": "Orchestrate roles and permission for contract"
      },
      "removeRole(uint256,address)": {
        "notice": "Disable role"
      },
      "replaceContract(address,address)": {
        "notice": "Completely replace and disable old while enabling new contract Caution: no checks made that replacement contract is semantically aligned or hitherto unmanaged"
      },
      "setMainCharacter(uint256,address)": {
        "notice": "Assign main character"
      },
      "updateCaches(address)": {
        "notice": "Update cached value for all the dependencies of a contract"
      },
      "updateMainCharacterCache(uint256)": {
        "notice": "Notify all dependent contracts after main character change"
      },
      "updateRoleCache(uint256,address)": {
        "notice": "Notify all dependent contracts after role change"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16323,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16329,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 16332,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16335,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16338,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16341,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 222,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5246,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "currentExecutor",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5249,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "managedContracts",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)4290_storage"
      },
      {
        "astId": 5254,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "roleDependenciesByContr",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5259,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "characterDependenciesByContr",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5264,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "dependentsByRole",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)4290_storage)"
      },
      {
        "astId": 5269,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "dependentsByCharacter",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)4290_storage)"
      },
      {
        "astId": 5274,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "knownRoleHolders",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)4290_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)4290_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4290_storage"
      },
      "t_struct(AddressSet)4290_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4289,
            "contract": "contracts/DependencyController.sol:DependencyController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3989_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3989_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3984,
            "contract": "contracts/DependencyController.sol:DependencyController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3988,
            "contract": "contracts/DependencyController.sol:DependencyController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}