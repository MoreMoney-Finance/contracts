{
  "address": "0xBeA4C16fEB8855A658dFD2Ffe325dD10E0bCEBdc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allManagedContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "characterDependenciesByContr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentExecutor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "executeAsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "giveRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "manageContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "removeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleDependenciesByContr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "setMainCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateCaches",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "character",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc538856bd6c8bd63218c1c355e6e6a96055cacd0772a4d8469ef0947e6182e4b",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0xBeA4C16fEB8855A658dFD2Ffe325dD10E0bCEBdc",
    "transactionIndex": 6,
    "gasUsed": "1908046",
    "logsBloom": "0x
    "blockHash": "0x19ea6c611c2e76f9a1911d2f33b9e1c09763fe4dd500bd52fcfb913c2313158b",
    "transactionHash": "0xc538856bd6c8bd63218c1c355e6e6a96055cacd0772a4d8469ef0947e6182e4b",
    "logs": [],
    "blockNumber": 6649873,
    "cumulativeGasUsed": "3072276",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x70429C9357D150E3a9088f94b8D91d944106137B"
  ],
  "solcInputHash": "28c9fd7028c7235019505a3b598cc36a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allManagedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"characterDependenciesByContr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeAsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"giveRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"manageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"removeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleDependenciesByContr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"setMainCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateCaches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"character\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides a single point of reference to verify integrity of the roles structure and facilitate governance actions within our system as well as performing cache invalidation for roles and inter-contract relationships\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disableContract(address)\":{\"notice\":\"Remove roles and permissions for contract\"},\"giveRole(uint256,address)\":{\"notice\":\"Activate role\"},\"manageContract(address)\":{\"notice\":\"Orchestrate roles and permission for contract\"},\"removeRole(uint256,address)\":{\"notice\":\"Disable role\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DependencyController.sol\":\"DependencyController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/DependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./Executor.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./roles/DependentContract.sol\\\";\\n\\n/// @title Provides a single point of reference to verify integrity\\n/// of the roles structure and facilitate governance actions\\n/// within our system as well as performing cache invalidation for\\n/// roles and inter-contract relationships\\ncontract DependencyController is RoleAware, IDependencyController {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    constructor(address _roles) RoleAware(_roles) {}\\n\\n    address public override currentExecutor;\\n\\n    EnumerableSet.AddressSet managedContracts;\\n\\n    mapping(address => uint256[]) public roleDependenciesByContr;\\n    mapping(address => uint256[]) public characterDependenciesByContr;\\n    mapping(uint256 => EnumerableSet.AddressSet) dependentsByRole;\\n    mapping(uint256 => EnumerableSet.AddressSet) dependentsByCharacter;\\n\\n    mapping(uint256 => EnumerableSet.AddressSet) knownRoleHolders;\\n\\n    function executeAsOwner(address executor) external onlyOwnerExec {\\n        uint256[] memory requiredRoles = Executor(executor).rolesPlayed();\\n        uint256[] memory requiredCharacters = Executor(executor)\\n            .charactersPlayed();\\n        address[] memory extantCharacters = new address[](\\n            requiredCharacters.length\\n        );\\n\\n        for (uint256 i = 0; requiredRoles.length > i; i++) {\\n            _giveRole(requiredRoles[i], executor);\\n        }\\n\\n        for (uint256 i = 0; requiredCharacters.length > i; i++) {\\n            extantCharacters[i] = roles.mainCharacters(requiredCharacters[i]);\\n            _setMainCharacter(requiredCharacters[i], executor);\\n        }\\n\\n        uint256[] memory dependsOnCharacters = DependentContract(executor)\\n            .dependsOnCharacters();\\n        uint256[] memory dependsOnRoles = DependentContract(executor)\\n            .dependsOnRoles();\\n        characterDependenciesByContr[executor] = dependsOnCharacters;\\n        roleDependenciesByContr[executor] = dependsOnRoles;\\n\\n        updateCaches(executor);\\n        currentExecutor = executor;\\n        Executor(executor).execute();\\n        currentExecutor = address(0);\\n\\n        uint256 len = requiredRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            _removeRole(requiredRoles[i], executor);\\n        }\\n\\n        for (uint256 i = 0; requiredCharacters.length > i; i++) {\\n            _setMainCharacter(requiredCharacters[i], extantCharacters[i]);\\n        }\\n    }\\n\\n    /// Orchestrate roles and permission for contract\\n    function manageContract(address contr) external onlyOwnerExec {\\n        managedContracts.add(contr);\\n\\n        uint256[] memory charactersPlayed = DependentContract(contr)\\n            .charactersPlayed();\\n        uint256[] memory rolesPlayed = DependentContract(contr).rolesPlayed();\\n\\n        // set up all characters this contract plays\\n        uint256 len = charactersPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 character = charactersPlayed[i];\\n            _setMainCharacter(character, contr);\\n        }\\n\\n        // all roles this contract plays\\n        len = rolesPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 role = rolesPlayed[i];\\n            _giveRole(role, contr);\\n        }\\n\\n        uint256[] memory dependsOnCharacters = DependentContract(contr)\\n            .dependsOnCharacters();\\n        uint256[] memory dependsOnRoles = DependentContract(contr)\\n            .dependsOnRoles();\\n        characterDependenciesByContr[contr] = dependsOnCharacters;\\n        roleDependenciesByContr[contr] = dependsOnRoles;\\n\\n        for (uint256 i; dependsOnCharacters.length > i; i++) {\\n            dependentsByCharacter[dependsOnCharacters[i]].add(contr);\\n        }\\n        for (uint256 i; dependsOnRoles.length > i; i++) {\\n            dependentsByRole[dependsOnRoles[i]].add(contr);\\n        }\\n\\n        updateCaches(contr);\\n    }\\n\\n    ///  Remove roles and permissions for contract\\n    function disableContract(address contr) external onlyOwnerExecDisabler {\\n        _disableContract(contr);\\n    }\\n\\n    function _disableContract(address contr) internal {\\n        managedContracts.remove(contr);\\n\\n        uint256[] memory charactersPlayed = DependentContract(contr)\\n            .charactersPlayed();\\n        uint256[] memory rolesPlayed = DependentContract(contr).rolesPlayed();\\n\\n        uint256 len = rolesPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            if (roles.getRole(rolesPlayed[i], contr)) {\\n                _removeRole(rolesPlayed[i], contr);\\n            }\\n        }\\n\\n        len = charactersPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            if (roles.mainCharacters(charactersPlayed[i]) == contr) {\\n                _setMainCharacter(charactersPlayed[i], address(0));\\n            }\\n        }\\n\\n        uint256[] storage dependsOnCharacters = characterDependenciesByContr[\\n            contr\\n        ];\\n        len = dependsOnCharacters.length;\\n        for (uint256 i; len > i; i++) {\\n            dependentsByCharacter[dependsOnCharacters[i]].remove(contr);\\n        }\\n\\n        uint256[] storage dependsOnRoles = roleDependenciesByContr[contr];\\n        len = dependsOnRoles.length;\\n        for (uint256 i; len > i; i++) {\\n            dependentsByRole[dependsOnRoles[i]].remove(contr);\\n        }\\n    }\\n\\n    /// Activate role\\n    function giveRole(uint256 role, address actor) external onlyOwnerExec {\\n        _giveRole(role, actor);\\n    }\\n\\n    /// Disable role\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDisabler\\n    {\\n        _removeRole(role, actor);\\n    }\\n\\n    function _removeRole(uint256 role, address actor) internal {\\n        knownRoleHolders[role].remove(actor);\\n        roles.removeRole(role, actor);\\n        updateRoleCache(role, actor);\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExec\\n    {\\n        _setMainCharacter(role, actor);\\n    }\\n\\n    function _giveRole(uint256 role, address actor) internal {\\n        knownRoleHolders[role].add(actor);\\n        roles.giveRole(role, actor);\\n        updateRoleCache(role, actor);\\n    }\\n\\n    function _setMainCharacter(uint256 character, address actor) internal {\\n        roles.setMainCharacter(character, actor);\\n        updateMainCharacterCache(character);\\n    }\\n\\n    function updateMainCharacterCache(uint256 character) public override {\\n        EnumerableSet.AddressSet storage listeners = dependentsByCharacter[\\n            character\\n        ];\\n        uint256 len = listeners.length();\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(listeners.at(i)).updateMainCharacterCache(character);\\n        }\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public override {\\n        EnumerableSet.AddressSet storage listeners = dependentsByRole[role];\\n        uint256 len = listeners.length();\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(listeners.at(i)).updateRoleCache(role, contr);\\n        }\\n    }\\n\\n    function updateCaches(address contr) public {\\n        // update this contract with all characters it's listening to\\n        uint256[] storage dependsOnCharacters = characterDependenciesByContr[\\n            contr\\n        ];\\n        uint256 len = dependsOnCharacters.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(contr).updateMainCharacterCache(dependsOnCharacters[i]);\\n        }\\n\\n        // update this contract with all the roles it's listening to\\n        uint256[] storage dependsOnRoles = roleDependenciesByContr[contr];\\n        len = dependsOnRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 role = dependsOnRoles[i];\\n            EnumerableSet.AddressSet storage knownHolders = knownRoleHolders[\\n                role\\n            ];\\n            for (uint256 j = 0; knownHolders.length() > j; j++) {\\n                RoleAware(contr).updateRoleCache(role, knownHolders.at(j));\\n            }\\n        }\\n    }\\n\\n    function allManagedContracts() external view returns (address[] memory) {\\n        return managedContracts.values();\\n    }\\n}\\n\",\"keccak256\":\"0x8527c80a4c0ccb5c9426ea103a0bd0459a47b05d98f662d4ae92d7ac6e643eae\",\"license\":\"BUSL-1.1\"},\"contracts/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\n\\nabstract contract Executor is RoleAware {\\n    function execute() external virtual;\\n}\\n\",\"keccak256\":\"0x88b521dcd593db3ffedd22e97bb89a3ae4a562e3f954ac2076cfcf7f4b8a8e2e\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xe60ca0ee32e5ddbb66bf65cd9358f7cd5bcee3de9e78c8427e8fe58a7d5d94e4\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.getRole(ACTIVATOR, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x51333b30c6d7814d5f8cbd86fef19cde8732cda16c96f4e2e069d659e89a6dc4\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant LIQUIDATOR = 5;\\n\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x46e286203c6188b0ed8c67d09a1158acb2dcd5b931ba51e7d6f980fcc8b42714\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620022cc380380620022cc8339810160408190526200003491620000b2565b806001600160a01b0381166200009b5760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b03191660805250620000e2565b600060208284031215620000c4578081fd5b81516001600160a01b0381168114620000db578182fd5b9392505050565b60805160601c61218c62000140600039600081816101bb01528181610b6801528181611464015281816114f7015281816115a301528181611624015281816116ad015281816117020152818161187501526119ad015261218c6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637a1a04df116100c3578063aeb38d8b1161007c578063aeb38d8b1461031c578063bf184ea41461032f578063c133923c14610342578063dc94cb7d14610355578063e8ea4fae1461035d578063e9c3f77d1461036557610158565b80637a1a04df1461028a5780637dad209b146102c85780638dbede6c146102d0578063a154ce82146102e3578063a1fdc458146102f6578063abcbc4fc1461030957610158565b8063447d52ba11610115578063447d52ba146102165780634a7a7f41146102295780634d5377691461023e5780636b60a09b146102515780636caa9c1114610264578063713dade21461027757610158565b8063071060a61461015d5780631023d3e01461017257806325398f83146101905780633238405b146101a3578063392f5f64146101b6578063421b705c146101f5575b600080fd5b61017061016b366004611f83565b61038e565b005b61017a610435565b6040516101879190611fca565b60405180910390f35b61017061019e366004611f9b565b610446565b6101706101b1366004611f9b565b6104a6565b6101dd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610187565b610208610203366004611e78565b610513565b604051908152602001610187565b610170610224366004611f9b565b610544565b6102316105f1565b6040516101879190612017565b61017061024c366004611f9b565b610649565b6006546101dd906001600160a01b031681565b610208610272366004611f83565b61069c565b610170610285366004611e40565b6106bd565b6102b8610298366004611e78565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610187565b610231610898565b6102086102de366004611e78565b6108ee565b6101706102f1366004611e40565b61090a565b610170610304366004611e40565b610979565b610208610317366004611f83565b610f4f565b61020861032a366004611f83565b610f5f565b61020861033d366004611f83565b610f6f565b610170610350366004611e40565b610f7f565b610231611384565b6102316113da565b6101dd610373366004611f83565b6000602081905290815260409020546001600160a01b031681565b6000818152600c60205260408120906103a682611430565b905060005b8082111561042f576103bd8382611440565b6001600160a01b031663071060a6856040518263ffffffff1660e01b81526004016103ea91815260200190565b600060405180830381600087803b15801561040457600080fd5b505af1158015610418573d6000803e3d6000fd5b505050508080610427906120fa565b9150506103ab565b50505050565b60606104416007611453565b905090565b3361044f611460565b6001600160a01b031614806104735750336104686114f3565b6001600160a01b0316145b6104985760405162461bcd60e51b815260040161048f9061204f565b60405180910390fd5b6104a28282611564565b5050565b336104af611460565b6001600160a01b031614806104d35750336104c86114f3565b6001600160a01b0316145b806104ed5750336104e261160a565b6001600160a01b0316145b6105095760405162461bcd60e51b815260040161048f90612086565b6104a2828261166e565b600a602052816000526040600020818154811061052f57600080fd5b90600052602060002001600091509150505481565b6000828152600b602052604081209061055c82611430565b905060005b808211156105ea576105738382611440565b60405163223ea95d60e11b8152600481018790526001600160a01b038681166024830152919091169063447d52ba90604401600060405180830381600087803b1580156105bf57600080fd5b505af11580156105d3573d6000803e3d6000fd5b5050505080806105e2906120fa565b915050610561565b5050505050565b6060600380548060200260200160405190810160405280929190818152602001828054801561063f57602002820191906000526020600020905b81548152602001906001019080831161062b575b5050505050905090565b33610652611460565b6001600160a01b0316148061067657503361066b6114f3565b6001600160a01b0316145b6106925760405162461bcd60e51b815260040161048f9061204f565b6104a282826116dc565b600581815481106106ac57600080fd5b600091825260209091200154905081565b6001600160a01b0381166000908152600a60205260408120805490915b8082111561077f57836001600160a01b031663071060a684838154811061071157634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b815260040161073a91815260200190565b600060405180830381600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b505050508080610777906120fa565b9150506106da565b50506001600160a01b03821660009081526009602052604081208054915b808311156105ea5760008282815481106107c757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600d90915260408220909250905b806107f083611430565b1115610882576001600160a01b03881663447d52ba846108108585611440565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561085757600080fd5b505af115801561086b573d6000803e3d6000fd5b50505050808061087a906120fa565b9150506107e6565b5050508080610890906120fa565b91505061079d565b6060600480548060200260200160405190810160405280929190818152602001828054801561063f576020028201919060005260206000209081548152602001906001019080831161062b575050505050905090565b6009602052816000526040600020818154811061052f57600080fd5b33610913611460565b6001600160a01b0316148061093757503361092c6114f3565b6001600160a01b0316145b8061095157503361094661160a565b6001600160a01b0316145b61096d5760405162461bcd60e51b815260040161048f90612086565b61097681611767565b50565b33610982611460565b6001600160a01b031614806109a657503361099b6114f3565b6001600160a01b0316145b6109c25760405162461bcd60e51b815260040161048f9061204f565b6000816001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a399190810190611ea3565b90506000826001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab29190810190611ea3565b90506000815167ffffffffffffffff811115610ade57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b07578160200160208202803683370190505b50905060005b8084511115610b5957610b47848281518110610b3957634e487b7160e01b600052603260045260246000fd5b602002602001015186611564565b80610b51816120fa565b915050610b0d565b5060005b8083511115610cae577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ed0b6d848381518110610bb557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610bdb91815260200190565b60206040518083038186803b158015610bf357600080fd5b505afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b9190611e5c565b828281518110610c4b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050610c9c838281518110610c8e57634e487b7160e01b600052603260045260246000fd5b6020026020010151866116dc565b80610ca6816120fa565b915050610b5d565b506000846001600160a01b031663dc94cb7d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d269190810190611ea3565b90506000856001600160a01b0316634a7a7f416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d6357600080fd5b505afa158015610d77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9f9190810190611ea3565b6001600160a01b0387166000908152600a602090815260409091208451929350610dcd929091850190611de0565b506001600160a01b03861660009081526009602090815260409091208251610df792840190611de0565b50610e01866106bd565b600680546001600160a01b0319166001600160a01b03881690811790915560408051631851865560e21b8152905163614619549160048082019260009290919082900301818387803b158015610e5657600080fd5b505af1158015610e6a573d6000803e3d6000fd5b5050600680546001600160a01b03191690555050845160005b80821115610ece57610ebc878281518110610eae57634e487b7160e01b600052603260045260246000fd5b60200260200101518961166e565b80610ec6816120fa565b915050610e83565b5060005b8086511115610f4557610f33868281518110610efe57634e487b7160e01b600052603260045260246000fd5b6020026020010151868381518110610f2657634e487b7160e01b600052603260045260246000fd5b60200260200101516116dc565b80610f3d816120fa565b915050610ed2565b5050505050505050565b600281815481106106ac57600080fd5b600481815481106106ac57600080fd5b600381815481106106ac57600080fd5b33610f88611460565b6001600160a01b03161480610fac575033610fa16114f3565b6001600160a01b0316145b610fc85760405162461bcd60e51b815260040161048f9061204f565b610fd3600782611bb6565b506000816001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561100f57600080fd5b505afa158015611023573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261104b9190810190611ea3565b90506000826001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b15801561108857600080fd5b505afa15801561109c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110c49190810190611ea3565b825190915060005b8082111561111d5760008482815181106110f657634e487b7160e01b600052603260045260246000fd5b6020026020010151905061110a81876116dc565b5080611115816120fa565b9150506110cc565b5050805160005b8082111561117557600083828151811061114e57634e487b7160e01b600052603260045260246000fd5b602002602001015190506111628187611564565b508061116d816120fa565b915050611124565b506000846001600160a01b031663dc94cb7d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156111b157600080fd5b505afa1580156111c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111ed9190810190611ea3565b90506000856001600160a01b0316634a7a7f416040518163ffffffff1660e01b815260040160006040518083038186803b15801561122a57600080fd5b505afa15801561123e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112669190810190611ea3565b6001600160a01b0387166000908152600a602090815260409091208451929350611294929091850190611de0565b506001600160a01b038616600090815260096020908152604090912082516112be92840190611de0565b5060005b808351111561132a5761131787600c60008685815181106112f357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020611bb690919063ffffffff16565b5080611322816120fa565b9150506112c2565b5060005b80825111156113725761135f87600b60008585815181106112f357634e487b7160e01b600052603260045260246000fd5b508061136a816120fa565b91505061132e565b5061137c866106bd565b505050505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561063f576020028201919060005260206000209081548152602001906001019080831161062b575050505050905090565b6060600580548060200260200160405190810160405280929190818152602001828054801561063f576020028201919060005260206000209081548152602001906001019080831161062b575050505050905090565b600061143a825490565b92915050565b600061144c8383611bcb565b9392505050565b6060600061144c83611c03565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190611e5c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561155057600080fd5b505af11580156114cf573d6000803e3d6000fd5b6000828152600d6020526040902061157c9082611bb6565b506040516325398f8360e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906325398f83906044015b600060405180830381600087803b1580156115e857600080fd5b505af11580156115fc573d6000803e3d6000fd5b505050506104a28282610544565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156114bb57600080fd5b6000828152600d602052604090206116869082611c5f565b50604051633238405b60e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690633238405b906044016115ce565b604051634d53776960e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690634d53776990604401600060405180830381600087803b15801561174657600080fd5b505af115801561175a573d6000803e3d6000fd5b505050506104a28261038e565b611772600782611c5f565b506000816001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ea9190810190611ea3565b90506000826001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b15801561182757600080fd5b505afa15801561183b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118639190810190611ea3565b805190915060005b80821115611992577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393552a3d8483815181106118c257634e487b7160e01b600052603260045260246000fd5b6020026020010151876040518363ffffffff1660e01b81526004016118fa9291909182526001600160a01b0316602082015260400190565b60206040518083038186803b15801561191257600080fd5b505afa158015611926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194a9190611f63565b156119805761198083828151811061197257634e487b7160e01b600052603260045260246000fd5b60200260200101518661166e565b8061198a816120fa565b91505061186b565b5050815160005b80821115611ac357846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ed0b6d8684815181106119fa57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611a2091815260200190565b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a709190611e5c565b6001600160a01b03161415611ab157611ab1848281518110611aa257634e487b7160e01b600052603260045260246000fd5b602002602001015160006116dc565b80611abb816120fa565b915050611999565b50506001600160a01b0383166000908152600a602052604081208054915b80831115611b4b57611b3886600c6000858581548110611b1157634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020611c5f90919063ffffffff16565b5080611b43816120fa565b915050611ae1565b506001600160a01b038516600090815260096020526040812080549350905b80841115611bad57611b9a87600b6000858581548110611b1157634e487b7160e01b600052603260045260246000fd5b5080611ba5816120fa565b915050611b6a565b50505050505050565b600061144c836001600160a01b038416611c74565b6000826000018281548110611bf057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611c5357602002820191906000526020600020905b815481526020019060010190808311611c3f575b50505050509050919050565b600061144c836001600160a01b038416611cc3565b6000818152600183016020526040812054611cbb5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561143a565b50600061143a565b60008181526001830160205260408120548015611dd6576000611ce76001836120e3565b8554909150600090611cfb906001906120e3565b9050818114611d7c576000866000018281548110611d2957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611d5a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d9b57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061143a565b600091505061143a565b828054828255906000526020600020908101928215611e1b579160200282015b82811115611e1b578251825591602001919060010190611e00565b50611e27929150611e2b565b5090565b5b80821115611e275760008155600101611e2c565b600060208284031215611e51578081fd5b813561144c81612141565b600060208284031215611e6d578081fd5b815161144c81612141565b60008060408385031215611e8a578081fd5b8235611e9581612141565b946020939093013593505050565b60006020808385031215611eb5578182fd5b825167ffffffffffffffff80821115611ecc578384fd5b818501915085601f830112611edf578384fd5b815181811115611ef157611ef161212b565b8060051b604051601f19603f83011681018181108582111715611f1657611f1661212b565b604052828152858101935084860182860187018a1015611f34578788fd5b8795505b83861015611f56578051855260019590950194938601938601611f38565b5098975050505050505050565b600060208284031215611f74578081fd5b8151801515811461144c578182fd5b600060208284031215611f94578081fd5b5035919050565b60008060408385031215611fad578182fd5b823591506020830135611fbf81612141565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561200b5783516001600160a01b031683529284019291840191600101611fe6565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561200b57835183529284019291840191600101612033565b6020808252601e908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e65720000604082015260600190565b60208082526038908201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60408201527f72206f7220617574686f72697a65642064697361626c65720000000000000000606082015260800190565b6000828210156120f5576120f5612115565b500390565b600060001982141561210e5761210e612115565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461097657600080fdfea2646970667358221220d620e8c29f43928050d4c6247df4d584b8765ee5797a36148766e9dcc9151a8d64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80637a1a04df116100c3578063aeb38d8b1161007c578063aeb38d8b1461031c578063bf184ea41461032f578063c133923c14610342578063dc94cb7d14610355578063e8ea4fae1461035d578063e9c3f77d1461036557610158565b80637a1a04df1461028a5780637dad209b146102c85780638dbede6c146102d0578063a154ce82146102e3578063a1fdc458146102f6578063abcbc4fc1461030957610158565b8063447d52ba11610115578063447d52ba146102165780634a7a7f41146102295780634d5377691461023e5780636b60a09b146102515780636caa9c1114610264578063713dade21461027757610158565b8063071060a61461015d5780631023d3e01461017257806325398f83146101905780633238405b146101a3578063392f5f64146101b6578063421b705c146101f5575b600080fd5b61017061016b366004611f83565b61038e565b005b61017a610435565b6040516101879190611fca565b60405180910390f35b61017061019e366004611f9b565b610446565b6101706101b1366004611f9b565b6104a6565b6101dd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610187565b610208610203366004611e78565b610513565b604051908152602001610187565b610170610224366004611f9b565b610544565b6102316105f1565b6040516101879190612017565b61017061024c366004611f9b565b610649565b6006546101dd906001600160a01b031681565b610208610272366004611f83565b61069c565b610170610285366004611e40565b6106bd565b6102b8610298366004611e78565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610187565b610231610898565b6102086102de366004611e78565b6108ee565b6101706102f1366004611e40565b61090a565b610170610304366004611e40565b610979565b610208610317366004611f83565b610f4f565b61020861032a366004611f83565b610f5f565b61020861033d366004611f83565b610f6f565b610170610350366004611e40565b610f7f565b610231611384565b6102316113da565b6101dd610373366004611f83565b6000602081905290815260409020546001600160a01b031681565b6000818152600c60205260408120906103a682611430565b905060005b8082111561042f576103bd8382611440565b6001600160a01b031663071060a6856040518263ffffffff1660e01b81526004016103ea91815260200190565b600060405180830381600087803b15801561040457600080fd5b505af1158015610418573d6000803e3d6000fd5b505050508080610427906120fa565b9150506103ab565b50505050565b60606104416007611453565b905090565b3361044f611460565b6001600160a01b031614806104735750336104686114f3565b6001600160a01b0316145b6104985760405162461bcd60e51b815260040161048f9061204f565b60405180910390fd5b6104a28282611564565b5050565b336104af611460565b6001600160a01b031614806104d35750336104c86114f3565b6001600160a01b0316145b806104ed5750336104e261160a565b6001600160a01b0316145b6105095760405162461bcd60e51b815260040161048f90612086565b6104a2828261166e565b600a602052816000526040600020818154811061052f57600080fd5b90600052602060002001600091509150505481565b6000828152600b602052604081209061055c82611430565b905060005b808211156105ea576105738382611440565b60405163223ea95d60e11b8152600481018790526001600160a01b038681166024830152919091169063447d52ba90604401600060405180830381600087803b1580156105bf57600080fd5b505af11580156105d3573d6000803e3d6000fd5b5050505080806105e2906120fa565b915050610561565b5050505050565b6060600380548060200260200160405190810160405280929190818152602001828054801561063f57602002820191906000526020600020905b81548152602001906001019080831161062b575b5050505050905090565b33610652611460565b6001600160a01b0316148061067657503361066b6114f3565b6001600160a01b0316145b6106925760405162461bcd60e51b815260040161048f9061204f565b6104a282826116dc565b600581815481106106ac57600080fd5b600091825260209091200154905081565b6001600160a01b0381166000908152600a60205260408120805490915b8082111561077f57836001600160a01b031663071060a684838154811061071157634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b815260040161073a91815260200190565b600060405180830381600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b505050508080610777906120fa565b9150506106da565b50506001600160a01b03821660009081526009602052604081208054915b808311156105ea5760008282815481106107c757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600d90915260408220909250905b806107f083611430565b1115610882576001600160a01b03881663447d52ba846108108585611440565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561085757600080fd5b505af115801561086b573d6000803e3d6000fd5b50505050808061087a906120fa565b9150506107e6565b5050508080610890906120fa565b91505061079d565b6060600480548060200260200160405190810160405280929190818152602001828054801561063f576020028201919060005260206000209081548152602001906001019080831161062b575050505050905090565b6009602052816000526040600020818154811061052f57600080fd5b33610913611460565b6001600160a01b0316148061093757503361092c6114f3565b6001600160a01b0316145b8061095157503361094661160a565b6001600160a01b0316145b61096d5760405162461bcd60e51b815260040161048f90612086565b61097681611767565b50565b33610982611460565b6001600160a01b031614806109a657503361099b6114f3565b6001600160a01b0316145b6109c25760405162461bcd60e51b815260040161048f9061204f565b6000816001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a399190810190611ea3565b90506000826001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab29190810190611ea3565b90506000815167ffffffffffffffff811115610ade57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b07578160200160208202803683370190505b50905060005b8084511115610b5957610b47848281518110610b3957634e487b7160e01b600052603260045260246000fd5b602002602001015186611564565b80610b51816120fa565b915050610b0d565b5060005b8083511115610cae577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ed0b6d848381518110610bb557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610bdb91815260200190565b60206040518083038186803b158015610bf357600080fd5b505afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b9190611e5c565b828281518110610c4b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050610c9c838281518110610c8e57634e487b7160e01b600052603260045260246000fd5b6020026020010151866116dc565b80610ca6816120fa565b915050610b5d565b506000846001600160a01b031663dc94cb7d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d269190810190611ea3565b90506000856001600160a01b0316634a7a7f416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d6357600080fd5b505afa158015610d77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9f9190810190611ea3565b6001600160a01b0387166000908152600a602090815260409091208451929350610dcd929091850190611de0565b506001600160a01b03861660009081526009602090815260409091208251610df792840190611de0565b50610e01866106bd565b600680546001600160a01b0319166001600160a01b03881690811790915560408051631851865560e21b8152905163614619549160048082019260009290919082900301818387803b158015610e5657600080fd5b505af1158015610e6a573d6000803e3d6000fd5b5050600680546001600160a01b03191690555050845160005b80821115610ece57610ebc878281518110610eae57634e487b7160e01b600052603260045260246000fd5b60200260200101518961166e565b80610ec6816120fa565b915050610e83565b5060005b8086511115610f4557610f33868281518110610efe57634e487b7160e01b600052603260045260246000fd5b6020026020010151868381518110610f2657634e487b7160e01b600052603260045260246000fd5b60200260200101516116dc565b80610f3d816120fa565b915050610ed2565b5050505050505050565b600281815481106106ac57600080fd5b600481815481106106ac57600080fd5b600381815481106106ac57600080fd5b33610f88611460565b6001600160a01b03161480610fac575033610fa16114f3565b6001600160a01b0316145b610fc85760405162461bcd60e51b815260040161048f9061204f565b610fd3600782611bb6565b506000816001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561100f57600080fd5b505afa158015611023573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261104b9190810190611ea3565b90506000826001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b15801561108857600080fd5b505afa15801561109c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110c49190810190611ea3565b825190915060005b8082111561111d5760008482815181106110f657634e487b7160e01b600052603260045260246000fd5b6020026020010151905061110a81876116dc565b5080611115816120fa565b9150506110cc565b5050805160005b8082111561117557600083828151811061114e57634e487b7160e01b600052603260045260246000fd5b602002602001015190506111628187611564565b508061116d816120fa565b915050611124565b506000846001600160a01b031663dc94cb7d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156111b157600080fd5b505afa1580156111c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111ed9190810190611ea3565b90506000856001600160a01b0316634a7a7f416040518163ffffffff1660e01b815260040160006040518083038186803b15801561122a57600080fd5b505afa15801561123e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112669190810190611ea3565b6001600160a01b0387166000908152600a602090815260409091208451929350611294929091850190611de0565b506001600160a01b038616600090815260096020908152604090912082516112be92840190611de0565b5060005b808351111561132a5761131787600c60008685815181106112f357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020611bb690919063ffffffff16565b5080611322816120fa565b9150506112c2565b5060005b80825111156113725761135f87600b60008585815181106112f357634e487b7160e01b600052603260045260246000fd5b508061136a816120fa565b91505061132e565b5061137c866106bd565b505050505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561063f576020028201919060005260206000209081548152602001906001019080831161062b575050505050905090565b6060600580548060200260200160405190810160405280929190818152602001828054801561063f576020028201919060005260206000209081548152602001906001019080831161062b575050505050905090565b600061143a825490565b92915050565b600061144c8383611bcb565b9392505050565b6060600061144c83611c03565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190611e5c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561155057600080fd5b505af11580156114cf573d6000803e3d6000fd5b6000828152600d6020526040902061157c9082611bb6565b506040516325398f8360e01b8152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906325398f83906044015b600060405180830381600087803b1580156115e857600080fd5b505af11580156115fc573d6000803e3d6000fd5b505050506104a28282610544565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156114bb57600080fd5b6000828152600d602052604090206116869082611c5f565b50604051633238405b60e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690633238405b906044016115ce565b604051634d53776960e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690634d53776990604401600060405180830381600087803b15801561174657600080fd5b505af115801561175a573d6000803e3d6000fd5b505050506104a28261038e565b611772600782611c5f565b506000816001600160a01b0316637dad209b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ea9190810190611ea3565b90506000826001600160a01b031663e8ea4fae6040518163ffffffff1660e01b815260040160006040518083038186803b15801561182757600080fd5b505afa15801561183b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118639190810190611ea3565b805190915060005b80821115611992577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393552a3d8483815181106118c257634e487b7160e01b600052603260045260246000fd5b6020026020010151876040518363ffffffff1660e01b81526004016118fa9291909182526001600160a01b0316602082015260400190565b60206040518083038186803b15801561191257600080fd5b505afa158015611926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194a9190611f63565b156119805761198083828151811061197257634e487b7160e01b600052603260045260246000fd5b60200260200101518661166e565b8061198a816120fa565b91505061186b565b5050815160005b80821115611ac357846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ed0b6d8684815181106119fa57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611a2091815260200190565b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a709190611e5c565b6001600160a01b03161415611ab157611ab1848281518110611aa257634e487b7160e01b600052603260045260246000fd5b602002602001015160006116dc565b80611abb816120fa565b915050611999565b50506001600160a01b0383166000908152600a602052604081208054915b80831115611b4b57611b3886600c6000858581548110611b1157634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020611c5f90919063ffffffff16565b5080611b43816120fa565b915050611ae1565b506001600160a01b038516600090815260096020526040812080549350905b80841115611bad57611b9a87600b6000858581548110611b1157634e487b7160e01b600052603260045260246000fd5b5080611ba5816120fa565b915050611b6a565b50505050505050565b600061144c836001600160a01b038416611c74565b6000826000018281548110611bf057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611c5357602002820191906000526020600020905b815481526020019060010190808311611c3f575b50505050509050919050565b600061144c836001600160a01b038416611cc3565b6000818152600183016020526040812054611cbb5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561143a565b50600061143a565b60008181526001830160205260408120548015611dd6576000611ce76001836120e3565b8554909150600090611cfb906001906120e3565b9050818114611d7c576000866000018281548110611d2957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611d5a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d9b57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061143a565b600091505061143a565b828054828255906000526020600020908101928215611e1b579160200282015b82811115611e1b578251825591602001919060010190611e00565b50611e27929150611e2b565b5090565b5b80821115611e275760008155600101611e2c565b600060208284031215611e51578081fd5b813561144c81612141565b600060208284031215611e6d578081fd5b815161144c81612141565b60008060408385031215611e8a578081fd5b8235611e9581612141565b946020939093013593505050565b60006020808385031215611eb5578182fd5b825167ffffffffffffffff80821115611ecc578384fd5b818501915085601f830112611edf578384fd5b815181811115611ef157611ef161212b565b8060051b604051601f19603f83011681018181108582111715611f1657611f1661212b565b604052828152858101935084860182860187018a1015611f34578788fd5b8795505b83861015611f56578051855260019590950194938601938601611f38565b5098975050505050505050565b600060208284031215611f74578081fd5b8151801515811461144c578182fd5b600060208284031215611f94578081fd5b5035919050565b60008060408385031215611fad578182fd5b823591506020830135611fbf81612141565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561200b5783516001600160a01b031683529284019291840191600101611fe6565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561200b57835183529284019291840191600101612033565b6020808252601e908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e65720000604082015260600190565b60208082526038908201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60408201527f72206f7220617574686f72697a65642064697361626c65720000000000000000606082015260800190565b6000828210156120f5576120f5612115565b500390565b600060001982141561210e5761210e612115565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461097657600080fdfea2646970667358221220d620e8c29f43928050d4c6247df4d584b8765ee5797a36148766e9dcc9151a8d64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Provides a single point of reference to verify integrity of the roles structure and facilitate governance actions within our system as well as performing cache invalidation for roles and inter-contract relationships",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "disableContract(address)": {
        "notice": "Remove roles and permissions for contract"
      },
      "giveRole(uint256,address)": {
        "notice": "Activate role"
      },
      "manageContract(address)": {
        "notice": "Orchestrate roles and permission for contract"
      },
      "removeRole(uint256,address)": {
        "notice": "Disable role"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14106,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 14112,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 14115,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14118,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14121,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14124,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3835,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "currentExecutor",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3838,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "managedContracts",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)3278_storage"
      },
      {
        "astId": 3843,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "roleDependenciesByContr",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3848,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "characterDependenciesByContr",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3853,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "dependentsByRole",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)3278_storage)"
      },
      {
        "astId": 3858,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "dependentsByCharacter",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)3278_storage)"
      },
      {
        "astId": 3863,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "knownRoleHolders",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)3278_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)3278_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3278_storage"
      },
      "t_struct(AddressSet)3278_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3277,
            "contract": "contracts/DependencyController.sol:DependencyController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2977_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2977_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2972,
            "contract": "contracts/DependencyController.sol:DependencyController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2976,
            "contract": "contracts/DependencyController.sol:DependencyController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}