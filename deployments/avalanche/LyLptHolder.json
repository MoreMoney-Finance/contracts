{
  "address": "0x9C077c2BAD801c89b0552cCd9359ABC11a2B7c29",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SubjectParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        }
      ],
      "name": "SubjectUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "contract IMasterChefJoeV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forwardReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestPartially",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeRewardtoken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardRecipientWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardWeightTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "w",
          "type": "uint256"
        }
      ],
      "name": "setRewardWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewRewardRecipients",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewStakedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x706304d31249afec4c59a32d6491ba95e645d9210516730a27638a232d88991e",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x9C077c2BAD801c89b0552cCd9359ABC11a2B7c29",
    "transactionIndex": 33,
    "gasUsed": "2035840",
    "logsBloom": "0x
    "blockHash": "0x30068125e62fdcec3ab91ab116d5fb810cb7ea0f5a2a95f5cb09de94181b0a6b",
    "transactionHash": "0x706304d31249afec4c59a32d6491ba95e645d9210516730a27638a232d88991e",
    "logs": [],
    "blockNumber": 11180067,
    "cumulativeGasUsed": "4867999",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x6e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd",
      "0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5"
    ],
    [
      "0x84f34b23127f8C5cC340121baDAEA7Aa33938421",
      "0x11bb6E9AEb4919188CC6B5AD570220C5A00d6B78",
      "0xC74401498312326cE31A23494eCbaC1449bd7235"
    ],
    [
      45,
      50,
      5
    ],
    "0x9e1EE00d45252aA58623F7d771FB414aA38f0878"
  ],
  "numDeployments": 1,
  "solcInputHash": "f34724a8126ebefd882a0c9c697b84b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SubjectParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"SubjectUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"contract IMasterChefJoeV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwardReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeRewardtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRecipientWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWeightTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"w\",\"type\":\"uint256\"}],\"name\":\"setRewardWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRewardRecipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"charactersPlayed()\":{\"details\":\"returns all characters played by this contract (e.g. stable coin, oracle registry)\"},\"dependsOnCharacters()\":{\"details\":\"returns all the character dependencies like FEE_RECIPIENT\"},\"dependsOnRoles()\":{\"details\":\"returns all the roles dependencies of this contract like FUND_TRANSFERER\"},\"rolesPlayed()\":{\"details\":\"returns all roles played by this contract\"},\"updateMainCharacterCache(uint256)\":{\"details\":\"Updates the main character cache for a speciic character\"},\"updateRoleCache(uint256,address)\":{\"details\":\"Updates the role cache for a specific role and address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRewardToken(address)\":{\"notice\":\"register a reward token\"},\"deposit()\":{\"notice\":\"Deposit balance in LPT to masterchef\"},\"forwardReward()\":{\"notice\":\"Forward rewards to all registered reward recipients\"},\"harvestPartially()\":{\"notice\":\"Harvest yield from masterchef\"},\"removeRewardtoken(address)\":{\"notice\":\"unregister a reward token\"},\"rescueFunds(address,address,uint256)\":{\"notice\":\"Rescue stranded funds\"},\"setRewardWeight(address,uint256)\":{\"notice\":\"Set share of reward that recipient should receive\"},\"viewRewardRecipients()\":{\"notice\":\"View the list of reward recipients\"},\"viewRewardTokens()\":{\"notice\":\"View the list of reward tokens\"},\"viewStakedBalance()\":{\"notice\":\"View how much LPT is staked\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraw LPT from masterchef\"},\"withdrawAll(address)\":{\"notice\":\"Withdraw all LPT from masterchef and forward to recipient\"}},\"notice\":\"Holds LPT in masterchef for yield (and forwards yield to redistributor)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquid-yield/LyLptHolder.sol\":\"LyLptHolder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/liquid-yield/LyLptHolder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../roles/RoleAware.sol\\\";\\nimport \\\"../roles/DependsOnLiquidYield.sol\\\";\\nimport \\\"../../interfaces/IMasterChefJoeV3.sol\\\";\\n\\n/// Holds LPT in masterchef for yield (and forwards yield to redistributor)\\ncontract LyLptHolder is RoleAware, DependsOnLiquidYield {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IMasterChefJoeV3 public constant chef =\\n        IMasterChefJoeV3(0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00);\\n    IERC20 public constant pair =\\n        IERC20(0x4b946c91C2B1a7d7C40FB3C130CdfBaf8389094d);\\n    uint256 constant pid = 51;\\n\\n    EnumerableSet.AddressSet internal rewardTokens;\\n    EnumerableSet.AddressSet internal rewardRecipients;\\n    mapping(address => uint256) public rewardRecipientWeight;\\n    uint256 public rewardWeightTotal = 0;\\n\\n    constructor(\\n        address[] memory _rewardTokens,\\n        address[] memory recipients,\\n        uint256[] memory weights,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        _charactersPlayed.push(LIQUID_YIELD_HOLDER);\\n\\n        for (uint256 i; recipients.length > i; i++) {\\n            rewardRecipients.add(recipients[i]);\\n            rewardRecipientWeight[recipients[i]] += weights[i];\\n            rewardWeightTotal += weights[i];\\n        }\\n\\n        for (uint256 i; _rewardTokens.length > i; i++) {\\n            rewardTokens.add(_rewardTokens[i]);\\n        }\\n    }\\n\\n    /// Deposit balance in LPT to masterchef\\n    function deposit() external {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        uint256 balance = pair.balanceOf(address(this));\\n        pair.safeIncreaseAllowance(address(chef), balance);\\n        chef.deposit(pid, balance);\\n        forwardReward();\\n    }\\n\\n    /// Withdraw LPT from masterchef\\n    function withdraw(uint256 amount, address recipient) external {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        chef.withdraw(pid, amount);\\n        forwardReward();\\n        pair.safeTransfer(recipient, amount);\\n    }\\n\\n    /// Harvest yield from masterchef\\n    function harvestPartially() external {\\n        chef.withdraw(pid, 0);\\n        forwardReward();\\n    }\\n\\n    /// Forward rewards to all registered reward recipients\\n    function forwardReward() public {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n\\n        for (uint256 i; rewardTokens.length() > i; i++) {\\n            IERC20 token = IERC20(rewardTokens.at(i));\\n            uint256 rewardTotal = token.balanceOf(address(this));\\n            for (uint256 j; rewardRecipients.length() > j; j++) {\\n                address recipient = rewardRecipients.at(j);\\n                token.safeTransfer(\\n                    recipient,\\n                    (rewardTotal * rewardRecipientWeight[recipient]) /\\n                        rewardWeightTotal\\n                );\\n            }\\n        }\\n    }\\n\\n    /// Withdraw all LPT from masterchef and forward to recipient\\n    function withdrawAll(address recipient) external {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        chef.withdraw(pid, viewStakedBalance());\\n        forwardReward();\\n        pair.safeTransfer(recipient, pair.balanceOf(address(this)));\\n    }\\n\\n    /// View how much LPT is staked\\n    function viewStakedBalance() public view returns (uint256) {\\n        (uint256 balance, ) = chef.userInfo(pid, address(this));\\n        return balance;\\n    }\\n\\n    /// View the list of reward tokens\\n    function viewRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens.values();\\n    }\\n\\n    /// View the list of reward recipients\\n    function viewRewardRecipients()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory recipients = new address[](rewardRecipients.length());\\n        uint256[] memory weights = new uint256[](rewardRecipients.length());\\n\\n        for (uint256 i; rewardRecipients.length() > i; i++) {\\n            address recipient = rewardRecipients.at(i);\\n            recipients[i] = recipient;\\n            weights[i] = rewardRecipientWeight[recipient];\\n        }\\n\\n        return (recipients, weights);\\n    }\\n\\n    /// Set share of reward that recipient should receive\\n    function setRewardWeight(address recipient, uint256 w)\\n        external\\n        onlyOwnerExec\\n    {\\n        uint256 extantWeight = rewardRecipientWeight[recipient];\\n        rewardWeightTotal = rewardWeightTotal + w - extantWeight;\\n        rewardRecipientWeight[recipient] = w;\\n        if (w == 0) {\\n            rewardRecipients.remove(recipient);\\n        } else {\\n            rewardRecipients.add(recipient);\\n        }\\n    }\\n\\n    /// Rescue stranded funds\\n    function rescueFunds(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwnerExec {\\n        IERC20(token).safeTransfer(recipient, amount);\\n    }\\n\\n    /// register a reward token\\n    function addRewardToken(address token) external onlyOwnerExec {\\n        rewardTokens.add(token);\\n    }\\n\\n    /// unregister a reward token\\n    function removeRewardtoken(address token) external onlyOwnerExec {\\n        rewardTokens.remove(token);\\n    }\\n}\\n\",\"keccak256\":\"0x4f3aab05867e58185f11d0650204fe5e6a241ab1cdf63070730d4642a526e13d\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title DependentContract.\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    /// @dev returns all characters played by this contract (e.g. stable coin, oracle registry)\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    /// @dev returns all roles played by this contract\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    /// @dev returns all the character dependencies like FEE_RECIPIENT\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    /// @dev returns all the roles dependencies of this contract like FUND_TRANSFERER\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xaea783afd230965aa519d2cc53f26a44f3f507b8d2089b8092c09caf35bd0d81\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnLiquidYield.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnLiquidYield is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(LIQUID_YIELD);\\n    }\\n\\n    function isLiquidYield(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUID_YIELD];\\n    }\\n}\\n\",\"keccak256\":\"0x35af50f870ce104f4ea02577ed978a12827b228e76298f97439f0e842cf96878\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    event SubjectUpdated(string param, address subject);\\n    event ParameterUpdated(string param, uint256 value);\\n    event SubjectParameterUpdated(string param, address subject, uint256 value);\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Roles: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or disabler\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or activator\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Updates the role cache for a specific role and address\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.roles(contr, role);\\n    }\\n\\n    /// @dev Updates the main character cache for a speciic character\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    /// @dev returns the owner's address\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    /// @dev returns the executor address\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    /// @dev returns the disabler address\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    /// @dev checks whether the passed address is activator or not\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.roles(contr, ACTIVATOR);\\n    }\\n}\\n\",\"keccak256\":\"0xeb75105e3789b321336a2f2e81a32ba0b8136809e9e7184629650a374b094871\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant TRANCHE_TRANSFERER = 5;\\nuint256 constant UNDERWATER_LIQUIDATOR = 6;\\nuint256 constant LIQUIDATION_PROTECTED = 7;\\nuint256 constant SMART_LIQUIDITY = 8;\\nuint256 constant LIQUID_YIELD = 9;\\n\\nuint256 constant PROTOCOL_TOKEN = 100;\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\nuint256 constant CURVE_POOL = 109;\\nuint256 constant ISOLATED_LENDING_LIQUIDATION = 110;\\nuint256 constant STABLE_LENDING = 111;\\nuint256 constant STABLE_LENDING_LIQUIDATION = 112;\\nuint256 constant SMART_LIQUIDITY_FACTORY =  113;\\nuint256 constant LIQUID_YIELD_HOLDER = 114;\\nuint256 constant LIQUID_YIELD_REBALANCER = 115;\\nuint256 constant LIQUID_YIELD_REDISTRIBUTOR_MAVAX = 116;\\nuint256 constant LIQUID_YIELD_REDISTRIBUTOR_MSAVAX = 117;\\n\\nuint256 constant DIRECT_LIQUIDATOR = 200;\\nuint256 constant LPT_LIQUIDATOR = 201;\\nuint256 constant DIRECT_STABLE_LIQUIDATOR = 202;\\nuint256 constant LPT_STABLE_LIQUIDATOR = 203;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev assign role to an account\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    /// @dev revoke role of a particular account\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    /// @dev set main character\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    /// @dev returns the current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0687ace0d7468af0b2f6fc960d553cab45cdcfd4e6a00b47f23df15f62ba2be\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IMasterChefJoeV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChefJoeV3 {\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that JOE distribution occurs.\\n        uint256 accJoePerShare; // Accumulated JOE per share, times 1e12. See below.\\n    }\\n\\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\n    function poolLength() external view returns (uint256 pools);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function joePerSec() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userInfo(uint256 pid, address user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xf73dfd88042daa9df498104894cb1589924f1f7a823d3ab935ca61fbe8c441a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000600b553480156200001657600080fd5b5060405162002112380380620021128339810160408190526200003991620003d0565b806001600160a01b038116620000a05760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b03191660805260038054600180820190925560097fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910155600480549182018155600090815260727f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909201919091555b80845111156200024f57620001698482815181106200014b57634e487b7160e01b600052603260045260246000fd5b60200260200101516008620002c160201b620010271790919060201c565b508281815181106200018b57634e487b7160e01b600052603260045260246000fd5b6020026020010151600a6000868481518110620001b857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000828254620001f1919062000528565b925050819055508281815181106200021957634e487b7160e01b600052603260045260246000fd5b6020026020010151600b600082825462000234919062000528565b90915550819050620002468162000543565b9150506200011c565b5060005b8085511115620002b657620002a08582815181106200028257634e487b7160e01b600052603260045260246000fd5b60200260200101516006620002c160201b620010271790919060201c565b5080620002ad8162000543565b91505062000253565b50505050506200058d565b6000620002d8836001600160a01b038416620002e1565b90505b92915050565b60008181526001830160205260408120546200032a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002db565b506000620002db565b80516001600160a01b03811681146200034b57600080fd5b919050565b600082601f83011262000361578081fd5b815160206200037a620003748362000502565b620004cf565b80838252828201915082860187848660051b89010111156200039a578586fd5b855b85811015620003c357620003b08262000333565b845292840192908401906001016200039c565b5090979650505050505050565b60008060008060808587031215620003e6578384fd5b84516001600160401b0380821115620003fd578586fd5b6200040b8883890162000350565b955060209150818701518181111562000422578586fd5b6200043089828a0162000350565b95505060408701518181111562000445578485fd5b87019050601f8101881362000458578384fd5b805162000469620003748262000502565b8082825284820191508484018b868560051b870101111562000489578788fd5b8794505b83851015620004ad5780518352600194909401939185019185016200048d565b508096505050505050620004c46060860162000333565b905092959194509250565b604051601f8201601f191681016001600160401b0381118282101715620004fa57620004fa62000577565b604052919050565b60006001600160401b038211156200051e576200051e62000577565b5060051b60200190565b600082198211156200053e576200053e62000561565b500190565b60006000198214156200055a576200055a62000561565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160601c611b4a620005c86000396000818161020a0152818161049d0152818161079b015281816110c9015261115c0152611b4a6000f3fe608060405234801561001057600080fd5b506004361061015e5760003560e01c8062f714ce14610163578063071060a6146101785780631a216e0c1461018b5780631c03e6cc146101a75780631fc8bc5d146101ba57806320ea020b146101dc5780632f4e064b146101ef578063392f5f6414610205578063447d52ba1461022c5780634a7a7f411461023f5780636caa9c11146102545780636ccae054146102675780637a1a04df1461027a5780637dad209b146102b857806385f8db10146102c0578063a8aa1b31146102c8578063abcbc4fc146102e3578063aeb38d8b146102f6578063bce3e38f14610309578063bf184ea41461031c578063d0e30db01461032f578063d400ceae14610337578063d731ef9d14610357578063dc94cb7d1461036c578063e8ea4fae14610374578063e9c3f77d1461037c578063f43cf5d4146103a5578063fa09e630146103ad578063fba713de146103c0575b600080fd5b6101766101713660046117f4565b6103c8565b005b6101766101863660046117c4565b610487565b610194600b5481565b6040519081526020015b60405180910390f35b6101766101b5366004611701565b61054d565b6101cf600080516020611af583398151915281565b60405161019e91906118d4565b6101766101ea366004611701565b6105a1565b6101f76105f5565b60405161019e929190611914565b6101cf7f000000000000000000000000000000000000000000000000000000000000000081565b61017661023a3660046117f4565b610784565b61024761085a565b60405161019e9190611942565b6101946102623660046117c4565b6108b2565b610176610275366004611739565b6108d3565b6102a8610288366004611779565b600160209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161019e565b610247610935565b61019461098b565b6101cf734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d81565b6101946102f13660046117c4565b610a19565b6101946103043660046117c4565b610a29565b610176610317366004611779565b610a39565b61019461032a3660046117c4565b610afa565b610176610b0a565b610194610345366004611701565b600a6020526000908152604090205481565b61035f610c59565b60405161019e9190611901565b610247610c6a565b610247610cc0565b6101cf61038a3660046117c4565b6000602081905290815260409020546001600160a01b031681565b610176610d16565b6101766103bb366004611701565b610e73565b610176610fb6565b6103d133611045565b6103f65760405162461bcd60e51b81526004016103ed906119d2565b60405180910390fd5b604051630441a3e760e41b8152600080516020611af58339815191529063441a3e709061042a906033908690600401611a06565b600060405180830381600087803b15801561044457600080fd5b505af1158015610458573d6000803e3d6000fd5b50505050610464610d16565b610483734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d828461106f565b5050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156104e757600080fd5b505afa1580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f919061171d565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b336105566110c5565b6001600160a01b0316148061057a57503361056f611158565b6001600160a01b0316145b6105965760405162461bcd60e51b81526004016103ed90611988565b610483600682611027565b336105aa6110c5565b6001600160a01b031614806105ce5750336105c3611158565b6001600160a01b0316145b6105ea5760405162461bcd60e51b81526004016103ed90611988565b6104836006826111c9565b606080600061060460086111de565b6001600160401b0381111561062957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610652578160200160208202803683370190505b509050600061066160086111de565b6001600160401b0381111561068657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106af578160200160208202803683370190505b50905060005b806106c060086111de565b111561077a5760006106d36008836111e8565b9050808483815181106106f657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050600a6000826001600160a01b03166001600160a01b031681526020019081526020016000205483838151811061075c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061077281611aae565b9150506106b5565b5090925090509091565b60405163f0723d9760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d97906107d290849086906004016118e8565b60206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082291906117a4565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b606060038054806020026020016040519081016040528092919081815260200182805480156108a857602002820191906000526020600020905b815481526020019060010190808311610894575b5050505050905090565b600581815481106108c257600080fd5b600091825260209091200154905081565b336108dc6110c5565b6001600160a01b031614806109005750336108f5611158565b6001600160a01b0316145b61091c5760405162461bcd60e51b81526004016103ed90611988565b6109306001600160a01b038416838361106f565b505050565b606060048054806020026020016040519081016040528092919081815260200182805480156108a85760200282019190600052602060002090815481526020019060010190808311610894575050505050905090565b6040516393f1a40b60e01b8152603360048201523060248201526000908190600080516020611af5833981519152906393f1a40b90604401604080518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190611823565b5091505090565b600281815481106108c257600080fd5b600481815481106108c257600080fd5b33610a426110c5565b6001600160a01b03161480610a66575033610a5b611158565b6001600160a01b0316145b610a825760405162461bcd60e51b81526004016103ed90611988565b6001600160a01b0382166000908152600a6020526040902054600b548190610aab908490611a14565b610ab59190611a6b565b600b556001600160a01b0383166000908152600a6020526040902082905581610ae957610ae36008846111c9565b50610930565b610af4600884611027565b50505050565b600381815481106108c257600080fd5b610b1333611045565b610b2f5760405162461bcd60e51b81526004016103ed906119d2565b6040516370a0823160e01b8152600090734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d906370a0823190610b699030906004016118d4565b60206040518083038186803b158015610b8157600080fd5b505afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb991906117dc565b9050610be8734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d600080516020611af5833981519152836111f4565b604051631c57762b60e31b8152600080516020611af58339815191529063e2bbb15890610c1c906033908590600401611a06565b600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b50505050610c56610d16565b50565b6060610c6560066112a3565b905090565b606060028054806020026020016040519081016040528092919081815260200182805480156108a85760200282019190600052602060002090815481526020019060010190808311610894575050505050905090565b606060058054806020026020016040519081016040528092919081815260200182805480156108a85760200282019190600052602060002090815481526020019060010190808311610894575050505050905090565b610d1f33611045565b610d3b5760405162461bcd60e51b81526004016103ed906119d2565b60005b80610d4960066111de565b1115610c56576000610d5c6006836111e8565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d8c91906118d4565b60206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc91906117dc565b905060005b80610dec60086111de565b1115610e5d576000610dff6008836111e8565b600b546001600160a01b0382166000908152600a6020526040902054919250610e4a91839190610e2f9087611a4c565b610e399190611a2c565b6001600160a01b038716919061106f565b5080610e5581611aae565b915050610de1565b5050508080610e6b90611aae565b915050610d3e565b610e7c33611045565b610e985760405162461bcd60e51b81526004016103ed906119d2565b600080516020611af583398151915263441a3e706033610eb661098b565b6040518363ffffffff1660e01b8152600401610ed3929190611a06565b600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b50505050610f0d610d16565b6040516370a0823160e01b8152610c56908290734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d906370a0823190610f4a9030906004016118d4565b60206040518083038186803b158015610f6257600080fd5b505afa158015610f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9a91906117dc565b734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d919061106f565b604051630441a3e760e41b8152600080516020611af58339815191529063441a3e7090610feb90603390600090600401611a06565b600060405180830381600087803b15801561100557600080fd5b505af1158015611019573d6000803e3d6000fd5b50505050611025610d16565b565b600061103c836001600160a01b0384166112b7565b90505b92915050565b6001600160a01b031660009081526001602090815260408083206009845290915290205460ff1690565b6109308363a9059cbb60e01b848460405160240161108e9291906118e8565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611306565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561112057600080fd5b505afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c65919061171d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111b557600080fd5b505af1158015611134573d6000803e3d6000fd5b600061103c836001600160a01b0384166113d8565b600061103f825490565b600061103c83836114f5565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127891906117dc565b6112829190611a14565b9050610af48463095ea7b360e01b858460405160240161108e9291906118e8565b606060006112b08361152d565b9392505050565b60008181526001830160205260408120546112fe5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561103f565b50600061103f565b600061135b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115899092919063ffffffff16565b805190915015610930578080602001905181019061137991906117a4565b6109305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ed565b600081815260018301602052604081205480156114eb5760006113fc600183611a6b565b855490915060009061141090600190611a6b565b905081811461149157600086600001828154811061143e57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061146f57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114b057634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061103f565b600091505061103f565b600082600001828154811061151a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561157d57602002820191906000526020600020905b815481526020019060010190808311611569575b50505050509050919050565b606061159884846000856115a0565b949350505050565b6060824710156116015760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ed565b843b61164f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ed565b600080866001600160a01b0316858760405161166b91906118b8565b60006040518083038185875af1925050503d80600081146116a8576040519150601f19603f3d011682016040523d82523d6000602084013e6116ad565b606091505b50915091506116bd8282866116c8565b979650505050505050565b606083156116d75750816112b0565b8251156116e75782518084602001fd5b8160405162461bcd60e51b81526004016103ed9190611955565b600060208284031215611712578081fd5b81356112b081611adf565b60006020828403121561172e578081fd5b81516112b081611adf565b60008060006060848603121561174d578182fd5b833561175881611adf565b9250602084013561176881611adf565b929592945050506040919091013590565b6000806040838503121561178b578182fd5b823561179681611adf565b946020939093013593505050565b6000602082840312156117b5578081fd5b815180151581146112b0578182fd5b6000602082840312156117d5578081fd5b5035919050565b6000602082840312156117ed578081fd5b5051919050565b60008060408385031215611806578182fd5b82359150602083013561181881611adf565b809150509250929050565b60008060408385031215611835578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b8381101561187e5781516001600160a01b031687529582019590820190600101611859565b509495945050505050565b6000815180845260208085019450808401835b8381101561187e5781518752958201959082019060010161189c565b600082516118ca818460208701611a82565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60006020825261103c6020830184611846565b6000604082526119276040830185611846565b82810360208401526119398185611889565b95945050505050565b60006020825261103c6020830184611889565b6000602082528251806020840152611974816040850160208701611a82565b601f01601f19169190910160400192915050565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b6020808252601a90820152794f6e6c7920666f72206c6971756964207969656c6420726f6c6560301b604082015260600190565b918252602082015260400190565b60008219821115611a2757611a27611ac9565b500190565b600082611a4757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611a6657611a66611ac9565b500290565b600082821015611a7d57611a7d611ac9565b500390565b60005b83811015611a9d578181015183820152602001611a85565b83811115610af45750506000910152565b6000600019821415611ac257611ac2611ac9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610c5657600080fdfe000000000000000000000000188bed1968b795d5c9022f6a0bb5931ac4c18f00a264697066735822122048f528bb1cab1b256d271903146ec05a1bdafe5bca420d41f84dc9bf902b7b8c64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061015e5760003560e01c8062f714ce14610163578063071060a6146101785780631a216e0c1461018b5780631c03e6cc146101a75780631fc8bc5d146101ba57806320ea020b146101dc5780632f4e064b146101ef578063392f5f6414610205578063447d52ba1461022c5780634a7a7f411461023f5780636caa9c11146102545780636ccae054146102675780637a1a04df1461027a5780637dad209b146102b857806385f8db10146102c0578063a8aa1b31146102c8578063abcbc4fc146102e3578063aeb38d8b146102f6578063bce3e38f14610309578063bf184ea41461031c578063d0e30db01461032f578063d400ceae14610337578063d731ef9d14610357578063dc94cb7d1461036c578063e8ea4fae14610374578063e9c3f77d1461037c578063f43cf5d4146103a5578063fa09e630146103ad578063fba713de146103c0575b600080fd5b6101766101713660046117f4565b6103c8565b005b6101766101863660046117c4565b610487565b610194600b5481565b6040519081526020015b60405180910390f35b6101766101b5366004611701565b61054d565b6101cf600080516020611af583398151915281565b60405161019e91906118d4565b6101766101ea366004611701565b6105a1565b6101f76105f5565b60405161019e929190611914565b6101cf7f000000000000000000000000000000000000000000000000000000000000000081565b61017661023a3660046117f4565b610784565b61024761085a565b60405161019e9190611942565b6101946102623660046117c4565b6108b2565b610176610275366004611739565b6108d3565b6102a8610288366004611779565b600160209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161019e565b610247610935565b61019461098b565b6101cf734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d81565b6101946102f13660046117c4565b610a19565b6101946103043660046117c4565b610a29565b610176610317366004611779565b610a39565b61019461032a3660046117c4565b610afa565b610176610b0a565b610194610345366004611701565b600a6020526000908152604090205481565b61035f610c59565b60405161019e9190611901565b610247610c6a565b610247610cc0565b6101cf61038a3660046117c4565b6000602081905290815260409020546001600160a01b031681565b610176610d16565b6101766103bb366004611701565b610e73565b610176610fb6565b6103d133611045565b6103f65760405162461bcd60e51b81526004016103ed906119d2565b60405180910390fd5b604051630441a3e760e41b8152600080516020611af58339815191529063441a3e709061042a906033908690600401611a06565b600060405180830381600087803b15801561044457600080fd5b505af1158015610458573d6000803e3d6000fd5b50505050610464610d16565b610483734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d828461106f565b5050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156104e757600080fd5b505afa1580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f919061171d565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b336105566110c5565b6001600160a01b0316148061057a57503361056f611158565b6001600160a01b0316145b6105965760405162461bcd60e51b81526004016103ed90611988565b610483600682611027565b336105aa6110c5565b6001600160a01b031614806105ce5750336105c3611158565b6001600160a01b0316145b6105ea5760405162461bcd60e51b81526004016103ed90611988565b6104836006826111c9565b606080600061060460086111de565b6001600160401b0381111561062957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610652578160200160208202803683370190505b509050600061066160086111de565b6001600160401b0381111561068657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106af578160200160208202803683370190505b50905060005b806106c060086111de565b111561077a5760006106d36008836111e8565b9050808483815181106106f657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050600a6000826001600160a01b03166001600160a01b031681526020019081526020016000205483838151811061075c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061077281611aae565b9150506106b5565b5090925090509091565b60405163f0723d9760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d97906107d290849086906004016118e8565b60206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082291906117a4565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b606060038054806020026020016040519081016040528092919081815260200182805480156108a857602002820191906000526020600020905b815481526020019060010190808311610894575b5050505050905090565b600581815481106108c257600080fd5b600091825260209091200154905081565b336108dc6110c5565b6001600160a01b031614806109005750336108f5611158565b6001600160a01b0316145b61091c5760405162461bcd60e51b81526004016103ed90611988565b6109306001600160a01b038416838361106f565b505050565b606060048054806020026020016040519081016040528092919081815260200182805480156108a85760200282019190600052602060002090815481526020019060010190808311610894575050505050905090565b6040516393f1a40b60e01b8152603360048201523060248201526000908190600080516020611af5833981519152906393f1a40b90604401604080518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190611823565b5091505090565b600281815481106108c257600080fd5b600481815481106108c257600080fd5b33610a426110c5565b6001600160a01b03161480610a66575033610a5b611158565b6001600160a01b0316145b610a825760405162461bcd60e51b81526004016103ed90611988565b6001600160a01b0382166000908152600a6020526040902054600b548190610aab908490611a14565b610ab59190611a6b565b600b556001600160a01b0383166000908152600a6020526040902082905581610ae957610ae36008846111c9565b50610930565b610af4600884611027565b50505050565b600381815481106108c257600080fd5b610b1333611045565b610b2f5760405162461bcd60e51b81526004016103ed906119d2565b6040516370a0823160e01b8152600090734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d906370a0823190610b699030906004016118d4565b60206040518083038186803b158015610b8157600080fd5b505afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb991906117dc565b9050610be8734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d600080516020611af5833981519152836111f4565b604051631c57762b60e31b8152600080516020611af58339815191529063e2bbb15890610c1c906033908590600401611a06565b600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b50505050610c56610d16565b50565b6060610c6560066112a3565b905090565b606060028054806020026020016040519081016040528092919081815260200182805480156108a85760200282019190600052602060002090815481526020019060010190808311610894575050505050905090565b606060058054806020026020016040519081016040528092919081815260200182805480156108a85760200282019190600052602060002090815481526020019060010190808311610894575050505050905090565b610d1f33611045565b610d3b5760405162461bcd60e51b81526004016103ed906119d2565b60005b80610d4960066111de565b1115610c56576000610d5c6006836111e8565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d8c91906118d4565b60206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc91906117dc565b905060005b80610dec60086111de565b1115610e5d576000610dff6008836111e8565b600b546001600160a01b0382166000908152600a6020526040902054919250610e4a91839190610e2f9087611a4c565b610e399190611a2c565b6001600160a01b038716919061106f565b5080610e5581611aae565b915050610de1565b5050508080610e6b90611aae565b915050610d3e565b610e7c33611045565b610e985760405162461bcd60e51b81526004016103ed906119d2565b600080516020611af583398151915263441a3e706033610eb661098b565b6040518363ffffffff1660e01b8152600401610ed3929190611a06565b600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b50505050610f0d610d16565b6040516370a0823160e01b8152610c56908290734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d906370a0823190610f4a9030906004016118d4565b60206040518083038186803b158015610f6257600080fd5b505afa158015610f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9a91906117dc565b734b946c91c2b1a7d7c40fb3c130cdfbaf8389094d919061106f565b604051630441a3e760e41b8152600080516020611af58339815191529063441a3e7090610feb90603390600090600401611a06565b600060405180830381600087803b15801561100557600080fd5b505af1158015611019573d6000803e3d6000fd5b50505050611025610d16565b565b600061103c836001600160a01b0384166112b7565b90505b92915050565b6001600160a01b031660009081526001602090815260408083206009845290915290205460ff1690565b6109308363a9059cbb60e01b848460405160240161108e9291906118e8565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611306565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561112057600080fd5b505afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c65919061171d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111b557600080fd5b505af1158015611134573d6000803e3d6000fd5b600061103c836001600160a01b0384166113d8565b600061103f825490565b600061103c83836114f5565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127891906117dc565b6112829190611a14565b9050610af48463095ea7b360e01b858460405160240161108e9291906118e8565b606060006112b08361152d565b9392505050565b60008181526001830160205260408120546112fe5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561103f565b50600061103f565b600061135b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115899092919063ffffffff16565b805190915015610930578080602001905181019061137991906117a4565b6109305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ed565b600081815260018301602052604081205480156114eb5760006113fc600183611a6b565b855490915060009061141090600190611a6b565b905081811461149157600086600001828154811061143e57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061146f57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114b057634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061103f565b600091505061103f565b600082600001828154811061151a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561157d57602002820191906000526020600020905b815481526020019060010190808311611569575b50505050509050919050565b606061159884846000856115a0565b949350505050565b6060824710156116015760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ed565b843b61164f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ed565b600080866001600160a01b0316858760405161166b91906118b8565b60006040518083038185875af1925050503d80600081146116a8576040519150601f19603f3d011682016040523d82523d6000602084013e6116ad565b606091505b50915091506116bd8282866116c8565b979650505050505050565b606083156116d75750816112b0565b8251156116e75782518084602001fd5b8160405162461bcd60e51b81526004016103ed9190611955565b600060208284031215611712578081fd5b81356112b081611adf565b60006020828403121561172e578081fd5b81516112b081611adf565b60008060006060848603121561174d578182fd5b833561175881611adf565b9250602084013561176881611adf565b929592945050506040919091013590565b6000806040838503121561178b578182fd5b823561179681611adf565b946020939093013593505050565b6000602082840312156117b5578081fd5b815180151581146112b0578182fd5b6000602082840312156117d5578081fd5b5035919050565b6000602082840312156117ed578081fd5b5051919050565b60008060408385031215611806578182fd5b82359150602083013561181881611adf565b809150509250929050565b60008060408385031215611835578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b8381101561187e5781516001600160a01b031687529582019590820190600101611859565b509495945050505050565b6000815180845260208085019450808401835b8381101561187e5781518752958201959082019060010161189c565b600082516118ca818460208701611a82565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60006020825261103c6020830184611846565b6000604082526119276040830185611846565b82810360208401526119398185611889565b95945050505050565b60006020825261103c6020830184611889565b6000602082528251806020840152611974816040850160208701611a82565b601f01601f19169190910160400192915050565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b6020808252601a90820152794f6e6c7920666f72206c6971756964207969656c6420726f6c6560301b604082015260600190565b918252602082015260400190565b60008219821115611a2757611a27611ac9565b500190565b600082611a4757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611a6657611a66611ac9565b500290565b600082821015611a7d57611a7d611ac9565b500390565b60005b83811015611a9d578181015183820152602001611a85565b83811115610af45750506000910152565b6000600019821415611ac257611ac2611ac9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610c5657600080fdfe000000000000000000000000188bed1968b795d5c9022f6a0bb5931ac4c18f00a264697066735822122048f528bb1cab1b256d271903146ec05a1bdafe5bca420d41f84dc9bf902b7b8c64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "charactersPlayed()": {
        "details": "returns all characters played by this contract (e.g. stable coin, oracle registry)"
      },
      "dependsOnCharacters()": {
        "details": "returns all the character dependencies like FEE_RECIPIENT"
      },
      "dependsOnRoles()": {
        "details": "returns all the roles dependencies of this contract like FUND_TRANSFERER"
      },
      "rolesPlayed()": {
        "details": "returns all roles played by this contract"
      },
      "updateMainCharacterCache(uint256)": {
        "details": "Updates the main character cache for a speciic character"
      },
      "updateRoleCache(uint256,address)": {
        "details": "Updates the role cache for a specific role and address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRewardToken(address)": {
        "notice": "register a reward token"
      },
      "deposit()": {
        "notice": "Deposit balance in LPT to masterchef"
      },
      "forwardReward()": {
        "notice": "Forward rewards to all registered reward recipients"
      },
      "harvestPartially()": {
        "notice": "Harvest yield from masterchef"
      },
      "removeRewardtoken(address)": {
        "notice": "unregister a reward token"
      },
      "rescueFunds(address,address,uint256)": {
        "notice": "Rescue stranded funds"
      },
      "setRewardWeight(address,uint256)": {
        "notice": "Set share of reward that recipient should receive"
      },
      "viewRewardRecipients()": {
        "notice": "View the list of reward recipients"
      },
      "viewRewardTokens()": {
        "notice": "View the list of reward tokens"
      },
      "viewStakedBalance()": {
        "notice": "View how much LPT is staked"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraw LPT from masterchef"
      },
      "withdrawAll(address)": {
        "notice": "Withdraw all LPT from masterchef and forward to recipient"
      }
    },
    "notice": "Holds LPT in masterchef for yield (and forwards yield to redistributor)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29200,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 29206,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 29209,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29212,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29215,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29218,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 18383,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)5499_storage"
      },
      {
        "astId": 18386,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "rewardRecipients",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)5499_storage"
      },
      {
        "astId": 18390,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "rewardRecipientWeight",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18393,
        "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
        "label": "rewardWeightTotal",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AddressSet)5499_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5498,
            "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5198_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5198_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5193,
            "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5197,
            "contract": "contracts/liquid-yield/LyLptHolder.sol:LyLptHolder",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}