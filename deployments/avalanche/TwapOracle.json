{
  "address": "0x4220a06bd4d15b4C3d1f3419AB2Ac8E4768b82B6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SubjectParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        }
      ],
      "name": "SubjectUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bestPairByTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBest",
          "type": "bool"
        }
      ],
      "name": "encodeAndCheckOracleParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "getAmountInPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getPairState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cumulativePrice0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price0FP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyCurrent",
              "type": "uint256"
            }
          ],
          "internalType": "struct TwapOracle.TwapOracleState",
          "name": "oracleState",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "getPegAmountAndBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getTwapReserves",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "res0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "res1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kLast",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupplyLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "initPairState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cumulativePrice0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price0FP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyCurrent",
              "type": "uint256"
            }
          ],
          "internalType": "struct TwapOracle.TwapOracleState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairState",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cumulativePrice0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price0FP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kLast",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupplyLast",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kCurrent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupplyCurrent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "k",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price0FP",
          "type": "uint256"
        }
      ],
      "name": "price0FP2Reserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "res1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setOracleParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBest",
          "type": "bool"
        }
      ],
      "name": "setOracleSpecificParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "setPriceUpdateWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "viewAmountInPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "viewPairState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cumulativePrice0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price0FP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyCurrent",
              "type": "uint256"
            }
          ],
          "internalType": "struct TwapOracle.TwapOracleState",
          "name": "oracleState",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "viewPegAmountAndBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "viewTwapReserves",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "res0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "res1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kLast",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupplyLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb317cdadeacd52602df4688f09da1e664e2d7538a0babb0b53a9abe00ad0a385",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x4220a06bd4d15b4C3d1f3419AB2Ac8E4768b82B6",
    "transactionIndex": 2,
    "gasUsed": "2233267",
    "logsBloom": "0x
    "blockHash": "0xd25f74c4fa5ab9a5061dfd188e30185d14c1fe26ab91263fbaeb7380766855d7",
    "transactionHash": "0xb317cdadeacd52602df4688f09da1e664e2d7538a0babb0b53a9abe00ad0a385",
    "logs": [],
    "blockNumber": 9229606,
    "cumulativeGasUsed": "2402395",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9e1EE00d45252aA58623F7d771FB414aA38f0878"
  ],
  "solcInputHash": "c08fcdf1bf8a33e9484a221e6792b02a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SubjectParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"SubjectUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bestPairByTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBest\",\"type\":\"bool\"}],\"name\":\"encodeAndCheckOracleParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"getAmountInPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getPairState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativePrice0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price0FP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyCurrent\",\"type\":\"uint256\"}],\"internalType\":\"struct TwapOracle.TwapOracleState\",\"name\":\"oracleState\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"getPegAmountAndBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getTwapReserves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"res0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"res1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyLast\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"initPairState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativePrice0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price0FP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyCurrent\",\"type\":\"uint256\"}],\"internalType\":\"struct TwapOracle.TwapOracleState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativePrice0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price0FP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyCurrent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price0FP\",\"type\":\"uint256\"}],\"name\":\"price0FP2Reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"res1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setOracleParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBest\",\"type\":\"bool\"}],\"name\":\"setOracleSpecificParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setPriceUpdateWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"viewAmountInPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"viewPairState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativePrice0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price0FP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyCurrent\",\"type\":\"uint256\"}],\"internalType\":\"struct TwapOracle.TwapOracleState\",\"name\":\"oracleState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"viewPegAmountAndBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"viewTwapReserves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"res0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"res1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyLast\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"charactersPlayed()\":{\"details\":\"returns all characters played by this contract (e.g. stable coin, oracle registry)\"},\"dependsOnCharacters()\":{\"details\":\"returns all the character dependencies like FEE_RECIPIENT\"},\"dependsOnRoles()\":{\"details\":\"returns all the roles dependencies of this contract like FUND_TRANSFERER\"},\"rolesPlayed()\":{\"details\":\"returns all roles played by this contract\"},\"updateMainCharacterCache(uint256)\":{\"details\":\"Updates the main character cache for a speciic character\"},\"updateRoleCache(uint256,address)\":{\"details\":\"Updates the role cache for a specific role and address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndCheckOracleParams(address,address,address,bool)\":{\"notice\":\"Encode params for initialization\"},\"getAmountInPeg(address,uint256,address)\":{\"notice\":\"Update twap price and get corresponding peg amount\"},\"getPairState(address)\":{\"notice\":\"Retrieve TwapOracleState of pair, updating\"},\"getTwapReserves(address)\":{\"notice\":\"Update reserves of a pair in a time weighted manner\"},\"initPairState(address)\":{\"notice\":\"Init price via reserves\"},\"price0FP2Reserves(uint256,uint256)\":{\"notice\":\"Convert price to reserves\"},\"setOracleSpecificParams(address,address,address,bool)\":{\"notice\":\"Set up oracle based on a pair and whether we prefer this one\"},\"setPriceUpdateWindow(uint256)\":{\"notice\":\"Time window after which price is updated\"},\"viewAmountInPeg(address,uint256,address)\":{\"notice\":\"View amount in peg via twap price\"},\"viewPairState(address)\":{\"notice\":\"View TwapOracleState of pair\"},\"viewTwapReserves(address)\":{\"notice\":\"view reserves of a pair in a time weighted manner\"}},\"notice\":\"Use UniswapV2-compatible pairs to kepp up a twap oracle In all this one must be careful of staleness\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/TwapOracle.sol\":\"TwapOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/OracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./oracles/OracleAware.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./roles/DependsOnOracleListener.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\n/// Central hub and router for all oracles\\ncontract OracleRegistry is RoleAware, DependsOracleListener {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    mapping(address => mapping(address => address)) public tokenOracle;\\n    mapping(address => mapping(address => EnumerableSet.AddressSet))\\n        internal _listeners;\\n    mapping(address => uint256) public borrowablePer10ks;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(ORACLE_REGISTRY);\\n    }\\n\\n    function setBorrowable(address token, uint256 borrowablePer10k)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowablePer10ks[token] = borrowablePer10k;\\n        emit SubjectParameterUpdated(\\\"borrowable\\\", token, borrowablePer10k);\\n    }\\n\\n    /// Initialize oracle for a specific token\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        address oracle,\\n        uint256 borrowablePer10k,\\n        bool primary,\\n        bytes calldata data\\n    ) external onlyOwnerExecActivator {\\n        borrowablePer10ks[token] = borrowablePer10k;\\n        IOracle(oracle).setOracleParams(\\n            token,\\n            pegCurrency,\\n            data\\n        );\\n\\n        // only overwrite oracle and update listeners if update is for a primary\\n        // or there is no pre-existing oracle\\n        address previousOracle = tokenOracle[token][pegCurrency];\\n        if (previousOracle == address(0) || primary) {\\n            tokenOracle[token][pegCurrency] = oracle;\\n\\n            EnumerableSet.AddressSet storage listeners = _listeners[token][\\n                pegCurrency\\n            ];\\n            for (uint256 i; listeners.length() > i; i++) {\\n                OracleAware(listeners.at(i)).newCurrentOracle(\\n                    token,\\n                    pegCurrency\\n                );\\n            }\\n        }\\n\\n        emit SubjectParameterUpdated(\\\"borrowable\\\", token, borrowablePer10k);\\n    }\\n\\n    /// Which oracle contract is currently responsible for a token is cached\\n    /// This updates\\n    function listenForCurrentOracleUpdates(address token, address pegCurrency)\\n        external\\n        returns (address)\\n    {\\n        require(isOracleListener(msg.sender), \\\"Not allowed to listen\\\");\\n        _listeners[token][pegCurrency].add(msg.sender);\\n        return tokenOracle[token][pegCurrency];\\n    }\\n\\n    /// View converted value in currently registered oracle\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view returns (uint256) {\\n        return\\n            IOracle(tokenOracle[token][pegCurrency]).viewAmountInPeg(\\n                token,\\n                inAmount,\\n                pegCurrency\\n            );\\n    }\\n\\n    /// View amounts for an array of tokens\\n    function viewAmountsInPeg(\\n        address[] calldata tokens,\\n        uint256[] calldata inAmounts,\\n        address pegCurrency\\n    ) external view returns (uint256[] memory) {\\n        uint256[] memory result = new uint256[](inAmounts.length);\\n        for (uint256 i; inAmounts.length > i; i++) {\\n            result[i] = viewAmountInPeg(tokens[i], inAmounts[i], pegCurrency);\\n        }\\n        return result;\\n    }\\n\\n    /// Update converted value in currently registered oracle\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public returns (uint256) {\\n        return\\n            IOracle(tokenOracle[token][pegCurrency]).getAmountInPeg(\\n                token,\\n                inAmount,\\n                pegCurrency\\n            );\\n    }\\n\\n    /// Get amounts for an array of tokens\\n    function getAmountsInPeg(\\n        address[] calldata tokens,\\n        uint256[] calldata inAmounts,\\n        address pegCurrency\\n    ) external returns (uint256[] memory) {\\n        uint256[] memory result = new uint256[](inAmounts.length);\\n        for (uint256 i; inAmounts.length > i; i++) {\\n            result[i] = getAmountInPeg(tokens[i], inAmounts[i], pegCurrency);\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x21599f218d23d3adf37062e4e0f25b37077a1bbdb37a0a1eb0bd87c5f7d1c4fb\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\n\\nabstract contract TrancheIDAware is RoleAware, DependsOnTrancheIDService {\\n    uint256 immutable totalTrancheSlots;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        totalTrancheSlots = TrancheIDService(\\n            Roles(_roles).mainCharacters(TRANCHE_ID_SERVICE)\\n        ).totalTrancheSlots();\\n    }\\n\\n    mapping(uint256 => address) _slotTranches;\\n\\n    function tranche(uint256 trancheId) public view returns (address) {\\n        uint256 slot = trancheId % totalTrancheSlots;\\n        address trancheContract = _slotTranches[slot];\\n        if (trancheContract == address(0)) {\\n            trancheContract = trancheIdService().slotTranches(slot);\\n        }\\n\\n        return trancheContract;\\n    }\\n}\\n\",\"keccak256\":\"0x5bb76f49729b9c9f20e09c82bd52888c63eece2d947b81141b5c4dec4caf4fa6\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnTranche.sol\\\";\\n\\ncontract TrancheIDService is RoleAware, DependsOnTranche {\\n    uint256 public constant totalTrancheSlots = 1e8;\\n    uint256 public nextTrancheSlot = 1;\\n\\n    struct TrancheSlot {\\n        uint256 nextTrancheIdRange;\\n        uint256 trancheSlot;\\n    }\\n\\n    mapping(address => TrancheSlot) public trancheSlots;\\n    mapping(uint256 => address) public slotTranches;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function getNextTrancheId() external returns (uint256 id) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        TrancheSlot storage slot = trancheSlots[msg.sender];\\n        require(slot.trancheSlot != 0, \\\"Caller doesn't have a slot\\\");\\n        id = slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n        slot.nextTrancheIdRange++;\\n    }\\n\\n    function setupTrancheSlot() external returns (TrancheSlot memory) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        require(\\n            trancheSlots[msg.sender].trancheSlot == 0,\\n            \\\"Tranche already has a slot\\\"\\n        );\\n        trancheSlots[msg.sender] = TrancheSlot({\\n            nextTrancheIdRange: 1,\\n            trancheSlot: nextTrancheSlot\\n        });\\n        slotTranches[nextTrancheSlot] = msg.sender;\\n        nextTrancheSlot++;\\n        return trancheSlots[msg.sender];\\n    }\\n\\n    function viewNextTrancheId(address trancheContract)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheSlot storage slot = trancheSlots[trancheContract];\\n        return slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n    }\\n\\n    function viewTrancheContractByID(uint256 trancheId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return slotTranches[trancheId % totalTrancheSlots];\\n    }\\n\\n    function viewSlotByTrancheContract(address tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return trancheSlots[tranche].trancheSlot;\\n    }\\n}\\n\",\"keccak256\":\"0x2ff50771604993c3d0c405e26e33a054d55c7e5291e41993086c0c911a9d97fc\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/RoleAware.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\n/// Abstract base for oracles, concerned with parameter init\\nabstract contract Oracle is IOracle, RoleAware, DependsOnOracleRegistry {\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        bytes calldata data\\n    ) external override {\\n        require(\\n            address(oracleRegistry()) == msg.sender,\\n            \\\"Not authorized to init oracle\\\"\\n        );\\n        _setOracleParams(token, pegCurrency, data);\\n        emit SubjectUpdated(\\\"oracle params\\\", token);\\n    }\\n\\n    function _setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        bytes memory data\\n    ) internal virtual;\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view override returns (uint256, uint256) {\\n        return (\\n            viewAmountInPeg(token, inAmount, pegCurrency),\\n            oracleRegistry().borrowablePer10ks(token)\\n        );\\n    }\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external override returns (uint256, uint256) {\\n        return (\\n            getAmountInPeg(token, inAmount, pegCurrency),\\n            oracleRegistry().borrowablePer10ks(token)\\n        );\\n    }\\n\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view virtual override returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public virtual override returns (uint256);\\n}\\n\",\"keccak256\":\"0x2377bd9f145cf4a581e302a3a6ef12ffb501cc6fdfbd91a300470fbe16bfd09a\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../TrancheIDAware.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\n/// Mixin for contracts that depend on oracles, caches current oracles\\n/// resposible for a token pair\\nabstract contract OracleAware is RoleAware, DependsOnOracleRegistry {\\n    mapping(address => mapping(address => address)) public _oracleCache;\\n\\n    constructor() {\\n        _rolesPlayed.push(ORACLE_LISTENER);\\n    }\\n\\n    /// Notify contract to update oracle cache\\n    function newCurrentOracle(address token, address pegCurrency) external {\\n        // make sure we don't init cache if we aren't listening\\n        if (_oracleCache[token][pegCurrency] != address(0)) {\\n            _oracleCache[token][pegCurrency] = oracleRegistry().tokenOracle(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    /// get current oracle and subscribe to cache updates if necessary\\n    function _getOracle(address token, address pegCurrency)\\n        internal\\n        returns (address oracle)\\n    {\\n        oracle = _oracleCache[token][pegCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().listenForCurrentOracleUpdates(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    /// View value of a token amount in value currency\\n    function _viewValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        return IOracle(oracle).viewAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    /// Get value of a token amount in value currency, updating oracle state\\n    function _getValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value) {\\n        address oracle = _getOracle(token, valueCurrency);\\n\\n        return IOracle(oracle).getAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    /// View value and borrowable together\\n    function _viewValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value, uint256 borrowablePer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        (value, borrowablePer10k) = IOracle(oracle).viewPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n    }\\n\\n    /// Retrieve value (updating oracle) as well as borrowable per 10k\\n    function _getValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value, uint256 borrowablerPer10k) {\\n        address oracle = _getOracle(token, valueCurrency);\\n\\n        (value, borrowablerPer10k) = IOracle(oracle).getPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x84ec21cfad9d2b01854792e7d372071cc8017704e67e5db8c29bbc9794af63e7\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/TwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\n/// Use UniswapV2-compatible pairs to kepp up a twap oracle\\n/// In all this one must be careful of staleness\\ncontract TwapOracle is Oracle {\\n    uint256 constant FP112 = 2**112;\\n    uint256 constant FP56 = 2**56;\\n\\n    struct TwapOracleState {\\n        address token0;\\n        address token1;\\n        uint256 cumulativePrice0;\\n        uint256 price0FP;\\n        uint256 lastUpdated;\\n        uint256 kLast;\\n        uint256 totalSupplyLast;\\n        uint256 kCurrent;\\n        uint256 totalSupplyCurrent;\\n    }\\n\\n    mapping(address => TwapOracleState) public pairState;\\n\\n    mapping(address => mapping(address => address)) public bestPairByTokens;\\n\\n    uint256 priceUpdateWindow = 5 minutes;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TWAP_ORACLE);\\n    }\\n\\n    /// View TwapOracleState of pair\\n    function viewPairState(address pair)\\n        public\\n        view\\n        returns (TwapOracleState memory oracleState)\\n    {\\n        oracleState = pairState[pair];\\n\\n        (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\\n        uint256 timeDelta = pairLastUpdated - oracleState.lastUpdated;\\n\\n        if (timeDelta > priceUpdateWindow) {\\n            uint256 newCumul0 = IUniswapV2Pair(pair).price0CumulativeLast();\\n            oracleState.price0FP =\\n                (newCumul0 - oracleState.cumulativePrice0) /\\n                timeDelta;\\n            oracleState.cumulativePrice0 = newCumul0;\\n            oracleState.lastUpdated = pairLastUpdated;\\n\\n            oracleState.kLast = oracleState.kCurrent;\\n            oracleState.totalSupplyLast = oracleState.totalSupplyCurrent;\\n            oracleState.kCurrent = IUniswapV2Pair(pair).kLast();\\n            oracleState.totalSupplyCurrent = IUniswapV2Pair(pair).totalSupply();\\n        }\\n    }\\n\\n    /// Retrieve TwapOracleState of pair, updating\\n    function _getPairState(address pair)\\n        internal\\n        returns (TwapOracleState storage oracleState)\\n    {\\n        oracleState = pairState[pair];\\n\\n        (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\\n        uint256 timeDelta = pairLastUpdated - oracleState.lastUpdated;\\n\\n        if (timeDelta > priceUpdateWindow) {\\n            uint256 newCumul0 = IUniswapV2Pair(pair).price0CumulativeLast();\\n            oracleState.price0FP =\\n                (newCumul0 - oracleState.cumulativePrice0) /\\n                timeDelta;\\n            oracleState.cumulativePrice0 = newCumul0;\\n            oracleState.lastUpdated = pairLastUpdated;\\n\\n            oracleState.kLast = oracleState.kCurrent;\\n            oracleState.totalSupplyLast = oracleState.totalSupplyCurrent;\\n            oracleState.kCurrent = IUniswapV2Pair(pair).kLast();\\n            oracleState.totalSupplyCurrent = IUniswapV2Pair(pair).totalSupply();\\n        }\\n    }\\n\\n    /// Retrieve TwapOracleState of pair, updating\\n    function getPairState(address pair)\\n        external\\n        returns (TwapOracleState memory oracleState)\\n    {\\n        return _getPairState(pair);\\n    }\\n\\n    /// View amount in peg via twap price\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view virtual override returns (uint256) {\\n        (address token0, address token1) = sortTokens(token, pegCurrency);\\n        TwapOracleState memory oracleState = viewPairState(\\n            bestPairByTokens[token0][token1]\\n        );\\n        if (token == token0) {\\n            return (inAmount * oracleState.price0FP) / FP112;\\n        } else {\\n            return (inAmount * FP112) / oracleState.price0FP;\\n        }\\n    }\\n\\n    /// Update twap price and get corresponding peg amount\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public virtual override returns (uint256) {\\n        (address token0, address token1) = sortTokens(token, pegCurrency);\\n        TwapOracleState storage oracleState = _getPairState(\\n            bestPairByTokens[token0][token1]\\n        );\\n        if (token == token0) {\\n            return (inAmount * oracleState.price0FP) / FP112;\\n        } else {\\n            return (inAmount * FP112) / oracleState.price0FP;\\n        }\\n    }\\n\\n    /// Init price via reserves\\n    function initPairState(address pair)\\n        public\\n        returns (TwapOracleState memory)\\n    {\\n        TwapOracleState storage oracleState = pairState[pair];\\n\\n        // To avoid sandwich attacks on this activation call getAmountInPeg once more\\n        // before releasing to public\\n        if (oracleState.token0 == address(0)) {\\n            IUniswapV2Pair uniPair = IUniswapV2Pair(pair);\\n\\n            (\\n                uint112 reserve0,\\n                uint112 reserve1,\\n                uint256 pairLastUpdated\\n            ) = uniPair.getReserves();\\n\\n            uint256 kLast = uniPair.kLast();\\n            uint256 totalSupply = uniPair.totalSupply();\\n            pairState[pair] = TwapOracleState({\\n                token0: uniPair.token0(),\\n                token1: uniPair.token1(),\\n                cumulativePrice0: uniPair.price0CumulativeLast(),\\n                price0FP: (FP112 * reserve1) / reserve0,\\n                lastUpdated: pairLastUpdated,\\n                kLast: kLast,\\n                kCurrent: kLast,\\n                totalSupplyLast: totalSupply,\\n                totalSupplyCurrent: totalSupply\\n            });\\n\\n            return pairState[pair];\\n        } else {\\n            return _getPairState(pair);\\n        }\\n    }\\n\\n    /// Time window after which price is updated\\n    function setPriceUpdateWindow(uint256 window)\\n        external\\n        onlyOwnerExecDisabler\\n    {\\n        priceUpdateWindow = window;\\n        emit ParameterUpdated(\\\"price update window\\\", window);\\n    }\\n\\n    /// Update reserves of a pair in a time weighted manner\\n    function getTwapReserves(address pair)\\n        external\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 res0,\\n            uint256 res1,\\n            uint256 kLast,\\n            uint256 totalSupplyLast\\n        )\\n    {\\n        TwapOracleState storage oracleState = _getPairState(pair);\\n\\n        (res0, res1) = price0FP2Reserves(\\n            oracleState.kLast,\\n            oracleState.price0FP\\n        );\\n        token0 = oracleState.token0;\\n        token1 = oracleState.token1;\\n\\n        kLast = oracleState.kLast;\\n        totalSupplyLast = oracleState.totalSupplyLast;\\n    }\\n\\n    /// view reserves of a pair in a time weighted manner\\n    function viewTwapReserves(address pair)\\n        external\\n        view\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 res0,\\n            uint256 res1,\\n            uint256 kLast,\\n            uint256 totalSupplyLast\\n        )\\n    {\\n        TwapOracleState memory oracleState = viewPairState(pair);\\n\\n        (res0, res1) = price0FP2Reserves(\\n            oracleState.kLast,\\n            oracleState.price0FP\\n        );\\n        token0 = oracleState.token0;\\n        token1 = oracleState.token1;\\n\\n        kLast = oracleState.kLast;\\n        totalSupplyLast = oracleState.totalSupplyLast;\\n    }\\n\\n    /// Convert price to reserves\\n    function price0FP2Reserves(uint256 k, uint256 price0FP)\\n        public\\n        pure\\n        returns (uint256 res0, uint256 res1)\\n    {\\n        // price0FP ~= FP112 * res1 / res0 and k = res1 * res0\\n        // => k * price0FP = FP112 * res1 / res0 * res1 * res0\\n        // => k * price0FP / FP112 = res1^2\\n        // => res0 = sqrt(k * price1FP / FP112) and price1FP = FP112 * 1 / (price0FP / FP112)\\n        // => res0 = sqrt(k * FP112 / price0FP)\\n        if (k > price0FP) {\\n            res0 = sqrt((((k * FP56) / price0FP) * FP56));\\n        } else {\\n            // for small k scale up completely first\\n            res0 = sqrt((k * FP112) / price0FP);\\n        }\\n        res1 = k / res0;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n\\n    /// returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Identical address!\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address!\\\");\\n    }\\n\\n    /// Set up oracle based on a pair and whether we prefer this one\\n    function setOracleSpecificParams(\\n        address fromToken,\\n        address toToken,\\n        address pair,\\n        bool isBest\\n    ) external onlyOwnerExec {\\n        _setOracleSpecificParams(fromToken, toToken, pair, isBest);\\n        emit SubjectUpdated(\\\"oracle specific params\\\", fromToken);\\n    }\\n\\n    /// Set up pair, initializing pair state\\n    /// Note: vulnerable to sandwich attack if lending starts immediately\\n    function _setOracleSpecificParams(\\n        address fromToken,\\n        address toToken,\\n        address pair,\\n        bool isBest\\n    ) internal {\\n        (address token0, address token1) = sortTokens(fromToken, toToken);\\n        require(\\n            IUniswapV2Pair(pair).token0() == token0 &&\\n                IUniswapV2Pair(pair).token1() == token1,\\n            \\\"Pair does not match tokens\\\"\\n        );\\n        initPairState(pair);\\n\\n        if (isBest) {\\n            bestPairByTokens[token0][token1] = pair;\\n        }\\n    }\\n\\n    /// Set up the pair for a twap oracle\\n    function _setOracleParams(\\n        address fromToken,\\n        address toToken,\\n        bytes memory data\\n    ) internal override {\\n        (address pair, bool isBest) = abi.decode(data, (address, bool));\\n        _setOracleSpecificParams(fromToken, toToken, pair, isBest);\\n    }\\n\\n    /// Encode params for initialization\\n    function encodeAndCheckOracleParams(\\n        address tokenFrom,\\n        address tokenTo,\\n        address pair,\\n        bool isBest\\n    ) external view returns (bool, bytes memory) {\\n        (address token0, address token1) = sortTokens(tokenFrom, tokenTo);\\n        TwapOracleState storage state = pairState[pair];\\n        bool matches = state.token0 == token0 && state.token1 == token1;\\n\\n        if (isBest) {\\n            matches = matches && bestPairByTokens[token0][token1] == pair;\\n        }\\n\\n        return (matches, abi.encode(pair, isBest));\\n    }\\n}\\n\",\"keccak256\":\"0xd316117fefc2880fe44904b7e3505350f2832ee0a40d4d9b51782208fc232b77\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title DependentContract.\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    /// @dev returns all characters played by this contract (e.g. stable coin, oracle registry)\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    /// @dev returns all roles played by this contract\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    /// @dev returns all the character dependencies like FEE_RECIPIENT\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    /// @dev returns all the roles dependencies of this contract like FUND_TRANSFERER\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xaea783afd230965aa519d2cc53f26a44f3f507b8d2089b8092c09caf35bd0d81\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleListener.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOracleListener is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(ORACLE_LISTENER);\\n    }\\n\\n    function isOracleListener(address contr) internal view returns (bool) {\\n        return roleCache[contr][ORACLE_LISTENER];\\n    }\\n}\\n\",\"keccak256\":\"0x12ae03a26b336364f75b3e9f720808e9685e7e18d52d71b4f7e166a0cce87540\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\n\\nabstract contract DependsOnOracleRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(ORACLE_REGISTRY);\\n    }\\n\\n    function oracleRegistry() internal view returns (OracleRegistry) {\\n        return OracleRegistry(mainCharacterCache[ORACLE_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xfbac5de676c7a5e178c70f897c70e366c39de56fe07c830ca8733a2ff1ebcfd3\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnTranche is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(TRANCHE);\\n    }\\n\\n    function isTranche(address contr) internal view returns (bool) {\\n        return roleCache[contr][TRANCHE];\\n    }\\n}\\n\",\"keccak256\":\"0x6e67b0afd0d3fc00998b226343fef13aeca167d19eb8cec8b8a55ebf96063962\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../TrancheIDService.sol\\\";\\n\\nabstract contract DependsOnTrancheIDService is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function trancheIdService() internal view returns (TrancheIDService) {\\n        return TrancheIDService(mainCharacterCache[TRANCHE_ID_SERVICE]);\\n    }\\n}\\n\",\"keccak256\":\"0x88e728c6f64f4e84351f9eaa921bfca6f3dc22b58d433d8077a844edb9bd93c1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    event SubjectUpdated(string param, address subject);\\n    event ParameterUpdated(string param, uint256 value);\\n    event SubjectParameterUpdated(string param, address subject, uint256 value);\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Roles: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or disabler\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or activator\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Updates the role cache for a specific role and address\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.roles(contr, role);\\n    }\\n\\n    /// @dev Updates the main character cache for a speciic character\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    /// @dev returns the owner's address\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    /// @dev returns the executor address\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    /// @dev returns the disabler address\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    /// @dev checks whether the passed address is activator or not\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.roles(contr, ACTIVATOR);\\n    }\\n}\\n\",\"keccak256\":\"0xeb75105e3789b321336a2f2e81a32ba0b8136809e9e7184629650a374b094871\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant TRANCHE_TRANSFERER = 5;\\nuint256 constant UNDERWATER_LIQUIDATOR = 6;\\nuint256 constant LIQUIDATION_PROTECTED = 7;\\n\\nuint256 constant PROTOCOL_TOKEN = 100;\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\nuint256 constant CURVE_POOL = 109;\\nuint256 constant ISOLATED_LENDING_LIQUIDATION = 110;\\n\\nuint256 constant DIRECT_LIQUIDATOR = 200;\\nuint256 constant LPT_LIQUIDATOR = 201;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev assign role to an account\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    /// @dev revoke role of a particular account\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    /// @dev set main character\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    /// @dev returns the current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3943a3a26be2ad50eb6076423d5048f0820430d001e29347eb880958240124a8\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256);\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256, uint256);\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256, uint256);\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// TODO: compatible with NFTs\\n\",\"keccak256\":\"0x6ef05e6a5a8e53c294f12218d9f1f3720fe443576f2a576a7342402d5648fe01\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405261012c6008553480156200001757600080fd5b50604051620026eb380380620026eb8339810160408190526200003a916200011e565b806001600160a01b038116620000a15760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b03191660805250600280546001808201909255606a7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910155600480549182018155600052606c7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909101556200014e565b60006020828403121562000130578081fd5b81516001600160a01b038116811462000147578182fd5b9392505050565b60805160601c61255b62000190600039600081816101b9015281816107fc01528181610aa001528181611afa01528181611b920152611dd9015261255b6000f3fe608060405234801561001057600080fd5b506004361061015e5760003560e01c80622d5f1c14610163578063071060a61461018c57806332f42fe6146101a1578063392f5f64146101b45780633f0eaeb5146101e8578063447d52ba146102095780634a7a7f411461021c5780634fcd54a414610231578063576cbc30146102595780636caa9c111461027a5780637a1a04df1461028d5780637dad209b146102cb57806384686ff6146102d3578063885fa0561461031e5780638eaab58c14610331578063a08cba2514610344578063a6ce223314610357578063abcbc4fc1461036a578063aeb38d8b1461037d578063af64e6cd14610390578063b33693b2146103a3578063b6ef3672146103b6578063bf184ea41461046a578063dc94cb7d1461047d578063e4f50de214610485578063e8ea4fae14610498578063e9c3f77d146104a0578063ef6eeded146104c9578063f70330ce146104dc575b600080fd5b61017661017136600461207d565b610510565b60405161018391906123f7565b60405180910390f35b61019f61019a3660046122cd565b6107e6565b005b61019f6101af366004612176565b6108ac565b6101db7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101839190612342565b6101fb6101f636600461211b565b6109a8565b60405161018392919061239a565b61019f6102173660046122fd565b610a7a565b610224610b52565b6040516101839190612356565b61024461023f36600461222d565b610baa565b60408051928352602083019190915201610183565b61026c61026736600461222d565b610c47565b604051908152602001610183565b61026c6102883660046122cd565b610cee565b6102bb61029b366004612202565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610183565b610224610d0f565b6102e66102e136600461207d565b610d65565b604080516001600160a01b039788168152969095166020870152938501929092526060840152608083015260a082015260c001610183565b61024461032c36600461222d565b610db5565b61026c61033f36600461222d565b610dc3565b61019f61035236600461211b565b610e4f565b61019f6103653660046122cd565b610f3d565b61026c6103783660046122cd565b611055565b61026c61038b3660046122cd565b611065565b61024461039e366004612321565b611075565b6101766103b136600461207d565b6110e5565b61041b6103c436600461207d565b60066020819052600091825260409091208054600182015460028301546003840154600485015460058601549686015460078701546008909701546001600160a01b03968716989690951696939592949193909189565b604080516001600160a01b039a8b1681529990981660208a0152968801959095526060870193909352608086019190915260a085015260c084015260e083015261010082015261012001610183565b61026c6104783660046122cd565b61116d565b61022461117d565b6102e661049336600461207d565b6111d3565b61022461122f565b6101db6104ae3660046122cd565b6000602081905290815260409020546001600160a01b031681565b6101766104d736600461207d565b611285565b6101db6104ea3660046120ee565b60076020908152600092835260408084209091529082529020546001600160a01b031681565b610518612008565b506001600160a01b03808216600081815260066020818152604080842081516101208101835281548816815260018201549097169287019290925260028201548682015260038201546060808801919091526004808401546080890152600584015460a08901529383015460c0880152600783015460e08801526008909201546101008701528051630240bc6b60e21b81529051939493630902f1ac938281019392829003018186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610606919061228a565b63ffffffff1692505050600082608001518261062291906124b2565b90506008548111156107df576000846001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a191906122e5565b9050818460400151826106b491906124b2565b6106be9190612473565b606085015260408085018290526080850184905260e085015160a086015261010085015160c08601528051637464fc3d60e01b815290516001600160a01b03871691637464fc3d916004808301926020929190829003018186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d91906122e5565b8460e0018181525050846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d791906122e5565b610100850152505b5050919050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190612099565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b336108b561175e565b6001600160a01b0316146109105760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420617574686f72697a656420746f20696e6974206f7261636c6500000060448201526064015b60405180910390fd5b610951848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061179692505050565b60408051818152600d918101919091526c6f7261636c6520706172616d7360981b60608201526001600160a01b0385166020820152600080516020612506833981519152906080015b60405180910390a150505050565b600060606000806109b988886117c4565b6001600160a01b0380891660009081526006602052604081208054949650929450919281169085161480156109fd575060018201546001600160a01b038481169116145b90508615610a3e57808015610a3b57506001600160a01b03848116600090815260076020908152604080832087851684529091529020548116908916145b90505b604080516001600160a01b039990991660208a015296151588880152865180890388018152606090980190965250939794965093945050505050565b60405163f0723d9760e01b81526001600160a01b038281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f0723d979060440160206040518083038186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a919061226e565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b60606003805480602002602001604051908101604052809291908181526020018280548015610ba057602002820191906000526020600020905b815481526020019060010190808311610b8c575b5050505050905090565b600080610bb8858585610dc3565b610bc061175e565b6001600160a01b03166315c2ba50876040518263ffffffff1660e01b8152600401610beb9190612342565b60206040518083038186803b158015610c0357600080fd5b505afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906122e5565b91509150935093915050565b6000806000610c5686856117c4565b6001600160a01b03808316600090815260076020908152604080832084861684529091528120549395509193509091610c8f9116611893565b9050826001600160a01b0316876001600160a01b03161415610cd457600160701b816003015487610cc09190612493565b610cca9190612473565b9350505050610ce7565b6003810154610cc0600160701b88612493565b9392505050565b60058181548110610cfe57600080fd5b600091825260209091200154905081565b60606004805480602002602001604051908101604052809291908181526020018280548015610ba05760200282019190600052602060002090815481526020019060010190808311610b8c575050505050905090565b6000806000806000806000610d7988610510565b9050610d8d8160a001518260600151611075565b8251602084015160a085015160c090950151919c909b50929950909750919550909350915050565b600080610bb8858585610c47565b6000806000610dd286856117c4565b6001600160a01b03808316600090815260076020908152604080832084861684529091528120549395509193509091610e0b9116610510565b9050826001600160a01b0316876001600160a01b03161415610e3c57600160701b816060015187610cc09190612493565b6060810151610cc0600160701b88612493565b33610e58611af6565b6001600160a01b03161480610e7c575033610e71611b8e565b6001600160a01b0316145b610edb5760405162461bcd60e51b815260206004820152602a60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604482015269391032bc32b1baba37b960b11b6064820152608401610907565b610ee784848484611bff565b60408051818152601691810191909152756f7261636c6520737065636966696320706172616d7360501b60608201526001600160a01b03851660208201526000805160206125068339815191529060800161099a565b33610f46611af6565b6001600160a01b03161480610f6a575033610f5f611b8e565b6001600160a01b0316145b80610f84575033610f79611dbf565b6001600160a01b0316145b610ff15760405162461bcd60e51b815260206004820152603860248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f604482015277391037b91030baba3437b934bd32b2103234b9b0b13632b960411b6064820152608401610907565b600881905560408051818152601381830152727072696365207570646174652077696e646f7760681b60608201526020810183905290517f3a64504f0bc0c335e2aecb78638a257e0351a3fe0370861fd54ee4190b9209339181900360800190a150565b60028181548110610cfe57600080fd5b60048181548110610cfe57600080fd5b600080828411156110b3576110ac600160381b846110938288612493565b61109d9190612473565b6110a79190612493565b611e23565b91506110d2565b6110cf836110c5600160701b87612493565b6110a79190612473565b91505b6110dc8285612473565b90509250929050565b6110ed612008565b6110f682611893565b604080516101208101825282546001600160a01b03908116825260018401541660208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260089091015461010082015290505b919050565b60038181548110610cfe57600080fd5b60606002805480602002602001604051908101604052809291908181526020018280548015610ba05760200282019190600052602060002090815481526020019060010190808311610b8c575050505050905090565b60008060008060008060006111e788611893565b90506111fb81600501548260030154611075565b8254600184015460058501546006909501546001600160a01b039283169d929091169b509299509097509195509350915050565b60606005805480602002602001604051908101604052809291908181526020018280548015610ba05760200282019190600052602060002090815481526020019060010190808311610b8c575050505050905090565b61128d612008565b6001600160a01b03808316600090815260066020526040902080549091166116dd5760008390506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112f257600080fd5b505afa158015611306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132a919061228a565b63ffffffff169250925092506000846001600160a01b0316637464fc3d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137157600080fd5b505afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a991906122e5565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e657600080fd5b505afa1580156113fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141e91906122e5565b9050604051806101200160405280876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d9190612099565b6001600160a01b03168152602001876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c9190612099565b6001600160a01b03168152602001876001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561156357600080fd5b505afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b91906122e5565b8152602001866001600160701b0316866001600160701b0316600160701b6115c39190612493565b6115cd9190612473565b81526020808201959095526040808201859052606080830185905260808084019690965260a0928301949094526001600160a01b038c81166000908152600680895290839020855181546001600160a01b03199081169185169182178355878b01516001840180549092169516948517905586850151600283018190558789015160038401819055888b015160048501819055898901516005860181905560c0808c015197870188905560e0808d0151600789018190556101009d8e015160089099018990558b5161012081018d529788529f8701999099529885019390935299830152988101979097529386019690965290840194909452928201939093529182015294506111689350505050565b6116e683611893565b604080516101208101825282546001600160a01b03908116825260018401541660208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260089091015461010082015291506111689050565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b600080828060200190518101906117ad91906120b5565b915091506117bd85858484611bff565b5050505050565b600080826001600160a01b0316846001600160a01b0316141561181e5760405162461bcd60e51b81526020600482015260126024820152714964656e746963616c20616464726573732160701b6044820152606401610907565b826001600160a01b0316846001600160a01b03161061183e578284611841565b83835b90925090506001600160a01b03821661188c5760405162461bcd60e51b815260206004820152600d60248201526c5a65726f20616464726573732160981b6044820152606401610907565b9250929050565b6001600160a01b0381166000818152600660205260408082208151630240bc6b60e21b81529151909391630902f1ac916004808301926060929190829003018186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191a919061228a565b63ffffffff1692505050600082600401548261193691906124b2565b90506008548111156107df576000846001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b591906122e5565b9050818460020154826119c891906124b2565b6119d29190612473565b6003850155600284018190556004808501849055600785015460058601556008850154600686015560408051637464fc3d60e01b815290516001600160a01b03881692637464fc3d92808201926020929091829003018186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7091906122e5565b8460070181905550846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ab157600080fd5b505afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae991906122e5565b6008850155505050919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5157600080fd5b505afa158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b899190612099565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611beb57600080fd5b505af1158015611b65573d6000803e3d6000fd5b600080611c0c86866117c4565b91509150816001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5357600080fd5b505afa158015611c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8b9190612099565b6001600160a01b0316148015611d225750806001600160a01b0316846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611cdf57600080fd5b505afa158015611cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d179190612099565b6001600160a01b0316145b611d6b5760405162461bcd60e51b815260206004820152601a6024820152795061697220646f6573206e6f74206d6174636820746f6b656e7360301b6044820152606401610907565b611d7484611285565b508215611db7576001600160a01b0382811660009081526007602090815260408083208585168452909152902080546001600160a01b0319169186169190911790555b505050505050565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b158015611b5157600080fd5b600081611e3257506000611168565b50600181600160801b8110611e4c5760409190911b9060801c5b600160401b8110611e625760209190911b9060401c5b600160201b8110611e785760109190911b9060201c5b620100008110611e8d5760089190911b9060101c5b6101008110611ea15760049190911b9060081c5b60108110611eb45760029190911b9060041c5b60088110611ec457600182901b91505b6001828481611ee357634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611f0957634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611f2f57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611f5557634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611f7b57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611fa157634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611fc757634e487b7160e01b600052601260045260246000fd5b048301901c91506000828481611fed57634e487b7160e01b600052601260045260246000fd5b04905080831015611ffe5782612000565b805b949350505050565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80516001600160701b038116811461116857600080fd5b60006020828403121561208e578081fd5b8135610ce7816124df565b6000602082840312156120aa578081fd5b8151610ce7816124df565b600080604083850312156120c7578081fd5b82516120d2816124df565b60208401519092506120e3816124f7565b809150509250929050565b60008060408385031215612100578182fd5b823561210b816124df565b915060208301356120e3816124df565b60008060008060808587031215612130578182fd5b843561213b816124df565b9350602085013561214b816124df565b9250604085013561215b816124df565b9150606085013561216b816124f7565b939692955090935050565b6000806000806060858703121561218b578384fd5b8435612196816124df565b935060208501356121a6816124df565b925060408501356001600160401b03808211156121c1578384fd5b818701915087601f8301126121d4578384fd5b8135818111156121e2578485fd5b8860208285010111156121f3578485fd5b95989497505060200194505050565b60008060408385031215612214578182fd5b823561221f816124df565b946020939093013593505050565b600080600060608486031215612241578283fd5b833561224c816124df565b9250602084013591506040840135612263816124df565b809150509250925092565b60006020828403121561227f578081fd5b8151610ce7816124f7565b60008060006060848603121561229e578283fd5b6122a784612066565b92506122b560208501612066565b9150604084015163ffffffff81168114612263578182fd5b6000602082840312156122de578081fd5b5035919050565b6000602082840312156122f6578081fd5b5051919050565b6000806040838503121561230f578182fd5b8235915060208301356120e3816124df565b60008060408385031215612333578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561238e57835183529284019291840191600101612372565b50909695505050505050565b6000831515825260206040818401528351806040850152825b818110156123cf578581018301518582016060015282016123b3565b818111156123e05783606083870101525b50601f01601f191692909201606001949350505050565b81516001600160a01b03168152602080830151610120830191612424908401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b60008261248e57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156124ad576124ad6124c9565b500290565b6000828210156124c4576124c46124c9565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146124f457600080fd5b50565b80151581146124f457600080fdfebd64fae90eab1019a6c354538cfa598ad3d642c5b1bc8a8613bcb716723fa2d7a264697066735822122093a10a5c6623a8fe228babe2984daabae7193ae230f76211c988def602e2ce7164736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061015e5760003560e01c80622d5f1c14610163578063071060a61461018c57806332f42fe6146101a1578063392f5f64146101b45780633f0eaeb5146101e8578063447d52ba146102095780634a7a7f411461021c5780634fcd54a414610231578063576cbc30146102595780636caa9c111461027a5780637a1a04df1461028d5780637dad209b146102cb57806384686ff6146102d3578063885fa0561461031e5780638eaab58c14610331578063a08cba2514610344578063a6ce223314610357578063abcbc4fc1461036a578063aeb38d8b1461037d578063af64e6cd14610390578063b33693b2146103a3578063b6ef3672146103b6578063bf184ea41461046a578063dc94cb7d1461047d578063e4f50de214610485578063e8ea4fae14610498578063e9c3f77d146104a0578063ef6eeded146104c9578063f70330ce146104dc575b600080fd5b61017661017136600461207d565b610510565b60405161018391906123f7565b60405180910390f35b61019f61019a3660046122cd565b6107e6565b005b61019f6101af366004612176565b6108ac565b6101db7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101839190612342565b6101fb6101f636600461211b565b6109a8565b60405161018392919061239a565b61019f6102173660046122fd565b610a7a565b610224610b52565b6040516101839190612356565b61024461023f36600461222d565b610baa565b60408051928352602083019190915201610183565b61026c61026736600461222d565b610c47565b604051908152602001610183565b61026c6102883660046122cd565b610cee565b6102bb61029b366004612202565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610183565b610224610d0f565b6102e66102e136600461207d565b610d65565b604080516001600160a01b039788168152969095166020870152938501929092526060840152608083015260a082015260c001610183565b61024461032c36600461222d565b610db5565b61026c61033f36600461222d565b610dc3565b61019f61035236600461211b565b610e4f565b61019f6103653660046122cd565b610f3d565b61026c6103783660046122cd565b611055565b61026c61038b3660046122cd565b611065565b61024461039e366004612321565b611075565b6101766103b136600461207d565b6110e5565b61041b6103c436600461207d565b60066020819052600091825260409091208054600182015460028301546003840154600485015460058601549686015460078701546008909701546001600160a01b03968716989690951696939592949193909189565b604080516001600160a01b039a8b1681529990981660208a0152968801959095526060870193909352608086019190915260a085015260c084015260e083015261010082015261012001610183565b61026c6104783660046122cd565b61116d565b61022461117d565b6102e661049336600461207d565b6111d3565b61022461122f565b6101db6104ae3660046122cd565b6000602081905290815260409020546001600160a01b031681565b6101766104d736600461207d565b611285565b6101db6104ea3660046120ee565b60076020908152600092835260408084209091529082529020546001600160a01b031681565b610518612008565b506001600160a01b03808216600081815260066020818152604080842081516101208101835281548816815260018201549097169287019290925260028201548682015260038201546060808801919091526004808401546080890152600584015460a08901529383015460c0880152600783015460e08801526008909201546101008701528051630240bc6b60e21b81529051939493630902f1ac938281019392829003018186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610606919061228a565b63ffffffff1692505050600082608001518261062291906124b2565b90506008548111156107df576000846001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a191906122e5565b9050818460400151826106b491906124b2565b6106be9190612473565b606085015260408085018290526080850184905260e085015160a086015261010085015160c08601528051637464fc3d60e01b815290516001600160a01b03871691637464fc3d916004808301926020929190829003018186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d91906122e5565b8460e0018181525050846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d791906122e5565b610100850152505b5050919050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190612099565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b336108b561175e565b6001600160a01b0316146109105760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420617574686f72697a656420746f20696e6974206f7261636c6500000060448201526064015b60405180910390fd5b610951848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061179692505050565b60408051818152600d918101919091526c6f7261636c6520706172616d7360981b60608201526001600160a01b0385166020820152600080516020612506833981519152906080015b60405180910390a150505050565b600060606000806109b988886117c4565b6001600160a01b0380891660009081526006602052604081208054949650929450919281169085161480156109fd575060018201546001600160a01b038481169116145b90508615610a3e57808015610a3b57506001600160a01b03848116600090815260076020908152604080832087851684529091529020548116908916145b90505b604080516001600160a01b039990991660208a015296151588880152865180890388018152606090980190965250939794965093945050505050565b60405163f0723d9760e01b81526001600160a01b038281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f0723d979060440160206040518083038186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a919061226e565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b60606003805480602002602001604051908101604052809291908181526020018280548015610ba057602002820191906000526020600020905b815481526020019060010190808311610b8c575b5050505050905090565b600080610bb8858585610dc3565b610bc061175e565b6001600160a01b03166315c2ba50876040518263ffffffff1660e01b8152600401610beb9190612342565b60206040518083038186803b158015610c0357600080fd5b505afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906122e5565b91509150935093915050565b6000806000610c5686856117c4565b6001600160a01b03808316600090815260076020908152604080832084861684529091528120549395509193509091610c8f9116611893565b9050826001600160a01b0316876001600160a01b03161415610cd457600160701b816003015487610cc09190612493565b610cca9190612473565b9350505050610ce7565b6003810154610cc0600160701b88612493565b9392505050565b60058181548110610cfe57600080fd5b600091825260209091200154905081565b60606004805480602002602001604051908101604052809291908181526020018280548015610ba05760200282019190600052602060002090815481526020019060010190808311610b8c575050505050905090565b6000806000806000806000610d7988610510565b9050610d8d8160a001518260600151611075565b8251602084015160a085015160c090950151919c909b50929950909750919550909350915050565b600080610bb8858585610c47565b6000806000610dd286856117c4565b6001600160a01b03808316600090815260076020908152604080832084861684529091528120549395509193509091610e0b9116610510565b9050826001600160a01b0316876001600160a01b03161415610e3c57600160701b816060015187610cc09190612493565b6060810151610cc0600160701b88612493565b33610e58611af6565b6001600160a01b03161480610e7c575033610e71611b8e565b6001600160a01b0316145b610edb5760405162461bcd60e51b815260206004820152602a60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604482015269391032bc32b1baba37b960b11b6064820152608401610907565b610ee784848484611bff565b60408051818152601691810191909152756f7261636c6520737065636966696320706172616d7360501b60608201526001600160a01b03851660208201526000805160206125068339815191529060800161099a565b33610f46611af6565b6001600160a01b03161480610f6a575033610f5f611b8e565b6001600160a01b0316145b80610f84575033610f79611dbf565b6001600160a01b0316145b610ff15760405162461bcd60e51b815260206004820152603860248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f604482015277391037b91030baba3437b934bd32b2103234b9b0b13632b960411b6064820152608401610907565b600881905560408051818152601381830152727072696365207570646174652077696e646f7760681b60608201526020810183905290517f3a64504f0bc0c335e2aecb78638a257e0351a3fe0370861fd54ee4190b9209339181900360800190a150565b60028181548110610cfe57600080fd5b60048181548110610cfe57600080fd5b600080828411156110b3576110ac600160381b846110938288612493565b61109d9190612473565b6110a79190612493565b611e23565b91506110d2565b6110cf836110c5600160701b87612493565b6110a79190612473565b91505b6110dc8285612473565b90509250929050565b6110ed612008565b6110f682611893565b604080516101208101825282546001600160a01b03908116825260018401541660208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260089091015461010082015290505b919050565b60038181548110610cfe57600080fd5b60606002805480602002602001604051908101604052809291908181526020018280548015610ba05760200282019190600052602060002090815481526020019060010190808311610b8c575050505050905090565b60008060008060008060006111e788611893565b90506111fb81600501548260030154611075565b8254600184015460058501546006909501546001600160a01b039283169d929091169b509299509097509195509350915050565b60606005805480602002602001604051908101604052809291908181526020018280548015610ba05760200282019190600052602060002090815481526020019060010190808311610b8c575050505050905090565b61128d612008565b6001600160a01b03808316600090815260066020526040902080549091166116dd5760008390506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112f257600080fd5b505afa158015611306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132a919061228a565b63ffffffff169250925092506000846001600160a01b0316637464fc3d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137157600080fd5b505afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a991906122e5565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e657600080fd5b505afa1580156113fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141e91906122e5565b9050604051806101200160405280876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d9190612099565b6001600160a01b03168152602001876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c9190612099565b6001600160a01b03168152602001876001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561156357600080fd5b505afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b91906122e5565b8152602001866001600160701b0316866001600160701b0316600160701b6115c39190612493565b6115cd9190612473565b81526020808201959095526040808201859052606080830185905260808084019690965260a0928301949094526001600160a01b038c81166000908152600680895290839020855181546001600160a01b03199081169185169182178355878b01516001840180549092169516948517905586850151600283018190558789015160038401819055888b015160048501819055898901516005860181905560c0808c015197870188905560e0808d0151600789018190556101009d8e015160089099018990558b5161012081018d529788529f8701999099529885019390935299830152988101979097529386019690965290840194909452928201939093529182015294506111689350505050565b6116e683611893565b604080516101208101825282546001600160a01b03908116825260018401541660208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260089091015461010082015291506111689050565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b600080828060200190518101906117ad91906120b5565b915091506117bd85858484611bff565b5050505050565b600080826001600160a01b0316846001600160a01b0316141561181e5760405162461bcd60e51b81526020600482015260126024820152714964656e746963616c20616464726573732160701b6044820152606401610907565b826001600160a01b0316846001600160a01b03161061183e578284611841565b83835b90925090506001600160a01b03821661188c5760405162461bcd60e51b815260206004820152600d60248201526c5a65726f20616464726573732160981b6044820152606401610907565b9250929050565b6001600160a01b0381166000818152600660205260408082208151630240bc6b60e21b81529151909391630902f1ac916004808301926060929190829003018186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191a919061228a565b63ffffffff1692505050600082600401548261193691906124b2565b90506008548111156107df576000846001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b591906122e5565b9050818460020154826119c891906124b2565b6119d29190612473565b6003850155600284018190556004808501849055600785015460058601556008850154600686015560408051637464fc3d60e01b815290516001600160a01b03881692637464fc3d92808201926020929091829003018186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7091906122e5565b8460070181905550846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ab157600080fd5b505afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae991906122e5565b6008850155505050919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5157600080fd5b505afa158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b899190612099565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611beb57600080fd5b505af1158015611b65573d6000803e3d6000fd5b600080611c0c86866117c4565b91509150816001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5357600080fd5b505afa158015611c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8b9190612099565b6001600160a01b0316148015611d225750806001600160a01b0316846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611cdf57600080fd5b505afa158015611cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d179190612099565b6001600160a01b0316145b611d6b5760405162461bcd60e51b815260206004820152601a6024820152795061697220646f6573206e6f74206d6174636820746f6b656e7360301b6044820152606401610907565b611d7484611285565b508215611db7576001600160a01b0382811660009081526007602090815260408083208585168452909152902080546001600160a01b0319169186169190911790555b505050505050565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b158015611b5157600080fd5b600081611e3257506000611168565b50600181600160801b8110611e4c5760409190911b9060801c5b600160401b8110611e625760209190911b9060401c5b600160201b8110611e785760109190911b9060201c5b620100008110611e8d5760089190911b9060101c5b6101008110611ea15760049190911b9060081c5b60108110611eb45760029190911b9060041c5b60088110611ec457600182901b91505b6001828481611ee357634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611f0957634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611f2f57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611f5557634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611f7b57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611fa157634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481611fc757634e487b7160e01b600052601260045260246000fd5b048301901c91506000828481611fed57634e487b7160e01b600052601260045260246000fd5b04905080831015611ffe5782612000565b805b949350505050565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80516001600160701b038116811461116857600080fd5b60006020828403121561208e578081fd5b8135610ce7816124df565b6000602082840312156120aa578081fd5b8151610ce7816124df565b600080604083850312156120c7578081fd5b82516120d2816124df565b60208401519092506120e3816124f7565b809150509250929050565b60008060408385031215612100578182fd5b823561210b816124df565b915060208301356120e3816124df565b60008060008060808587031215612130578182fd5b843561213b816124df565b9350602085013561214b816124df565b9250604085013561215b816124df565b9150606085013561216b816124f7565b939692955090935050565b6000806000806060858703121561218b578384fd5b8435612196816124df565b935060208501356121a6816124df565b925060408501356001600160401b03808211156121c1578384fd5b818701915087601f8301126121d4578384fd5b8135818111156121e2578485fd5b8860208285010111156121f3578485fd5b95989497505060200194505050565b60008060408385031215612214578182fd5b823561221f816124df565b946020939093013593505050565b600080600060608486031215612241578283fd5b833561224c816124df565b9250602084013591506040840135612263816124df565b809150509250925092565b60006020828403121561227f578081fd5b8151610ce7816124f7565b60008060006060848603121561229e578283fd5b6122a784612066565b92506122b560208501612066565b9150604084015163ffffffff81168114612263578182fd5b6000602082840312156122de578081fd5b5035919050565b6000602082840312156122f6578081fd5b5051919050565b6000806040838503121561230f578182fd5b8235915060208301356120e3816124df565b60008060408385031215612333578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561238e57835183529284019291840191600101612372565b50909695505050505050565b6000831515825260206040818401528351806040850152825b818110156123cf578581018301518582016060015282016123b3565b818111156123e05783606083870101525b50601f01601f191692909201606001949350505050565b81516001600160a01b03168152602080830151610120830191612424908401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b60008261248e57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156124ad576124ad6124c9565b500290565b6000828210156124c4576124c46124c9565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146124f457600080fd5b50565b80151581146124f457600080fdfebd64fae90eab1019a6c354538cfa598ad3d642c5b1bc8a8613bcb716723fa2d7a264697066735822122093a10a5c6623a8fe228babe2984daabae7193ae230f76211c988def602e2ce7164736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "charactersPlayed()": {
        "details": "returns all characters played by this contract (e.g. stable coin, oracle registry)"
      },
      "dependsOnCharacters()": {
        "details": "returns all the character dependencies like FEE_RECIPIENT"
      },
      "dependsOnRoles()": {
        "details": "returns all the roles dependencies of this contract like FUND_TRANSFERER"
      },
      "rolesPlayed()": {
        "details": "returns all roles played by this contract"
      },
      "updateMainCharacterCache(uint256)": {
        "details": "Updates the main character cache for a speciic character"
      },
      "updateRoleCache(uint256,address)": {
        "details": "Updates the role cache for a specific role and address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndCheckOracleParams(address,address,address,bool)": {
        "notice": "Encode params for initialization"
      },
      "getAmountInPeg(address,uint256,address)": {
        "notice": "Update twap price and get corresponding peg amount"
      },
      "getPairState(address)": {
        "notice": "Retrieve TwapOracleState of pair, updating"
      },
      "getTwapReserves(address)": {
        "notice": "Update reserves of a pair in a time weighted manner"
      },
      "initPairState(address)": {
        "notice": "Init price via reserves"
      },
      "price0FP2Reserves(uint256,uint256)": {
        "notice": "Convert price to reserves"
      },
      "setOracleSpecificParams(address,address,address,bool)": {
        "notice": "Set up oracle based on a pair and whether we prefer this one"
      },
      "setPriceUpdateWindow(uint256)": {
        "notice": "Time window after which price is updated"
      },
      "viewAmountInPeg(address,uint256,address)": {
        "notice": "View amount in peg via twap price"
      },
      "viewPairState(address)": {
        "notice": "View TwapOracleState of pair"
      },
      "viewTwapReserves(address)": {
        "notice": "view reserves of a pair in a time weighted manner"
      }
    },
    "notice": "Use UniswapV2-compatible pairs to kepp up a twap oracle In all this one must be careful of staleness",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19540,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 19546,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 19549,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 19552,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 19555,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 19558,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16933,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "pairState",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(TwapOracleState)16928_storage)"
      },
      {
        "astId": 16939,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "bestPairByTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 16942,
        "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
        "label": "priceUpdateWindow",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(TwapOracleState)16928_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TwapOracle.TwapOracleState)",
        "numberOfBytes": "32",
        "value": "t_struct(TwapOracleState)16928_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(TwapOracleState)16928_storage": {
        "encoding": "inplace",
        "label": "struct TwapOracle.TwapOracleState",
        "members": [
          {
            "astId": 16911,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16913,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16915,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "cumulativePrice0",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16917,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "price0FP",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16919,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16921,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "kLast",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16923,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "totalSupplyLast",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16925,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "kCurrent",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16927,
            "contract": "contracts/oracles/TwapOracle.sol:TwapOracle",
            "label": "totalSupplyCurrent",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}