{
  "address": "0x38378900231FfF2E3b1a03bCB47d9705dddBf06a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "morePerSec",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dilutingRepartition",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonDilutingRepartition",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRepartition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accMorePerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVeMORE",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVeMORE",
          "type": "address"
        }
      ],
      "name": "UpdateVeMORE",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableMore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dilutingRepartition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyMoreWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_more",
          "type": "address"
        },
        {
          "internalType": "contract IVeMore",
          "name": "_veMore",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_morePerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dilutingRepartition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPoolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "more",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "morePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "multiClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newMasterMore",
      "outputs": [
        {
          "internalType": "contract IMasterMore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonDilutingRepartition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCandidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingMore",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bonusTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bonusTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "pendingBonusToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMorePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumOfFactors",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMorePerFactorShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "proposeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "rewarderBonusTokenInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "bonusTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bonusTokenSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPoolLength",
          "type": "uint256"
        }
      ],
      "name": "setMaxPoolLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterMore",
          "name": "_newMasterMore",
          "type": "address"
        }
      ],
      "name": "setNewMasterMore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVeMore",
          "name": "_newVeMore",
          "type": "address"
        }
      ],
      "name": "setVeMore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_morePerSec",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dilutingRepartition",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRepartition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newVeMoreBalance",
          "type": "uint256"
        }
      ],
      "name": "updateFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veMore",
      "outputs": [
        {
          "internalType": "contract IVeMore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbba6a3097404f254841c621cffbd922b4a5edc9483bdcf0db6af7fbbcb88f3ba",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x38378900231FfF2E3b1a03bCB47d9705dddBf06a",
    "transactionIndex": 5,
    "gasUsed": "3674787",
    "logsBloom": "0x
    "blockHash": "0xd4f24d596e55ba76150368816ddce874f963b1c0568be30038c2a1d5970e199a",
    "transactionHash": "0xbba6a3097404f254841c621cffbd922b4a5edc9483bdcf0db6af7fbbcb88f3ba",
    "logs": [],
    "blockNumber": 16900549,
    "cumulativeGasUsed": "4304164",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "deac18ae2e4b7fe317e4c6c820039602",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"morePerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dilutingRepartition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonDilutingRepartition\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRepartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accMorePerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVeMORE\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVeMORE\",\"type\":\"address\"}],\"name\":\"UpdateVeMORE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableMore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dilutingRepartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMoreWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_more\",\"type\":\"address\"},{\"internalType\":\"contract IVeMore\",\"name\":\"_veMore\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_morePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dilutingRepartition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"more\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"morePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"multiClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newMasterMore\",\"outputs\":[{\"internalType\":\"contract IMasterMore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonDilutingRepartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingMore\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bonusTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pendingBonusToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMorePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumOfFactors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMorePerFactorShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewarderBonusTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bonusTokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPoolLength\",\"type\":\"uint256\"}],\"name\":\"setMaxPoolLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterMore\",\"name\":\"_newMasterMore\",\"type\":\"address\"}],\"name\":\"setNewMasterMore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVeMore\",\"name\":\"_newVeMore\",\"type\":\"address\"}],\"name\":\"setVeMore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_morePerSec\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dilutingRepartition\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRepartition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newVeMoreBalance\",\"type\":\"uint256\"}],\"name\":\"updateFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veMore\",\"outputs\":[{\"internalType\":\"contract IVeMore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,address,address)\":{\"details\":\"Reverts if the same LP token is added more than once.\",\"params\":{\"_allocPoint\":\"allocation points for this LP\",\"_lpToken\":\"the corresponding lp token\",\"_rewarder\":\"the rewarder\"}},\"deposit(uint256,uint256)\":{\"details\":\"it is possible to call this function with _amount == 0 to claim current rewards\",\"params\":{\"_amount\":\"amount to deposit\",\"_pid\":\"the pool id\"}},\"depositFor(uint256,uint256,address)\":{\"details\":\"user must initiate transaction from masterchef\",\"params\":{\"_amount\":\"amount to deposit\",\"_pid\":\"the pool id\",\"_user\":\"the user being represented\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"massUpdatePools()\":{\"details\":\"Be careful of gas spending!\"},\"migrate(uint256[])\":{\"details\":\"Assume the orginal MasterMore has stopped emisions hence we can skip updatePool() to save gas cost\"},\"multiClaim(uint256[])\":{\"params\":{\"_pids\":\"array pids, pools to claim\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingTokens(uint256,address)\":{\"params\":{\"_pid\":\"the pool id\",\"_user\":\"the user address TODO include factor operations\"}},\"proposeOwner(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewarderBonusTokenInfo(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"set(uint256,uint256,address,bool)\":{\"params\":{\"_allocPoint\":\"allocation points\",\"_pid\":\"the pool id\",\"_rewarder\":\"the rewarder\",\"overwrite\":\"overwrite rewarder?\"}},\"setVeMore(address)\":{\"params\":{\"_newVeMore\":\"the new VeMore address\"}},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"updateEmissionRate(uint256)\":{\"details\":\"Pancake has to add hidden dummy pools inorder to alter the emission,here we make it simple and transparent to all.\",\"params\":{\"_morePerSec\":\"more amount to be updated\"}},\"updateEmissionRepartition(uint256)\":{\"params\":{\"_dilutingRepartition\":\"the future diluting repartition\"}},\"updateFactor(address,uint256)\":{\"details\":\"can only be called by veMore\",\"params\":{\"_newVeMoreBalance\":\"the amount of veMORE\",\"_user\":\"the user to update\"}},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"the amount to withdraw\",\"_pid\":\"the pool id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(uint256,address,address)\":{\"notice\":\"Add a new lp to the pool. Can only be called by the owner.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit LP tokens to MasterChef for MORE allocation.\"},\"depositFor(uint256,uint256,address)\":{\"notice\":\"Deposit LP tokens to MasterChef for MORE allocation on behalf of user\"},\"emergencyMoreWithdraw()\":{\"notice\":\"In case we need to manually migrate MORE funds from MasterChef Sends all remaining more from the contract to the owner\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"massUpdatePools()\":{\"notice\":\"Update reward variables for all pools.\"},\"migrate(uint256[])\":{\"notice\":\"Helper function to migrate fund from multiple pools to the new MasterMore.user must initiate transaction from masterchef\"},\"multiClaim(uint256[])\":{\"notice\":\"claims rewards for multiple pids\"},\"pendingTokens(uint256,address)\":{\"notice\":\"View function to see pending MOREs on frontend.\"},\"poolLength()\":{\"notice\":\"returns pool length\"},\"rewarderBonusTokenInfo(uint256)\":{\"notice\":\"Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm\"},\"set(uint256,uint256,address,bool)\":{\"notice\":\"Update the given pool's MORE allocation point. Can only be called by the owner.\"},\"setVeMore(address)\":{\"notice\":\"updates veMore address\"},\"updateEmissionRate(uint256)\":{\"notice\":\"updates emission rate\"},\"updateEmissionRepartition(uint256)\":{\"notice\":\"updates emission repartition\"},\"updateFactor(address,uint256)\":{\"notice\":\"updates factor after any veMore token operation (minting/burning)\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool to be up-to-date.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw LP tokens from MasterMore.Automatically harvest pending rewards and sends to user\"}},\"notice\":\"MasterMore is a boss. He says \\\"go f your blocks maki boy, I'm gonna use timestamp instead\\\" In addition, veMore holders boost their (non-diluting) emissions. This contract rewards users in function of their amount of lp staked (diluting pool) factor (non-diluting pool) Factor and sumOfFactors are updated by contract VeMore.sol after any veMore minting/burning Note that it's ownable and the owner wields tremendous power. The ownership will be transferred to a governance smart contract once More is sufficiently distributed and the community can show to govern itself.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/MasterMore.sol\":\"MasterMore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/rewards/MasterMore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./SafeOwnableUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IVeMore.sol\\\";\\nimport \\\"../../interfaces/IMasterMore.sol\\\";\\nimport \\\"../../interfaces/IRewarder.sol\\\";\\n\\n/// MasterMore is a boss. He says \\\"go f your blocks maki boy, I'm gonna use timestamp instead\\\"\\n/// In addition, veMore holders boost their (non-diluting) emissions.\\n/// This contract rewards users in function of their amount of lp staked (diluting pool) factor (non-diluting pool)\\n/// Factor and sumOfFactors are updated by contract VeMore.sol after any veMore minting/burning\\n/// Note that it's ownable and the owner wields tremendous power. The ownership\\n/// will be transferred to a governance smart contract once More is sufficiently\\n/// distributed and the community can show to govern itself.\\ncontract MasterMore is\\n    Initializable,\\n    SafeOwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    IMasterMore\\n{\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 factor; // non-diluting factor = sqrt (lpAmount * veMore.balanceOf())\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of MOREs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   ((user.amount * pool.accMorePerShare + user.factor * pool.accMorePerFactorShare) / 1e12) -\\n        //        user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accMorePerShare`, `accMorePerFactorShare` (and `lastRewardTimestamp`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many base allocation points assigned to this pool\\n        uint256 lastRewardTimestamp; // Last timestamp that MOREs distribution occurs.\\n        uint256 accMorePerShare; // Accumulated MOREs per share, times 1e12.\\n        IRewarder rewarder;\\n        uint256 sumOfFactors; // the sum of all non diluting factors by all of the users in the pool\\n        uint256 accMorePerFactorShare; // accumulated more per factor share\\n        // Note : beware storage collision with old MasterMore\\n    }\\n\\n    // The strongest more out there (more token).\\n    IERC20 public more;\\n    // Venom does not seem to hurt the More, it only makes it stronger.\\n    IVeMore public veMore;\\n    // New Master More address for future migrations\\n    IMasterMore public newMasterMore;\\n    // MORE tokens created per second.\\n    uint256 public morePerSec;\\n    // Emissions: both must add to 1000 => 100%\\n    // Diluting emissions repartition (e.g. 300 for 30%)\\n    uint256 public dilutingRepartition;\\n    // Non-diluting emissions repartition (e.g. 500 for 50%)\\n    uint256 public nonDilutingRepartition;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    // The timestamp when MORE mining starts.\\n    uint256 public startTimestamp;\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Set of all LP tokens that have been added as pools\\n    EnumerableSet.AddressSet private lpTokens;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Amount of claimable more the user has\\n    mapping(uint256 => mapping(address => uint256)) public claimableMore;\\n    // The maximum number of pools, in case updateFactor() exceeds block gas limit\\n    uint256 public maxPoolLength;\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IERC20 indexed lpToken,\\n        IRewarder indexed rewarder\\n    );\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IRewarder indexed rewarder,\\n        bool overwrite\\n    );\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event DepositFor(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accMorePerShare\\n    );\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event UpdateEmissionRate(address indexed user, uint256 morePerSec);\\n    event UpdateEmissionRepartition(\\n        address indexed user,\\n        uint256 dilutingRepartition,\\n        uint256 nonDilutingRepartition\\n    );\\n    event UpdateVeMORE(\\n        address indexed user,\\n        address oldVeMORE,\\n        address newVeMORE\\n    );\\n\\n    /// @dev Modifier ensuring that certain function can only be called by VeMore\\n    modifier onlyVeMore() {\\n        require(address(veMore) == msg.sender, \\\"notVeMore: wut?\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        IERC20 _more,\\n        IVeMore _veMore,\\n        uint256 _morePerSec,\\n        uint256 _dilutingRepartition,\\n        uint256 _startTimestamp\\n    ) public initializer {\\n        require(address(_more) != address(0), \\\"more address cannot be zero\\\");\\n        require(\\n            address(_veMore) != address(0),\\n            \\\"veMore address cannot be zero\\\"\\n        );\\n        require(_morePerSec != 0, \\\"more per sec cannot be zero\\\");\\n        require(\\n            _dilutingRepartition <= 1000,\\n            \\\"diluting repartition must be in range 0, 1000\\\"\\n        );\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        more = _more;\\n        veMore = _veMore;\\n        morePerSec = _morePerSec;\\n        dilutingRepartition = _dilutingRepartition;\\n        nonDilutingRepartition = 1000 - _dilutingRepartition;\\n        startTimestamp = _startTimestamp;\\n        maxPoolLength = 50;\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setNewMasterMore(IMasterMore _newMasterMore) external onlyOwner {\\n        newMasterMore = _newMasterMore;\\n    }\\n\\n    function setMaxPoolLength(uint256 _maxPoolLength) external onlyOwner {\\n        require(poolInfo.length <= _maxPoolLength);\\n        maxPoolLength = _maxPoolLength;\\n    }\\n\\n    /// @notice returns pool length\\n    function poolLength() external view override returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /// @notice Add a new lp to the pool. Can only be called by the owner.\\n    /// @dev Reverts if the same LP token is added more than once.\\n    /// @param _allocPoint allocation points for this LP\\n    /// @param _lpToken the corresponding lp token\\n    /// @param _rewarder the rewarder\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        IRewarder _rewarder\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_rewarder)) ||\\n                address(_rewarder) == address(0),\\n            \\\"add: rewarder must be contract or zero\\\"\\n        );\\n        require(!lpTokens.contains(address(_lpToken)), \\\"add: LP already added\\\");\\n        require(poolInfo.length < maxPoolLength, \\\"add: exceed max pool\\\");\\n\\n        // update all pools\\n        massUpdatePools();\\n\\n        // update last time rewards were calculated to now\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        // update alloc point\\n        totalAllocPoint += _allocPoint;\\n\\n        // update PoolInfo with the new LP\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accMorePerShare: 0,\\n                rewarder: _rewarder,\\n                sumOfFactors: 0,\\n                accMorePerFactorShare: 0\\n            })\\n        );\\n\\n        // add lpToken to the lpTokens enumerable set\\n        lpTokens.add(address(_lpToken));\\n        emit Add(poolInfo.length - 1, _allocPoint, _lpToken, _rewarder);\\n    }\\n\\n    /// @notice Update the given pool's MORE allocation point. Can only be called by the owner.\\n    /// @param _pid the pool id\\n    /// @param _allocPoint allocation points\\n    /// @param _rewarder the rewarder\\n    /// @param overwrite overwrite rewarder?\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        IRewarder _rewarder,\\n        bool overwrite\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_rewarder)) ||\\n                address(_rewarder) == address(0),\\n            \\\"set: rewarder must be contract or zero\\\"\\n        );\\n        massUpdatePools();\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        totalAllocPoint = totalAllocPoint - pool.allocPoint + _allocPoint;\\n        pool.allocPoint = _allocPoint;\\n\\n        if (overwrite) {\\n            pool.rewarder = _rewarder;\\n        }\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            overwrite ? _rewarder : pool.rewarder,\\n            overwrite\\n        );\\n    }\\n\\n    /// @notice View function to see pending MOREs on frontend.\\n    /// @param _pid the pool id\\n    /// @param _user the user address\\n    /// TODO include factor operations\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 pendingMore,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accMorePerShare = pool.accMorePerShare;\\n        uint256 accMorePerFactorShare = pool.accMorePerFactorShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 secondsElapsed = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 moreReward = (secondsElapsed *\\n                morePerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n            accMorePerShare +=\\n                (moreReward * 1e12 * dilutingRepartition) /\\n                (lpSupply * 1000);\\n            if (pool.sumOfFactors != 0) {\\n                accMorePerFactorShare +=\\n                    (moreReward * 1e12 * nonDilutingRepartition) /\\n                    (pool.sumOfFactors * 1000);\\n            }\\n        }\\n        pendingMore =\\n            ((user.amount *\\n                accMorePerShare +\\n                user.factor *\\n                accMorePerFactorShare) / 1e12) +\\n            claimableMore[_pid][_user] -\\n            user.rewardDebt;\\n        // If it's a double reward farm, we return info about the bonus token\\n        if (address(pool.rewarder) != address(0)) {\\n            (bonusTokenAddress, bonusTokenSymbol) = rewarderBonusTokenInfo(\\n                _pid\\n            );\\n            pendingBonusToken = pool.rewarder.pendingTokens(_user);\\n        }\\n    }\\n\\n    /// @notice Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm\\n    /// @param _pid the pool id\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        public\\n        view\\n        override\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (address(pool.rewarder) != address(0)) {\\n            bonusTokenAddress = address(pool.rewarder.rewardToken());\\n            bonusTokenSymbol = IERC20Metadata(pool.rewarder.rewardToken())\\n                .symbol();\\n        }\\n    }\\n\\n    /// @notice Update reward variables for all pools.\\n    /// @dev Be careful of gas spending!\\n    function massUpdatePools() public override {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid; pid < length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    /// @notice Update reward variables of the given pool to be up-to-date.\\n    /// @param _pid the pool id\\n    function updatePool(uint256 _pid) external override {\\n        _updatePool(_pid);\\n    }\\n\\n    function _updatePool(uint256 _pid) private {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        // update only if now > last time we updated rewards\\n        if (block.timestamp > pool.lastRewardTimestamp) {\\n            uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n            // if balance of lp supply is 0, update lastRewardTime and quit function\\n            if (lpSupply == 0) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                return;\\n            }\\n            // calculate seconds elapsed since last update\\n            uint256 secondsElapsed = block.timestamp - pool.lastRewardTimestamp;\\n\\n            // calculate more reward\\n            uint256 moreReward = (secondsElapsed *\\n                morePerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n            // update accMorePerShare to reflect diluting rewards\\n            pool.accMorePerShare +=\\n                (moreReward * 1e12 * dilutingRepartition) /\\n                (lpSupply * 1000);\\n\\n            // update accMorePerFactorShare to reflect non-diluting rewards\\n            if (pool.sumOfFactors == 0) {\\n                pool.accMorePerFactorShare = 0;\\n            } else {\\n                pool.accMorePerFactorShare +=\\n                    (moreReward * 1e12 * nonDilutingRepartition) /\\n                    (pool.sumOfFactors * 1000);\\n            }\\n\\n            // update lastRewardTimestamp to now\\n            pool.lastRewardTimestamp = block.timestamp;\\n            emit UpdatePool(\\n                _pid,\\n                pool.lastRewardTimestamp,\\n                lpSupply,\\n                pool.accMorePerShare\\n            );\\n        }\\n    }\\n\\n    /// @notice Helper function to migrate fund from multiple pools to the new MasterMore.\\n    /// @notice user must initiate transaction from masterchef\\n    /// @dev Assume the orginal MasterMore has stopped emisions\\n    /// hence we can skip updatePool() to save gas cost\\n    function migrate(uint256[] calldata _pids) external override nonReentrant {\\n        require(address(newMasterMore) != (address(0)), \\\"to where?\\\");\\n\\n        _multiClaim(_pids);\\n        for (uint256 i; i < _pids.length; ++i) {\\n            uint256 pid = _pids[i];\\n            UserInfo storage user = userInfo[pid][msg.sender];\\n\\n            if (user.amount > 0) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                pool.lpToken.approve(address(newMasterMore), user.amount);\\n                newMasterMore.depositFor(pid, user.amount, msg.sender);\\n\\n                pool.sumOfFactors -= user.factor;\\n                delete userInfo[pid][msg.sender];\\n            }\\n        }\\n    }\\n\\n    /// @notice Deposit LP tokens to MasterChef for MORE allocation on behalf of user\\n    /// @dev user must initiate transaction from masterchef\\n    /// @param _pid the pool id\\n    /// @param _amount amount to deposit\\n    /// @param _user the user being represented\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external override nonReentrant whenNotPaused {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        // update pool in case user has deposited\\n        _updatePool(_pid);\\n        if (user.amount > 0) {\\n            // Harvest MORE\\n            uint256 pending = ((user.amount *\\n                pool.accMorePerShare +\\n                user.factor *\\n                pool.accMorePerFactorShare) / 1e12) +\\n                claimableMore[_pid][_user] -\\n                user.rewardDebt;\\n            claimableMore[_pid][_user] = 0;\\n\\n            pending = safeMoreTransfer(payable(_user), pending);\\n            emit Harvest(_user, _pid, pending);\\n        }\\n\\n        // update amount of lp staked by user\\n        user.amount += _amount;\\n\\n        // update non-diluting factor\\n        uint256 oldFactor = user.factor;\\n        user.factor = Math.sqrt(user.amount * veMore.balanceOf(_user));\\n        pool.sumOfFactors = pool.sumOfFactors + user.factor - oldFactor;\\n\\n        // update reward debt\\n        user.rewardDebt =\\n            (user.amount *\\n                pool.accMorePerShare +\\n                user.factor *\\n                pool.accMorePerFactorShare) /\\n            1e12;\\n\\n        IRewarder rewarder = poolInfo[_pid].rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onMoreReward(_user, user.amount);\\n        }\\n\\n        pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit DepositFor(_user, _pid, _amount);\\n    }\\n\\n    /// @notice Deposit LP tokens to MasterChef for MORE allocation.\\n    /// @dev it is possible to call this function with _amount == 0 to claim current rewards\\n    /// @param _pid the pool id\\n    /// @param _amount amount to deposit\\n    function deposit(uint256 _pid, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256, uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        _updatePool(_pid);\\n        uint256 pending;\\n\\n        if (user.amount > 0) {\\n            // Harvest MORE\\n            pending =\\n                ((user.amount *\\n                    pool.accMorePerShare +\\n                    user.factor *\\n                    pool.accMorePerFactorShare) / 1e12) +\\n                claimableMore[_pid][msg.sender] -\\n                user.rewardDebt;\\n            claimableMore[_pid][msg.sender] = 0;\\n\\n            pending = safeMoreTransfer(payable(msg.sender), pending);\\n            emit Harvest(msg.sender, _pid, pending);\\n        }\\n\\n        // update amount of lp staked by user\\n        user.amount += _amount;\\n\\n        // update non-diluting factor\\n        uint256 oldFactor = user.factor;\\n        user.factor = Math.sqrt(user.amount * veMore.balanceOf(msg.sender));\\n        pool.sumOfFactors = pool.sumOfFactors + user.factor - oldFactor;\\n\\n        // update reward debt\\n        user.rewardDebt =\\n            (user.amount *\\n                pool.accMorePerShare +\\n                user.factor *\\n                pool.accMorePerFactorShare) /\\n            1e12;\\n\\n        IRewarder rewarder = poolInfo[_pid].rewarder;\\n        uint256 additionalRewards;\\n        if (address(rewarder) != address(0)) {\\n            additionalRewards = rewarder.onMoreReward(msg.sender, user.amount);\\n        }\\n\\n        pool.lpToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n        return (pending, additionalRewards);\\n    }\\n\\n    /// @notice claims rewards for multiple pids\\n    /// @param _pids array pids, pools to claim\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        return _multiClaim(_pids);\\n    }\\n\\n    /// @notice private function to claim rewards for multiple pids\\n    /// @param _pids array pids, pools to claim\\n    function _multiClaim(uint256[] memory _pids)\\n        private\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        // accumulate rewards for each one of the pids in pending\\n        uint256 pending;\\n        uint256[] memory amounts = new uint256[](_pids.length);\\n        uint256[] memory additionalRewards = new uint256[](_pids.length);\\n        for (uint256 i; i < _pids.length; ++i) {\\n            _updatePool(_pids[i]);\\n            PoolInfo storage pool = poolInfo[_pids[i]];\\n            UserInfo storage user = userInfo[_pids[i]][msg.sender];\\n            if (user.amount > 0) {\\n                // increase pending to send all rewards once\\n                uint256 poolRewards = ((user.amount *\\n                    pool.accMorePerShare +\\n                    user.factor *\\n                    pool.accMorePerFactorShare) / 1e12) +\\n                    claimableMore[_pids[i]][msg.sender] -\\n                    user.rewardDebt;\\n\\n                claimableMore[_pids[i]][msg.sender] = 0;\\n\\n                // update reward debt\\n                user.rewardDebt =\\n                    (user.amount *\\n                        pool.accMorePerShare +\\n                        user.factor *\\n                        pool.accMorePerFactorShare) /\\n                    1e12;\\n\\n                // increase pending\\n                pending += poolRewards;\\n\\n                amounts[i] = poolRewards;\\n                // if existant, get external rewarder rewards for pool\\n                IRewarder rewarder = pool.rewarder;\\n                if (address(rewarder) != address(0)) {\\n                    additionalRewards[i] = rewarder.onMoreReward(\\n                        msg.sender,\\n                        user.amount\\n                    );\\n                }\\n            }\\n        }\\n        // transfer all remaining rewards\\n        uint256 transfered = safeMoreTransfer(payable(msg.sender), pending);\\n        if (transfered != pending) {\\n            for (uint256 i; i < _pids.length; ++i) {\\n                amounts[i] = (transfered * amounts[i]) / pending;\\n                emit Harvest(msg.sender, _pids[i], amounts[i]);\\n            }\\n        } else {\\n            for (uint256 i; i < _pids.length; ++i) {\\n                // emit event for pool\\n                emit Harvest(msg.sender, _pids[i], amounts[i]);\\n            }\\n        }\\n\\n        return (transfered, amounts, additionalRewards);\\n    }\\n\\n    /// @notice Withdraw LP tokens from MasterMore.\\n    /// @notice Automatically harvest pending rewards and sends to user\\n    /// @param _pid the pool id\\n    /// @param _amount the amount to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256, uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        _updatePool(_pid);\\n\\n        // Harvest MORE\\n        uint256 pending = ((user.amount *\\n            pool.accMorePerShare +\\n            user.factor *\\n            pool.accMorePerFactorShare) / 1e12) +\\n            claimableMore[_pid][msg.sender] -\\n            user.rewardDebt;\\n        claimableMore[_pid][msg.sender] = 0;\\n\\n        pending = safeMoreTransfer(payable(msg.sender), pending);\\n        emit Harvest(msg.sender, _pid, pending);\\n\\n        // for non-diluting factor\\n        uint256 oldFactor = user.factor;\\n\\n        // update amount of lp staked\\n        user.amount = user.amount - _amount;\\n\\n        // update non-diluting factor\\n        user.factor = Math.sqrt(user.amount * veMore.balanceOf(msg.sender));\\n        pool.sumOfFactors = pool.sumOfFactors + user.factor - oldFactor;\\n\\n        // update reward debt\\n        user.rewardDebt =\\n            (user.amount *\\n                pool.accMorePerShare +\\n                user.factor *\\n                pool.accMorePerFactorShare) /\\n            1e12;\\n\\n        IRewarder rewarder = poolInfo[_pid].rewarder;\\n        uint256 additionalRewards;\\n        if (address(rewarder) != address(0)) {\\n            additionalRewards = rewarder.onMoreReward(msg.sender, user.amount);\\n        }\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n        return (pending, additionalRewards);\\n    }\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    /// @param _pid the pool id\\n    function emergencyWithdraw(uint256 _pid) public override nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n\\n        // update non-diluting factor\\n        pool.sumOfFactors = pool.sumOfFactors - user.factor;\\n        user.factor = 0;\\n\\n        // update diluting factors\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    /// @notice Safe more transfer function, just in case if rounding error causes pool to not have enough MOREs.\\n    /// @param _to beneficiary\\n    /// @param _amount the amount to transfer\\n    function safeMoreTransfer(address payable _to, uint256 _amount)\\n        private\\n        returns (uint256)\\n    {\\n        uint256 moreBal = more.balanceOf(address(this));\\n\\n        // perform additional check in case there are no more more tokens to distribute.\\n        // emergency withdraw would be necessary\\n        require(moreBal > 0, \\\"No tokens to distribute\\\");\\n\\n        if (_amount > moreBal) {\\n            more.transfer(_to, moreBal);\\n            return moreBal;\\n        } else {\\n            more.transfer(_to, _amount);\\n            return _amount;\\n        }\\n    }\\n\\n    /// @notice updates emission rate\\n    /// @param _morePerSec more amount to be updated\\n    /// @dev Pancake has to add hidden dummy pools inorder to alter the emission,\\n    /// @dev here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _morePerSec) external onlyOwner {\\n        massUpdatePools();\\n        morePerSec = _morePerSec;\\n        emit UpdateEmissionRate(msg.sender, _morePerSec);\\n    }\\n\\n    /// @notice updates emission repartition\\n    /// @param _dilutingRepartition the future diluting repartition\\n    function updateEmissionRepartition(uint256 _dilutingRepartition)\\n        external\\n        onlyOwner\\n    {\\n        require(_dilutingRepartition <= 1000);\\n        massUpdatePools();\\n        dilutingRepartition = _dilutingRepartition;\\n        nonDilutingRepartition = 1000 - _dilutingRepartition;\\n        emit UpdateEmissionRepartition(\\n            msg.sender,\\n            _dilutingRepartition,\\n            1000 - _dilutingRepartition\\n        );\\n    }\\n\\n    /// @notice updates veMore address\\n    /// @param _newVeMore the new VeMore address\\n    function setVeMore(IVeMore _newVeMore) external onlyOwner {\\n        require(address(_newVeMore) != address(0));\\n        massUpdatePools();\\n        IVeMore oldVeMore = veMore;\\n        veMore = _newVeMore;\\n        emit UpdateVeMORE(msg.sender, address(oldVeMore), address(_newVeMore));\\n    }\\n\\n    /// @notice updates factor after any veMore token operation (minting/burning)\\n    /// @param _user the user to update\\n    /// @param _newVeMoreBalance the amount of veMORE\\n    /// @dev can only be called by veMore\\n    function updateFactor(address _user, uint256 _newVeMoreBalance)\\n        external\\n        override\\n        onlyVeMore\\n    {\\n        // loop over each pool : beware gas cost!\\n        uint256 length = poolInfo.length;\\n\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            UserInfo storage user = userInfo[pid][_user];\\n\\n            // skip if user doesn't have any deposit in the pool\\n            if (user.amount == 0) {\\n                continue;\\n            }\\n\\n            PoolInfo storage pool = poolInfo[pid];\\n\\n            // first, update pool\\n            _updatePool(pid);\\n            // calculate pending\\n            uint256 pending = ((user.amount *\\n                pool.accMorePerShare +\\n                user.factor *\\n                pool.accMorePerFactorShare) / 1e12) - user.rewardDebt;\\n            // increase claimableMore\\n            claimableMore[pid][_user] += pending;\\n            // get oldFactor\\n            uint256 oldFactor = user.factor; // get old factor\\n            // calculate newFactor using\\n            uint256 newFactor = Math.sqrt(_newVeMoreBalance * user.amount);\\n            // update user factor\\n            user.factor = newFactor;\\n            // update reward debt, take into account newFactor\\n            user.rewardDebt =\\n                (user.amount *\\n                    pool.accMorePerShare +\\n                    newFactor *\\n                    pool.accMorePerFactorShare) /\\n                1e12;\\n            // also, update sumOfFactors\\n            pool.sumOfFactors = pool.sumOfFactors + newFactor - oldFactor;\\n        }\\n    }\\n\\n    /// @notice In case we need to manually migrate MORE funds from MasterChef\\n    /// Sends all remaining more from the contract to the owner\\n    function emergencyMoreWithdraw() external onlyOwner {\\n        more.safeTransfer(address(msg.sender), more.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x04699949862bf2ef146aee9bfafc7b66a8dfd13ca380e36816e381b041690410\",\"license\":\"MIT\"},\"contracts/rewards/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    uint256 public constant WAD = 10**18;\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0xfd2168210604b900899a9b01d0d250dcc14e538253ee157aee2fc2524394e06a\",\"license\":\"MIT\"},\"contracts/rewards/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Note: This contract is backward compatible to OwnableUpgradeable of OZ except from that\\n * transferOwnership is dropped.\\n * __gap[0] is used as ownerCandidate, as changing storage is not supported yet\\n * See https://forum.openzeppelin.com/t/storage-layout-upgrade-with-hardhat-upgrades/14567\\n */\\ncontract SafeOwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        console.log(owner());\\n        console.log(msg.sender);\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    function ownerCandidate() public view returns (address) {\\n        return address(uint160(__gap[0]));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function proposeOwner(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0x0)) revert(\\\"ZeroAddress\\\");\\n        // __gap[0] is used as ownerCandidate\\n        __gap[0] = uint256(uint160(newOwner));\\n    }\\n\\n    function acceptOwnership() external {\\n        if (ownerCandidate() != msg.sender) revert(\\\"Unauthorized\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf310465040776f4327051e5bfb46136f2d4f4d4ae05a57018381aabf62855583\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"interfaces/IMasterMore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the More\\n */\\ninterface IMasterMore {\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingMore,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount)\\n        external\\n        returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        external\\n        returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeMoreBalance) external;\\n}\\n\",\"keccak256\":\"0x6b8a558a33abaafc63914a7afa392ca7bd88a57af46666819793f751f894db5e\",\"license\":\"MIT\"},\"interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IRewarder {\\n    function onMoreReward(address user, uint256 newLpAmount)\\n        external\\n        returns (uint256);\\n\\n    function pendingTokens(address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20Metadata);\\n}\\n\",\"keccak256\":\"0xa80d420d2e4f90fc7951dda90c231333501a18ff2f06309054f2bd1cd44947e8\",\"license\":\"MIT\"},\"interfaces/IVeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Vote Escrow ERC20 Token Interface\\n/// @author Trader Joe\\n/// @notice Interface of a ERC20 token used for vote escrow. Notice that transfers and\\n/// allowances are disabled\\ninterface IVeERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0xef8a17e2086b41968323aa50f88f2a64b54404f65fe5712e36cc95391973885d\",\"license\":\"MIT\"},\"interfaces/IVeMore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./IVeERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeMore\\n */\\ninterface IVeMore is IVeERC20, IERC721Receiver {\\n    function isUser(address _addr) external view returns (bool);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function claim() external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function unstakeNft() external;\\n\\n    function getStakedNft(address _addr) external view returns (uint256);\\n\\n    function getStakedMore(address _addr) external view returns (uint256);\\n\\n    function getVotes(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9bbf7e3360102fff004cb75f81a2a9aac18ee6d2afd1a05eeb60b16b757b04ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614180806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e35760003560e01c806304e3682a146101e8578063081e3eda146102045780630ba84cd21461020c5780631526fe271461022157806315e722701461027b57806317caf6f11461029b5780632ee98ff0146102a45780633f43fa33146102b75780633f4ba83a146102ca578063428f39a0146102d2578063441a3e70146102e55780634ed73d281461030d5780634f00a93e1461032f57806351eb05a6146103425780635312ea8e1461035557806353c5eb44146103685780635c975abb1461037b5780635f504a8214610391578063630b5ba114610399578063715018a6146103a1578063772dcfc8146103a957806379ba5097146103b15780637b62a738146103b95780638456cb59146103c257806388bba42f146103ca5780638da5cb5b146103dd57806390210d7e146103e557806393f1a40b146103f85780639ef3c2d714610441578063a5c758ac14610454578063ab7de0981461045d578063b5ed298a14610470578063bc70fdbc14610483578063c2108e4a146104a4578063d13f90b4146104cf578063d93bf4fe146104e2578063e0a4ed43146104f5578063e2bbb15814610508578063e6fd48bc1461051b578063f57347a814610524578063ffcd42631461052d575b600080fd5b6101f160ce5481565b6040519081526020015b60405180910390f35b60d1546101f1565b61021f61021a366004613c24565b610550565b005b61023461022f366004613c24565b6105e7565b604080516001600160a01b03988916815260208101979097528601949094526060850192909252909316608083015260a082019290925260c081019190915260e0016101fb565b60c95461028e906001600160a01b031681565b6040516101fb9190613ddd565b6101f160cf5481565b61021f6102b23660046139b0565b610642565b60cb5461028e906001600160a01b031681565b61021f6106a7565b61021f6102e03660046139b0565b6106f4565b6102f86102f3366004613cc4565b6107b5565b604080519283526020830191909152016101fb565b61032061031b366004613a66565b610bb1565b6040516101fb93929190613fab565b61021f61033d3660046139cc565b610c1c565b61021f610350366004613c24565b610e0e565b61021f610363366004613c24565b610e1a565b61021f610376366004613c24565b610f1a565b60975460ff1660405190151581526020016101fb565b60345461028e565b61021f610f71565b61021f610f9c565b61021f610fe9565b61021f6110c5565b6101f160d65481565b61021f61111d565b61021f6103d8366004613d12565b611168565b61028e611311565b61021f6103f3366004613ce5565b611320565b610432610406366004613c54565b60d460209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040516101fb93929190613fe0565b60ca5461028e906001600160a01b031681565b6101f160cc5481565b61021f61046b366004613c83565b6116fe565b61021f61047e3660046139b0565b611ac6565b610496610491366004613c24565b611b5b565b6040516101fb929190613e0a565b6101f16104b2366004613c54565b60d560209081526000928352604080842090915290825290205481565b61021f6104dd366004613b45565b611d2b565b61021f6104f03660046139f7565b611f6a565b61021f610503366004613c24565b612200565b6102f8610516366004613cc4565b6122b2565b6101f160d05481565b6101f160cd5481565b61054061053b366004613c54565b612601565b6040516101fb9493929190613f70565b61056061055b611311565b6128fa565b610569336128fa565b33610572611311565b6001600160a01b0316146105a15760405162461bcd60e51b815260040161059890613eb9565b60405180910390fd5b6105a9610f71565b60cc81905560405181815233907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c4053906020015b60405180910390a250565b60d181815481106105f757600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861697509395929491939116919087565b61064d61055b611311565b610656336128fa565b3361065f611311565b6001600160a01b0316146106855760405162461bcd60e51b815260040161059890613eb9565b60cb80546001600160a01b0319166001600160a01b0392909216919091179055565b6106b261055b611311565b6106bb336128fa565b336106c4611311565b6001600160a01b0316146106ea5760405162461bcd60e51b815260040161059890613eb9565b6106f261293d565b565b6106ff61055b611311565b610708336128fa565b33610711611311565b6001600160a01b0316146107375760405162461bcd60e51b815260040161059890613eb9565b6001600160a01b03811661074a57600080fd5b610752610f71565b60ca80546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f43da9254164f43010ac82d304ce937b4f4adcc3c527f81e997ddb34efd8cde92910160405180910390a25050565b600080600260655414156107db5760405162461bcd60e51b815260040161059890613f39565b600260655560975460ff16156108035760405162461bcd60e51b815260040161059890613e41565b600060d1858154811061082657634e487b7160e01b600052603260045260246000fd5b6000918252602080832088845260d48252604080852033865290925292208054600790920290920192508511156108945760405162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b6044820152606401610598565b61089d866129ca565b6001810154600087815260d5602090815260408083203384529091528120546006850154600285015492939264e8d4a51000916108d99161405e565b600387015486546108ea919061405e565b6108f49190614026565b6108fe919061403e565b6109089190614026565b610912919061407d565b600088815260d56020908152604080832033808552925282209190915590915061093c9082612bdd565b905086336001600160a01b031660008051602061412b8339815191528360405161096891815260200190565b60405180910390a36002820154825461098290889061407d565b835560ca546040516370a0823160e01b8152610a17916001600160a01b0316906370a08231906109b6903390600401613ddd565b60206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190613c3c565b8454610a12919061405e565b612dd2565b6002840181905560058501548291610a2e91614026565b610a38919061407d565b60058501556006840154600284015464e8d4a5100091610a579161405e565b60038601548554610a68919061405e565b610a729190614026565b610a7c919061403e565b8360010181905550600060d18981548110610aa757634e487b7160e01b600052603260045260246000fd5b600091825260208220600460079092020101546001600160a01b031691508115610b4e5784546040516358cae9b160e01b81526001600160a01b038416916358cae9b191610af9913391600401613df1565b602060405180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190613c3c565b90505b8554610b64906001600160a01b0316338b612e42565b6040518981528a9033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a360016065559299929850919650505050505050565b600060608060026065541415610bd95760405162461bcd60e51b815260040161059890613f39565b600260655560975460ff1615610c015760405162461bcd60e51b815260040161059890613e41565b610c0a84612e9d565b92509250925060016065559193909250565b60ca546001600160a01b03163314610c685760405162461bcd60e51b815260206004820152600f60248201526e6e6f7456654d6f72653a207775743f60881b6044820152606401610598565b60d15460005b81811015610e0857600081815260d4602090815260408083206001600160a01b038816845290915290208054610ca45750610df8565b600060d18381548110610cc757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702019050610ce0836129ca565b6000826001015464e8d4a5100083600601548560020154610d01919061405e565b60038501548654610d12919061405e565b610d1c9190614026565b610d26919061403e565b610d30919061407d565b600085815260d5602090815260408083206001600160a01b038c168452909152812080549293508392909190610d67908490614026565b909155505060028301548354600090610d8490610a12908a61405e565b60028601819055600685015490915064e8d4a5100090610da4908361405e565b60038601548754610db5919061405e565b610dbf9190614026565b610dc9919061403e565b600186015560058401548290610de0908390614026565b610dea919061407d565b846005018190555050505050505b610e01816140c0565b9050610c6e565b50505050565b610e17816129ca565b50565b60026065541415610e3d5760405162461bcd60e51b815260040161059890613f39565b6002606581905550600060d18281548110610e6857634e487b7160e01b600052603260045260246000fd5b6000918252602080832085845260d482526040808520338087529352909320805460079093029093018054909450610ead926001600160a01b03919091169190612e42565b80600201548260050154610ec1919061407d565b600583015560006002820181905580825560018201819055604051908152839033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600160655550565b610f2561055b611311565b610f2e336128fa565b33610f37611311565b6001600160a01b031614610f5d5760405162461bcd60e51b815260040161059890613eb9565b60d154811015610f6c57600080fd5b60d655565b60d15460005b81811015610f9857610f88816129ca565b610f91816140c0565b9050610f77565b5050565b610fa761055b611311565b610fb0336128fa565b33610fb9611311565b6001600160a01b031614610fdf5760405162461bcd60e51b815260040161059890613eb9565b6106f26000613461565b610ff461055b611311565b610ffd336128fa565b33611006611311565b6001600160a01b03161461102c5760405162461bcd60e51b815260040161059890613eb9565b60c9546040516370a0823160e01b81526106f29133916001600160a01b03909116906370a0823190611062903090600401613ddd565b60206040518083038186803b15801561107a57600080fd5b505afa15801561108e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b29190613c3c565b60c9546001600160a01b03169190612e42565b336110cf60345490565b6001600160a01b0316146111145760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401610598565b6106f233613461565b61112861055b611311565b611131336128fa565b3361113a611311565b6001600160a01b0316146111605760405162461bcd60e51b815260040161059890613eb9565b6106f26134b3565b61117361055b611311565b61117c336128fa565b33611185611311565b6001600160a01b0316146111ab5760405162461bcd60e51b815260040161059890613eb9565b813b1515806111c157506001600160a01b038216155b61121c5760405162461bcd60e51b815260206004820152602660248201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b6064820152608401610598565b611224610f71565b600060d1858154811061124757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201905083816001015460cf5461126a919061407d565b6112749190614026565b60cf556001810184905581156112a2576004810180546001600160a01b0319166001600160a01b0385161790555b816112ba5760048101546001600160a01b03166112bc565b825b6001600160a01b0316857fa54644aae5c48c5971516f334e4fe8ecbc7930e23f34877d4203c6551e67ffaa86856040516113029291909182521515602082015260400190565b60405180910390a35050505050565b6033546001600160a01b031690565b600260655414156113435760405162461bcd60e51b815260040161059890613f39565b600260655560975460ff161561136b5760405162461bcd60e51b815260040161059890613e41565b600060d1848154811061138e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d4825260408085206001600160a01b03881686529092529220600790910290910191506113c8856129ca565b8054156114b2576001810154600086815260d5602090815260408083206001600160a01b03881684529091528120546006850154600285015492939264e8d4a51000916114149161405e565b60038701548654611425919061405e565b61142f9190614026565b611439919061403e565b6114439190614026565b61144d919061407d565b600087815260d5602090815260408083206001600160a01b0389168452909152812055905061147c8482612bdd565b905085846001600160a01b031660008051602061412b833981519152836040516114a891815260200190565b60405180910390a3505b838160000160008282546114c69190614026565b9091555050600281015460ca546040516370a0823160e01b815261155e916001600160a01b0316906370a0823190611502908890600401613ddd565b60206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115529190613c3c565b8354610a12919061405e565b600283018190556005840154829161157591614026565b61157f919061407d565b60058401556006830154600283015464e8d4a510009161159e9161405e565b600385015484546115af919061405e565b6115b99190614026565b6115c3919061403e565b8260010181905550600060d187815481106115ee57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600460079092020101546001600160a01b0316905080156116955782546040516358cae9b160e01b81526001600160a01b038316916358cae9b191611641918991600401613df1565b602060405180830381600087803b15801561165b57600080fd5b505af115801561166f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116939190613c3c565b505b83546116ac906001600160a01b031633308961350b565b86856001600160a01b03167f16f3fbfd4bcc50a5cecb2e53e398a1ad77d89f63288ef540d862b264ed57eb1f886040516116e891815260200190565b60405180910390a3505060016065555050505050565b61170961055b611311565b611712336128fa565b3361171b611311565b6001600160a01b0316146117415760405162461bcd60e51b815260040161059890613eb9565b813b61179e5760405162461bcd60e51b815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f6044820152651b9d1c9858dd60d21b6064820152608401610598565b803b1515806117b457506001600160a01b038116155b61180f5760405162461bcd60e51b815260206004820152602660248201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b6064820152608401610598565b61181a60d283613543565b1561185f5760405162461bcd60e51b81526020600482015260156024820152741859190e88131408185b1c9958591e481859191959605a1b6044820152606401610598565b60d65460d154106118a95760405162461bcd60e51b81526020600482015260146024820152731859190e88195e18d95959081b585e081c1bdbdb60621b6044820152606401610598565b6118b1610f71565b600060d05442116118c45760d0546118c6565b425b90508360cf60008282546118da9190614026565b90915550506040805160e0810182526001600160a01b038086168252602082018781529282018481526000606084018181528784166080860190815260a0860183815260c0870184815260d180546001810182559552965160079094027f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce3810180549588166001600160a01b031996871617905597517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce489015593517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce588015590517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce6870155517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce78601805491909416911617909155517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce8830155517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce990910155611a6660d28461355f565b50816001600160a01b0316836001600160a01b0316600160d180549050611a8d919061407d565b6040518781527f4b16bd2431ad24dc020ab0e1de7fcb6563dead6a24fb10089d6c23e97a70381f9060200160405180910390a450505050565b611ad161055b611311565b611ada336128fa565b33611ae3611311565b6001600160a01b031614611b095760405162461bcd60e51b815260040161059890613eb9565b6001600160a01b038116611b4d5760405162461bcd60e51b815260206004820152600b60248201526a5a65726f4164647265737360a81b6044820152606401610598565b6001600160a01b0316603455565b60006060600060d18481548110611b8257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060079091020160048101549091506001600160a01b031615611d25576004808201546040805163f7c618c160e01b815290516001600160a01b039092169263f7c618c1928282019260209290829003018186803b158015611bec57600080fd5b505afa158015611c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c249190613b29565b92508060040160009054906101000a90046001600160a01b03166001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190613b29565b6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611ce657600080fd5b505afa158015611cfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d229190810190613b95565b91505b50915091565b600054610100900460ff16611d465760005460ff1615611d4a565b303b155b611d665760405162461bcd60e51b815260040161059890613e6b565b600054610100900460ff16158015611d88576000805461ffff19166101011790555b6001600160a01b038616611ddc5760405162461bcd60e51b815260206004820152601b60248201527a6d6f726520616464726573732063616e6e6f74206265207a65726f60281b6044820152606401610598565b6001600160a01b038516611e325760405162461bcd60e51b815260206004820152601d60248201527f76654d6f726520616464726573732063616e6e6f74206265207a65726f0000006044820152606401610598565b83611e7d5760405162461bcd60e51b815260206004820152601b60248201527a6d6f726520706572207365632063616e6e6f74206265207a65726f60281b6044820152606401610598565b6103e8831115611ee55760405162461bcd60e51b815260206004820152602d60248201527f64696c7574696e67207265706172746974696f6e206d75737420626520696e2060448201526c072616e676520302c203130303609c1b6064820152608401610598565b611eed613574565b611ef56135f5565b611efd613623565b60c980546001600160a01b038089166001600160a01b03199283161790925560ca80549288169290911691909117905560cc84905560cd839055611f43836103e861407d565b60ce5560d0829055603260d6558015611f62576000805461ff00191690555b505050505050565b60026065541415611f8d5760405162461bcd60e51b815260040161059890613f39565b600260655560cb546001600160a01b0316611fd65760405162461bcd60e51b8152602060048201526009602482015268746f2077686572653f60b81b6044820152606401610598565b612012828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612e9d92505050565b50505060005b818110156121f657600083838381811061204257634e487b7160e01b600052603260045260246000fd5b60209081029290920135600081815260d484526040808220338352909452929092208054929350911590506121e357600060d1838154811061209457634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201805460cb54845460405163095ea7b360e01b81529394506001600160a01b039283169363095ea7b3936120dc93169190600401613df1565b602060405180830381600087803b1580156120f657600080fd5b505af115801561210a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212e9190613b0d565b5060cb54825460405163481086bf60e11b81526004810186905260248101919091523360448201526001600160a01b03909116906390210d7e90606401600060405180830381600087803b15801561218557600080fd5b505af1158015612199573d6000803e3d6000fd5b5050505081600201548160050160008282546121b5919061407d565b909155505050600082815260d460209081526040808320338452909152812081815560018101829055600201555b5050806121ef906140c0565b9050612018565b5050600160655550565b61220b61055b611311565b612214336128fa565b3361221d611311565b6001600160a01b0316146122435760405162461bcd60e51b815260040161059890613eb9565b6103e881111561225257600080fd5b61225a610f71565b60cd81905561226b816103e861407d565b60ce55337fb24c3afbe477581b073ec4a6f19df34024e917cee6bb519129629defa718f6308261229d816103e861407d565b604080519283526020830191909152016105dc565b600080600260655414156122d85760405162461bcd60e51b815260040161059890613f39565b600260655560975460ff16156123005760405162461bcd60e51b815260040161059890613e41565b600060d1858154811061232357634e487b7160e01b600052603260045260246000fd5b6000918252602080832088845260d482526040808520338652909252922060079091029091019150612354866129ca565b80546000901561242f576001820154600088815260d5602090815260408083203384529091529020546006850154600285015464e8d4a51000916123979161405e565b600387015486546123a8919061405e565b6123b29190614026565b6123bc919061403e565b6123c69190614026565b6123d0919061407d565b600088815260d5602090815260408083203380855292528220919091559091506123fa9082612bdd565b905086336001600160a01b031660008051602061412b8339815191528360405161242691815260200190565b60405180910390a35b858260000160008282546124439190614026565b9091555050600282015460ca546040516370a0823160e01b815261247f916001600160a01b0316906370a08231906109b6903390600401613ddd565b600284018190556005850154829161249691614026565b6124a0919061407d565b60058501556006840154600284015464e8d4a51000916124bf9161405e565b600386015485546124d0919061405e565b6124da9190614026565b6124e4919061403e565b8360010181905550600060d1898154811061250f57634e487b7160e01b600052603260045260246000fd5b600091825260208220600460079092020101546001600160a01b0316915081156125b65784546040516358cae9b160e01b81526001600160a01b038416916358cae9b191612561913391600401613df1565b602060405180830381600087803b15801561257b57600080fd5b505af115801561258f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b39190613c3c565b90505b85546125cd906001600160a01b031633308c61350b565b6040518981528a9033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590602001610b94565b600080606060008060d1878154811061262a57634e487b7160e01b600052603260045260246000fd5b600091825260208083208a845260d4825260408085206001600160a01b038c81168752935280852060079490940290910160038101546006820154825493516370a0823160e01b81529297509495909493909216906370a0823190612693903090600401613ddd565b60206040518083038186803b1580156126ab57600080fd5b505afa1580156126bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e39190613c3c565b90508460020154421180156126f757508015155b156127cf57600085600201544261270e919061407d565b9050600060cf54876001015460cc5484612728919061405e565b612732919061405e565b61273c919061403e565b905061274a836103e861405e565b60cd5461275c8364e8d4a5100061405e565b612766919061405e565b612770919061403e565b61277a9086614026565b945086600501546000146127cc576005870154612799906103e861405e565b60ce546127ab8364e8d4a5100061405e565b6127b5919061405e565b6127bf919061403e565b6127c99085614026565b93505b50505b600184015460008c815260d5602090815260408083206001600160a01b038f168452909152902054600286015464e8d4a510009061280e90869061405e565b875461281b90889061405e565b6128259190614026565b61282f919061403e565b6128399190614026565b612843919061407d565b60048601549099506001600160a01b0316156128ec576128628b611b5b565b60048088015460405163c031a66f60e01b8152939b509199506001600160a01b039091169163c031a66f91612899918e9101613ddd565b60206040518083038186803b1580156128b157600080fd5b505afa1580156128c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e99190613c3c565b95505b505050505092959194509250565b610e178160405160240161290e9190613ddd565b60408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052613656565b60975460ff166129865760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610598565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516129c09190613ddd565b60405180910390a1565b600060d182815481106129ed57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020190508060020154421115610f985780546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612a39903090600401613ddd565b60206040518083038186803b158015612a5157600080fd5b505afa158015612a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a899190613c3c565b905080612a9d575042600290910155610e17565b6000826002015442612aaf919061407d565b9050600060cf54846001015460cc5484612ac9919061405e565b612ad3919061405e565b612add919061403e565b9050612aeb836103e861405e565b60cd54612afd8364e8d4a5100061405e565b612b07919061405e565b612b11919061403e565b846003016000828254612b249190614026565b90915550506005840154612b3e5760006006850155612b8e565b6005840154612b4f906103e861405e565b60ce54612b618364e8d4a5100061405e565b612b6b919061405e565b612b75919061403e565b846006016000828254612b889190614026565b90915550505b4260028501819055600385015460405187927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f4692612bce92889190613fe0565b60405180910390a25050505050565b60c9546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190612c12903090600401613ddd565b60206040518083038186803b158015612c2a57600080fd5b505afa158015612c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c629190613c3c565b905060008111612cae5760405162461bcd60e51b81526020600482015260176024820152764e6f20746f6b656e7320746f206469737472696275746560481b6044820152606401610598565b80831115612d425760c95460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612ce89087908590600401613df1565b602060405180830381600087803b158015612d0257600080fd5b505af1158015612d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3a9190613b0d565b509050612dcc565b60c95460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612d749087908790600401613df1565b602060405180830381600087803b158015612d8e57600080fd5b505af1158015612da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc69190613b0d565b50829150505b92915050565b60006003821115612e335750806000612dec60028361403e565b612df7906001614026565b90505b81811015612e2d57905080600281612e12818661403e565b612e1c9190614026565b612e26919061403e565b9050612dfa565b50612e3d565b8115612e3d575060015b919050565b612e988363a9059cbb60e01b8484604051602401612e61929190613df1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613677565b505050565b600060608060008085516001600160401b03811115612ecc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ef5578160200160208202803683370190505b509050600086516001600160401b03811115612f2157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612f4a578160200160208202803683370190505b50905060005b875181101561329557612f89888281518110612f7c57634e487b7160e01b600052603260045260246000fd5b60200260200101516129ca565b600060d1898381518110612fad57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110612fd357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702019050600060d460008b858151811061300957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825281810192909252604090810160009081203382529092529020805490915015613282576000816001015460d560008d878151811061306557634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000336001600160a01b03166001600160a01b031681526020019081526020016000205464e8d4a51000856006015485600201546130b9919061405e565b600387015486546130ca919061405e565b6130d49190614026565b6130de919061403e565b6130e89190614026565b6130f2919061407d565b9050600060d560008d878151811061311a57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825281810192909252604090810160009081203382529092529020556006830154600283015464e8d4a510009161315c9161405e565b6003850154845461316d919061405e565b6131779190614026565b613181919061403e565b60018301556131908188614026565b9650808685815181106131b357634e487b7160e01b600052603260045260246000fd5b602090810291909101015260048301546001600160a01b0316801561327f5782546040516358cae9b160e01b81526001600160a01b038316916358cae9b191613200913391600401613df1565b602060405180830381600087803b15801561321a57600080fd5b505af115801561322e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132529190613c3c565b86868151811061327257634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50505b50508061328e906140c0565b9050612f50565b5060006132a23385612bdd565b90508381146133b75760005b88518110156133b157848482815181106132d857634e487b7160e01b600052603260045260246000fd5b6020026020010151836132eb919061405e565b6132f5919061403e565b84828151811061331557634e487b7160e01b600052603260045260246000fd5b60200260200101818152505088818151811061334157634e487b7160e01b600052603260045260246000fd5b6020026020010151336001600160a01b031660008051602061412b83398151915286848151811061338257634e487b7160e01b600052603260045260246000fd5b602002602001015160405161339991815260200190565b60405180910390a36133aa816140c0565b90506132ae565b50613455565b60005b8851811015613453578881815181106133e357634e487b7160e01b600052603260045260246000fd5b6020026020010151336001600160a01b031660008051602061412b83398151915286848151811061342457634e487b7160e01b600052603260045260246000fd5b602002602001015160405161343b91815260200190565b60405180910390a361344c816140c0565b90506133ba565b505b97919650945092505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156134d65760405162461bcd60e51b815260040161059890613e41565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129b33390565b6040516001600160a01b0380851660248301528316604482015260648101829052610e089085906323b872dd60e01b90608401612e61565b6000613558836001600160a01b038416613749565b9392505050565b6000613558836001600160a01b038416613761565b600054610100900460ff1661358f5760005460ff1615613593565b303b155b6135af5760405162461bcd60e51b815260040161059890613e6b565b600054610100900460ff161580156135d1576000805461ffff19166101011790555b6135d96137ab565b6135e16137d2565b8015610e17576000805461ff001916905550565b600054610100900460ff1661361c5760405162461bcd60e51b815260040161059890613eee565b6001606555565b600054610100900460ff1661364a5760405162461bcd60e51b815260040161059890613eee565b6097805460ff19169055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60006136cc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138389092919063ffffffff16565b805190915015612e9857808060200190518101906136ea9190613b0d565b612e985760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610598565b60009081526001919091016020526040902054151590565b600061376d8383613749565b6137a357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612dcc565b506000612dcc565b600054610100900460ff166106f25760405162461bcd60e51b815260040161059890613eee565b600054610100900460ff166137ed5760005460ff16156137f1565b303b155b61380d5760405162461bcd60e51b815260040161059890613e6b565b600054610100900460ff1615801561382f576000805461ffff19166101011790555b6135e133613461565b6060613847848460008561384f565b949350505050565b6060824710156138b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610598565b843b6138fe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610598565b600080866001600160a01b0316858760405161391a9190613dc1565b60006040518083038185875af1925050503d8060008114613957576040519150601f19603f3d011682016040523d82523d6000602084013e61395c565b606091505b509150915061396c828286613977565b979650505050505050565b60608315613986575081613558565b8251156139965782518084602001fd5b8160405162461bcd60e51b81526004016105989190613e2e565b6000602082840312156139c1578081fd5b813561355881614107565b600080604083850312156139de578081fd5b82356139e981614107565b946020939093013593505050565b60008060208385031215613a09578182fd5b82356001600160401b0380821115613a1f578384fd5b818501915085601f830112613a32578384fd5b813581811115613a40578485fd5b8660208260051b8501011115613a54578485fd5b60209290920196919550909350505050565b60006020808385031215613a78578182fd5b82356001600160401b0380821115613a8e578384fd5b818501915085601f830112613aa1578384fd5b813581811115613ab357613ab36140f1565b8060051b9150613ac4848301613ff6565b8181528481019084860184860187018a1015613ade578788fd5b8795505b83861015613b00578035835260019590950194918601918601613ae2565b5098975050505050505050565b600060208284031215613b1e578081fd5b81516135588161411c565b600060208284031215613b3a578081fd5b815161355881614107565b600080600080600060a08688031215613b5c578081fd5b8535613b6781614107565b94506020860135613b7781614107565b94979496505050506040830135926060810135926080909101359150565b600060208284031215613ba6578081fd5b81516001600160401b0380821115613bbc578283fd5b818401915084601f830112613bcf578283fd5b815181811115613be157613be16140f1565b613bf4601f8201601f1916602001613ff6565b9150808252856020828501011115613c0a578384fd5b613c1b816020840160208601614094565b50949350505050565b600060208284031215613c35578081fd5b5035919050565b600060208284031215613c4d578081fd5b5051919050565b60008060408385031215613c66578182fd5b823591506020830135613c7881614107565b809150509250929050565b600080600060608486031215613c97578081fd5b833592506020840135613ca981614107565b91506040840135613cb981614107565b809150509250925092565b60008060408385031215613cd6578182fd5b50508035926020909101359150565b600080600060608486031215613cf9578081fd5b83359250602084013591506040840135613cb981614107565b60008060008060808587031215613d27578182fd5b84359350602085013592506040850135613d4081614107565b91506060850135613d508161411c565b939692955090935050565b6000815180845260208085019450808401835b83811015613d8a57815187529582019590820190600101613d6e565b509495945050505050565b60008151808452613dad816020860160208601614094565b601f01601f19169290920160200192915050565b60008251613dd3818460208701614094565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038316815260406020820181905260009061384790830184613d95565b6000602082526135586020830184613d95565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8481526001600160a01b0384166020820152608060408201819052600090613f9a90830185613d95565b905082606083015295945050505050565b600084825260606020830152613fc46060830185613d5b565b8281036040840152613fd68185613d5b565b9695505050505050565b9283526020830191909152604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561401e5761401e6140f1565b604052919050565b60008219821115614039576140396140db565b500190565b60008261405957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614078576140786140db565b500290565b60008282101561408f5761408f6140db565b500390565b60005b838110156140af578181015183820152602001614097565b83811115610e085750506000910152565b60006000198214156140d4576140d46140db565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e1757600080fd5b8015158114610e1757600080fdfe71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954a264697066735822122060e11ba1abc110f76d4cd39aba87dad3b3ac08aa1b76de1b6ea48177638d78c164736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e35760003560e01c806304e3682a146101e8578063081e3eda146102045780630ba84cd21461020c5780631526fe271461022157806315e722701461027b57806317caf6f11461029b5780632ee98ff0146102a45780633f43fa33146102b75780633f4ba83a146102ca578063428f39a0146102d2578063441a3e70146102e55780634ed73d281461030d5780634f00a93e1461032f57806351eb05a6146103425780635312ea8e1461035557806353c5eb44146103685780635c975abb1461037b5780635f504a8214610391578063630b5ba114610399578063715018a6146103a1578063772dcfc8146103a957806379ba5097146103b15780637b62a738146103b95780638456cb59146103c257806388bba42f146103ca5780638da5cb5b146103dd57806390210d7e146103e557806393f1a40b146103f85780639ef3c2d714610441578063a5c758ac14610454578063ab7de0981461045d578063b5ed298a14610470578063bc70fdbc14610483578063c2108e4a146104a4578063d13f90b4146104cf578063d93bf4fe146104e2578063e0a4ed43146104f5578063e2bbb15814610508578063e6fd48bc1461051b578063f57347a814610524578063ffcd42631461052d575b600080fd5b6101f160ce5481565b6040519081526020015b60405180910390f35b60d1546101f1565b61021f61021a366004613c24565b610550565b005b61023461022f366004613c24565b6105e7565b604080516001600160a01b03988916815260208101979097528601949094526060850192909252909316608083015260a082019290925260c081019190915260e0016101fb565b60c95461028e906001600160a01b031681565b6040516101fb9190613ddd565b6101f160cf5481565b61021f6102b23660046139b0565b610642565b60cb5461028e906001600160a01b031681565b61021f6106a7565b61021f6102e03660046139b0565b6106f4565b6102f86102f3366004613cc4565b6107b5565b604080519283526020830191909152016101fb565b61032061031b366004613a66565b610bb1565b6040516101fb93929190613fab565b61021f61033d3660046139cc565b610c1c565b61021f610350366004613c24565b610e0e565b61021f610363366004613c24565b610e1a565b61021f610376366004613c24565b610f1a565b60975460ff1660405190151581526020016101fb565b60345461028e565b61021f610f71565b61021f610f9c565b61021f610fe9565b61021f6110c5565b6101f160d65481565b61021f61111d565b61021f6103d8366004613d12565b611168565b61028e611311565b61021f6103f3366004613ce5565b611320565b610432610406366004613c54565b60d460209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040516101fb93929190613fe0565b60ca5461028e906001600160a01b031681565b6101f160cc5481565b61021f61046b366004613c83565b6116fe565b61021f61047e3660046139b0565b611ac6565b610496610491366004613c24565b611b5b565b6040516101fb929190613e0a565b6101f16104b2366004613c54565b60d560209081526000928352604080842090915290825290205481565b61021f6104dd366004613b45565b611d2b565b61021f6104f03660046139f7565b611f6a565b61021f610503366004613c24565b612200565b6102f8610516366004613cc4565b6122b2565b6101f160d05481565b6101f160cd5481565b61054061053b366004613c54565b612601565b6040516101fb9493929190613f70565b61056061055b611311565b6128fa565b610569336128fa565b33610572611311565b6001600160a01b0316146105a15760405162461bcd60e51b815260040161059890613eb9565b60405180910390fd5b6105a9610f71565b60cc81905560405181815233907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c4053906020015b60405180910390a250565b60d181815481106105f757600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861697509395929491939116919087565b61064d61055b611311565b610656336128fa565b3361065f611311565b6001600160a01b0316146106855760405162461bcd60e51b815260040161059890613eb9565b60cb80546001600160a01b0319166001600160a01b0392909216919091179055565b6106b261055b611311565b6106bb336128fa565b336106c4611311565b6001600160a01b0316146106ea5760405162461bcd60e51b815260040161059890613eb9565b6106f261293d565b565b6106ff61055b611311565b610708336128fa565b33610711611311565b6001600160a01b0316146107375760405162461bcd60e51b815260040161059890613eb9565b6001600160a01b03811661074a57600080fd5b610752610f71565b60ca80546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f43da9254164f43010ac82d304ce937b4f4adcc3c527f81e997ddb34efd8cde92910160405180910390a25050565b600080600260655414156107db5760405162461bcd60e51b815260040161059890613f39565b600260655560975460ff16156108035760405162461bcd60e51b815260040161059890613e41565b600060d1858154811061082657634e487b7160e01b600052603260045260246000fd5b6000918252602080832088845260d48252604080852033865290925292208054600790920290920192508511156108945760405162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b6044820152606401610598565b61089d866129ca565b6001810154600087815260d5602090815260408083203384529091528120546006850154600285015492939264e8d4a51000916108d99161405e565b600387015486546108ea919061405e565b6108f49190614026565b6108fe919061403e565b6109089190614026565b610912919061407d565b600088815260d56020908152604080832033808552925282209190915590915061093c9082612bdd565b905086336001600160a01b031660008051602061412b8339815191528360405161096891815260200190565b60405180910390a36002820154825461098290889061407d565b835560ca546040516370a0823160e01b8152610a17916001600160a01b0316906370a08231906109b6903390600401613ddd565b60206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190613c3c565b8454610a12919061405e565b612dd2565b6002840181905560058501548291610a2e91614026565b610a38919061407d565b60058501556006840154600284015464e8d4a5100091610a579161405e565b60038601548554610a68919061405e565b610a729190614026565b610a7c919061403e565b8360010181905550600060d18981548110610aa757634e487b7160e01b600052603260045260246000fd5b600091825260208220600460079092020101546001600160a01b031691508115610b4e5784546040516358cae9b160e01b81526001600160a01b038416916358cae9b191610af9913391600401613df1565b602060405180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190613c3c565b90505b8554610b64906001600160a01b0316338b612e42565b6040518981528a9033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a360016065559299929850919650505050505050565b600060608060026065541415610bd95760405162461bcd60e51b815260040161059890613f39565b600260655560975460ff1615610c015760405162461bcd60e51b815260040161059890613e41565b610c0a84612e9d565b92509250925060016065559193909250565b60ca546001600160a01b03163314610c685760405162461bcd60e51b815260206004820152600f60248201526e6e6f7456654d6f72653a207775743f60881b6044820152606401610598565b60d15460005b81811015610e0857600081815260d4602090815260408083206001600160a01b038816845290915290208054610ca45750610df8565b600060d18381548110610cc757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702019050610ce0836129ca565b6000826001015464e8d4a5100083600601548560020154610d01919061405e565b60038501548654610d12919061405e565b610d1c9190614026565b610d26919061403e565b610d30919061407d565b600085815260d5602090815260408083206001600160a01b038c168452909152812080549293508392909190610d67908490614026565b909155505060028301548354600090610d8490610a12908a61405e565b60028601819055600685015490915064e8d4a5100090610da4908361405e565b60038601548754610db5919061405e565b610dbf9190614026565b610dc9919061403e565b600186015560058401548290610de0908390614026565b610dea919061407d565b846005018190555050505050505b610e01816140c0565b9050610c6e565b50505050565b610e17816129ca565b50565b60026065541415610e3d5760405162461bcd60e51b815260040161059890613f39565b6002606581905550600060d18281548110610e6857634e487b7160e01b600052603260045260246000fd5b6000918252602080832085845260d482526040808520338087529352909320805460079093029093018054909450610ead926001600160a01b03919091169190612e42565b80600201548260050154610ec1919061407d565b600583015560006002820181905580825560018201819055604051908152839033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600160655550565b610f2561055b611311565b610f2e336128fa565b33610f37611311565b6001600160a01b031614610f5d5760405162461bcd60e51b815260040161059890613eb9565b60d154811015610f6c57600080fd5b60d655565b60d15460005b81811015610f9857610f88816129ca565b610f91816140c0565b9050610f77565b5050565b610fa761055b611311565b610fb0336128fa565b33610fb9611311565b6001600160a01b031614610fdf5760405162461bcd60e51b815260040161059890613eb9565b6106f26000613461565b610ff461055b611311565b610ffd336128fa565b33611006611311565b6001600160a01b03161461102c5760405162461bcd60e51b815260040161059890613eb9565b60c9546040516370a0823160e01b81526106f29133916001600160a01b03909116906370a0823190611062903090600401613ddd565b60206040518083038186803b15801561107a57600080fd5b505afa15801561108e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b29190613c3c565b60c9546001600160a01b03169190612e42565b336110cf60345490565b6001600160a01b0316146111145760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401610598565b6106f233613461565b61112861055b611311565b611131336128fa565b3361113a611311565b6001600160a01b0316146111605760405162461bcd60e51b815260040161059890613eb9565b6106f26134b3565b61117361055b611311565b61117c336128fa565b33611185611311565b6001600160a01b0316146111ab5760405162461bcd60e51b815260040161059890613eb9565b813b1515806111c157506001600160a01b038216155b61121c5760405162461bcd60e51b815260206004820152602660248201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b6064820152608401610598565b611224610f71565b600060d1858154811061124757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201905083816001015460cf5461126a919061407d565b6112749190614026565b60cf556001810184905581156112a2576004810180546001600160a01b0319166001600160a01b0385161790555b816112ba5760048101546001600160a01b03166112bc565b825b6001600160a01b0316857fa54644aae5c48c5971516f334e4fe8ecbc7930e23f34877d4203c6551e67ffaa86856040516113029291909182521515602082015260400190565b60405180910390a35050505050565b6033546001600160a01b031690565b600260655414156113435760405162461bcd60e51b815260040161059890613f39565b600260655560975460ff161561136b5760405162461bcd60e51b815260040161059890613e41565b600060d1848154811061138e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d4825260408085206001600160a01b03881686529092529220600790910290910191506113c8856129ca565b8054156114b2576001810154600086815260d5602090815260408083206001600160a01b03881684529091528120546006850154600285015492939264e8d4a51000916114149161405e565b60038701548654611425919061405e565b61142f9190614026565b611439919061403e565b6114439190614026565b61144d919061407d565b600087815260d5602090815260408083206001600160a01b0389168452909152812055905061147c8482612bdd565b905085846001600160a01b031660008051602061412b833981519152836040516114a891815260200190565b60405180910390a3505b838160000160008282546114c69190614026565b9091555050600281015460ca546040516370a0823160e01b815261155e916001600160a01b0316906370a0823190611502908890600401613ddd565b60206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115529190613c3c565b8354610a12919061405e565b600283018190556005840154829161157591614026565b61157f919061407d565b60058401556006830154600283015464e8d4a510009161159e9161405e565b600385015484546115af919061405e565b6115b99190614026565b6115c3919061403e565b8260010181905550600060d187815481106115ee57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600460079092020101546001600160a01b0316905080156116955782546040516358cae9b160e01b81526001600160a01b038316916358cae9b191611641918991600401613df1565b602060405180830381600087803b15801561165b57600080fd5b505af115801561166f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116939190613c3c565b505b83546116ac906001600160a01b031633308961350b565b86856001600160a01b03167f16f3fbfd4bcc50a5cecb2e53e398a1ad77d89f63288ef540d862b264ed57eb1f886040516116e891815260200190565b60405180910390a3505060016065555050505050565b61170961055b611311565b611712336128fa565b3361171b611311565b6001600160a01b0316146117415760405162461bcd60e51b815260040161059890613eb9565b813b61179e5760405162461bcd60e51b815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f6044820152651b9d1c9858dd60d21b6064820152608401610598565b803b1515806117b457506001600160a01b038116155b61180f5760405162461bcd60e51b815260206004820152602660248201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b6064820152608401610598565b61181a60d283613543565b1561185f5760405162461bcd60e51b81526020600482015260156024820152741859190e88131408185b1c9958591e481859191959605a1b6044820152606401610598565b60d65460d154106118a95760405162461bcd60e51b81526020600482015260146024820152731859190e88195e18d95959081b585e081c1bdbdb60621b6044820152606401610598565b6118b1610f71565b600060d05442116118c45760d0546118c6565b425b90508360cf60008282546118da9190614026565b90915550506040805160e0810182526001600160a01b038086168252602082018781529282018481526000606084018181528784166080860190815260a0860183815260c0870184815260d180546001810182559552965160079094027f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce3810180549588166001600160a01b031996871617905597517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce489015593517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce588015590517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce6870155517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce78601805491909416911617909155517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce8830155517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce990910155611a6660d28461355f565b50816001600160a01b0316836001600160a01b0316600160d180549050611a8d919061407d565b6040518781527f4b16bd2431ad24dc020ab0e1de7fcb6563dead6a24fb10089d6c23e97a70381f9060200160405180910390a450505050565b611ad161055b611311565b611ada336128fa565b33611ae3611311565b6001600160a01b031614611b095760405162461bcd60e51b815260040161059890613eb9565b6001600160a01b038116611b4d5760405162461bcd60e51b815260206004820152600b60248201526a5a65726f4164647265737360a81b6044820152606401610598565b6001600160a01b0316603455565b60006060600060d18481548110611b8257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060079091020160048101549091506001600160a01b031615611d25576004808201546040805163f7c618c160e01b815290516001600160a01b039092169263f7c618c1928282019260209290829003018186803b158015611bec57600080fd5b505afa158015611c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c249190613b29565b92508060040160009054906101000a90046001600160a01b03166001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190613b29565b6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611ce657600080fd5b505afa158015611cfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d229190810190613b95565b91505b50915091565b600054610100900460ff16611d465760005460ff1615611d4a565b303b155b611d665760405162461bcd60e51b815260040161059890613e6b565b600054610100900460ff16158015611d88576000805461ffff19166101011790555b6001600160a01b038616611ddc5760405162461bcd60e51b815260206004820152601b60248201527a6d6f726520616464726573732063616e6e6f74206265207a65726f60281b6044820152606401610598565b6001600160a01b038516611e325760405162461bcd60e51b815260206004820152601d60248201527f76654d6f726520616464726573732063616e6e6f74206265207a65726f0000006044820152606401610598565b83611e7d5760405162461bcd60e51b815260206004820152601b60248201527a6d6f726520706572207365632063616e6e6f74206265207a65726f60281b6044820152606401610598565b6103e8831115611ee55760405162461bcd60e51b815260206004820152602d60248201527f64696c7574696e67207265706172746974696f6e206d75737420626520696e2060448201526c072616e676520302c203130303609c1b6064820152608401610598565b611eed613574565b611ef56135f5565b611efd613623565b60c980546001600160a01b038089166001600160a01b03199283161790925560ca80549288169290911691909117905560cc84905560cd839055611f43836103e861407d565b60ce5560d0829055603260d6558015611f62576000805461ff00191690555b505050505050565b60026065541415611f8d5760405162461bcd60e51b815260040161059890613f39565b600260655560cb546001600160a01b0316611fd65760405162461bcd60e51b8152602060048201526009602482015268746f2077686572653f60b81b6044820152606401610598565b612012828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612e9d92505050565b50505060005b818110156121f657600083838381811061204257634e487b7160e01b600052603260045260246000fd5b60209081029290920135600081815260d484526040808220338352909452929092208054929350911590506121e357600060d1838154811061209457634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201805460cb54845460405163095ea7b360e01b81529394506001600160a01b039283169363095ea7b3936120dc93169190600401613df1565b602060405180830381600087803b1580156120f657600080fd5b505af115801561210a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212e9190613b0d565b5060cb54825460405163481086bf60e11b81526004810186905260248101919091523360448201526001600160a01b03909116906390210d7e90606401600060405180830381600087803b15801561218557600080fd5b505af1158015612199573d6000803e3d6000fd5b5050505081600201548160050160008282546121b5919061407d565b909155505050600082815260d460209081526040808320338452909152812081815560018101829055600201555b5050806121ef906140c0565b9050612018565b5050600160655550565b61220b61055b611311565b612214336128fa565b3361221d611311565b6001600160a01b0316146122435760405162461bcd60e51b815260040161059890613eb9565b6103e881111561225257600080fd5b61225a610f71565b60cd81905561226b816103e861407d565b60ce55337fb24c3afbe477581b073ec4a6f19df34024e917cee6bb519129629defa718f6308261229d816103e861407d565b604080519283526020830191909152016105dc565b600080600260655414156122d85760405162461bcd60e51b815260040161059890613f39565b600260655560975460ff16156123005760405162461bcd60e51b815260040161059890613e41565b600060d1858154811061232357634e487b7160e01b600052603260045260246000fd5b6000918252602080832088845260d482526040808520338652909252922060079091029091019150612354866129ca565b80546000901561242f576001820154600088815260d5602090815260408083203384529091529020546006850154600285015464e8d4a51000916123979161405e565b600387015486546123a8919061405e565b6123b29190614026565b6123bc919061403e565b6123c69190614026565b6123d0919061407d565b600088815260d5602090815260408083203380855292528220919091559091506123fa9082612bdd565b905086336001600160a01b031660008051602061412b8339815191528360405161242691815260200190565b60405180910390a35b858260000160008282546124439190614026565b9091555050600282015460ca546040516370a0823160e01b815261247f916001600160a01b0316906370a08231906109b6903390600401613ddd565b600284018190556005850154829161249691614026565b6124a0919061407d565b60058501556006840154600284015464e8d4a51000916124bf9161405e565b600386015485546124d0919061405e565b6124da9190614026565b6124e4919061403e565b8360010181905550600060d1898154811061250f57634e487b7160e01b600052603260045260246000fd5b600091825260208220600460079092020101546001600160a01b0316915081156125b65784546040516358cae9b160e01b81526001600160a01b038416916358cae9b191612561913391600401613df1565b602060405180830381600087803b15801561257b57600080fd5b505af115801561258f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b39190613c3c565b90505b85546125cd906001600160a01b031633308c61350b565b6040518981528a9033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590602001610b94565b600080606060008060d1878154811061262a57634e487b7160e01b600052603260045260246000fd5b600091825260208083208a845260d4825260408085206001600160a01b038c81168752935280852060079490940290910160038101546006820154825493516370a0823160e01b81529297509495909493909216906370a0823190612693903090600401613ddd565b60206040518083038186803b1580156126ab57600080fd5b505afa1580156126bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e39190613c3c565b90508460020154421180156126f757508015155b156127cf57600085600201544261270e919061407d565b9050600060cf54876001015460cc5484612728919061405e565b612732919061405e565b61273c919061403e565b905061274a836103e861405e565b60cd5461275c8364e8d4a5100061405e565b612766919061405e565b612770919061403e565b61277a9086614026565b945086600501546000146127cc576005870154612799906103e861405e565b60ce546127ab8364e8d4a5100061405e565b6127b5919061405e565b6127bf919061403e565b6127c99085614026565b93505b50505b600184015460008c815260d5602090815260408083206001600160a01b038f168452909152902054600286015464e8d4a510009061280e90869061405e565b875461281b90889061405e565b6128259190614026565b61282f919061403e565b6128399190614026565b612843919061407d565b60048601549099506001600160a01b0316156128ec576128628b611b5b565b60048088015460405163c031a66f60e01b8152939b509199506001600160a01b039091169163c031a66f91612899918e9101613ddd565b60206040518083038186803b1580156128b157600080fd5b505afa1580156128c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e99190613c3c565b95505b505050505092959194509250565b610e178160405160240161290e9190613ddd565b60408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052613656565b60975460ff166129865760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610598565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516129c09190613ddd565b60405180910390a1565b600060d182815481106129ed57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020190508060020154421115610f985780546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612a39903090600401613ddd565b60206040518083038186803b158015612a5157600080fd5b505afa158015612a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a899190613c3c565b905080612a9d575042600290910155610e17565b6000826002015442612aaf919061407d565b9050600060cf54846001015460cc5484612ac9919061405e565b612ad3919061405e565b612add919061403e565b9050612aeb836103e861405e565b60cd54612afd8364e8d4a5100061405e565b612b07919061405e565b612b11919061403e565b846003016000828254612b249190614026565b90915550506005840154612b3e5760006006850155612b8e565b6005840154612b4f906103e861405e565b60ce54612b618364e8d4a5100061405e565b612b6b919061405e565b612b75919061403e565b846006016000828254612b889190614026565b90915550505b4260028501819055600385015460405187927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f4692612bce92889190613fe0565b60405180910390a25050505050565b60c9546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190612c12903090600401613ddd565b60206040518083038186803b158015612c2a57600080fd5b505afa158015612c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c629190613c3c565b905060008111612cae5760405162461bcd60e51b81526020600482015260176024820152764e6f20746f6b656e7320746f206469737472696275746560481b6044820152606401610598565b80831115612d425760c95460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612ce89087908590600401613df1565b602060405180830381600087803b158015612d0257600080fd5b505af1158015612d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3a9190613b0d565b509050612dcc565b60c95460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612d749087908790600401613df1565b602060405180830381600087803b158015612d8e57600080fd5b505af1158015612da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc69190613b0d565b50829150505b92915050565b60006003821115612e335750806000612dec60028361403e565b612df7906001614026565b90505b81811015612e2d57905080600281612e12818661403e565b612e1c9190614026565b612e26919061403e565b9050612dfa565b50612e3d565b8115612e3d575060015b919050565b612e988363a9059cbb60e01b8484604051602401612e61929190613df1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613677565b505050565b600060608060008085516001600160401b03811115612ecc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ef5578160200160208202803683370190505b509050600086516001600160401b03811115612f2157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612f4a578160200160208202803683370190505b50905060005b875181101561329557612f89888281518110612f7c57634e487b7160e01b600052603260045260246000fd5b60200260200101516129ca565b600060d1898381518110612fad57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110612fd357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702019050600060d460008b858151811061300957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825281810192909252604090810160009081203382529092529020805490915015613282576000816001015460d560008d878151811061306557634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000336001600160a01b03166001600160a01b031681526020019081526020016000205464e8d4a51000856006015485600201546130b9919061405e565b600387015486546130ca919061405e565b6130d49190614026565b6130de919061403e565b6130e89190614026565b6130f2919061407d565b9050600060d560008d878151811061311a57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825281810192909252604090810160009081203382529092529020556006830154600283015464e8d4a510009161315c9161405e565b6003850154845461316d919061405e565b6131779190614026565b613181919061403e565b60018301556131908188614026565b9650808685815181106131b357634e487b7160e01b600052603260045260246000fd5b602090810291909101015260048301546001600160a01b0316801561327f5782546040516358cae9b160e01b81526001600160a01b038316916358cae9b191613200913391600401613df1565b602060405180830381600087803b15801561321a57600080fd5b505af115801561322e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132529190613c3c565b86868151811061327257634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50505b50508061328e906140c0565b9050612f50565b5060006132a23385612bdd565b90508381146133b75760005b88518110156133b157848482815181106132d857634e487b7160e01b600052603260045260246000fd5b6020026020010151836132eb919061405e565b6132f5919061403e565b84828151811061331557634e487b7160e01b600052603260045260246000fd5b60200260200101818152505088818151811061334157634e487b7160e01b600052603260045260246000fd5b6020026020010151336001600160a01b031660008051602061412b83398151915286848151811061338257634e487b7160e01b600052603260045260246000fd5b602002602001015160405161339991815260200190565b60405180910390a36133aa816140c0565b90506132ae565b50613455565b60005b8851811015613453578881815181106133e357634e487b7160e01b600052603260045260246000fd5b6020026020010151336001600160a01b031660008051602061412b83398151915286848151811061342457634e487b7160e01b600052603260045260246000fd5b602002602001015160405161343b91815260200190565b60405180910390a361344c816140c0565b90506133ba565b505b97919650945092505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156134d65760405162461bcd60e51b815260040161059890613e41565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129b33390565b6040516001600160a01b0380851660248301528316604482015260648101829052610e089085906323b872dd60e01b90608401612e61565b6000613558836001600160a01b038416613749565b9392505050565b6000613558836001600160a01b038416613761565b600054610100900460ff1661358f5760005460ff1615613593565b303b155b6135af5760405162461bcd60e51b815260040161059890613e6b565b600054610100900460ff161580156135d1576000805461ffff19166101011790555b6135d96137ab565b6135e16137d2565b8015610e17576000805461ff001916905550565b600054610100900460ff1661361c5760405162461bcd60e51b815260040161059890613eee565b6001606555565b600054610100900460ff1661364a5760405162461bcd60e51b815260040161059890613eee565b6097805460ff19169055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60006136cc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138389092919063ffffffff16565b805190915015612e9857808060200190518101906136ea9190613b0d565b612e985760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610598565b60009081526001919091016020526040902054151590565b600061376d8383613749565b6137a357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612dcc565b506000612dcc565b600054610100900460ff166106f25760405162461bcd60e51b815260040161059890613eee565b600054610100900460ff166137ed5760005460ff16156137f1565b303b155b61380d5760405162461bcd60e51b815260040161059890613e6b565b600054610100900460ff1615801561382f576000805461ffff19166101011790555b6135e133613461565b6060613847848460008561384f565b949350505050565b6060824710156138b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610598565b843b6138fe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610598565b600080866001600160a01b0316858760405161391a9190613dc1565b60006040518083038185875af1925050503d8060008114613957576040519150601f19603f3d011682016040523d82523d6000602084013e61395c565b606091505b509150915061396c828286613977565b979650505050505050565b60608315613986575081613558565b8251156139965782518084602001fd5b8160405162461bcd60e51b81526004016105989190613e2e565b6000602082840312156139c1578081fd5b813561355881614107565b600080604083850312156139de578081fd5b82356139e981614107565b946020939093013593505050565b60008060208385031215613a09578182fd5b82356001600160401b0380821115613a1f578384fd5b818501915085601f830112613a32578384fd5b813581811115613a40578485fd5b8660208260051b8501011115613a54578485fd5b60209290920196919550909350505050565b60006020808385031215613a78578182fd5b82356001600160401b0380821115613a8e578384fd5b818501915085601f830112613aa1578384fd5b813581811115613ab357613ab36140f1565b8060051b9150613ac4848301613ff6565b8181528481019084860184860187018a1015613ade578788fd5b8795505b83861015613b00578035835260019590950194918601918601613ae2565b5098975050505050505050565b600060208284031215613b1e578081fd5b81516135588161411c565b600060208284031215613b3a578081fd5b815161355881614107565b600080600080600060a08688031215613b5c578081fd5b8535613b6781614107565b94506020860135613b7781614107565b94979496505050506040830135926060810135926080909101359150565b600060208284031215613ba6578081fd5b81516001600160401b0380821115613bbc578283fd5b818401915084601f830112613bcf578283fd5b815181811115613be157613be16140f1565b613bf4601f8201601f1916602001613ff6565b9150808252856020828501011115613c0a578384fd5b613c1b816020840160208601614094565b50949350505050565b600060208284031215613c35578081fd5b5035919050565b600060208284031215613c4d578081fd5b5051919050565b60008060408385031215613c66578182fd5b823591506020830135613c7881614107565b809150509250929050565b600080600060608486031215613c97578081fd5b833592506020840135613ca981614107565b91506040840135613cb981614107565b809150509250925092565b60008060408385031215613cd6578182fd5b50508035926020909101359150565b600080600060608486031215613cf9578081fd5b83359250602084013591506040840135613cb981614107565b60008060008060808587031215613d27578182fd5b84359350602085013592506040850135613d4081614107565b91506060850135613d508161411c565b939692955090935050565b6000815180845260208085019450808401835b83811015613d8a57815187529582019590820190600101613d6e565b509495945050505050565b60008151808452613dad816020860160208601614094565b601f01601f19169290920160200192915050565b60008251613dd3818460208701614094565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038316815260406020820181905260009061384790830184613d95565b6000602082526135586020830184613d95565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8481526001600160a01b0384166020820152608060408201819052600090613f9a90830185613d95565b905082606083015295945050505050565b600084825260606020830152613fc46060830185613d5b565b8281036040840152613fd68185613d5b565b9695505050505050565b9283526020830191909152604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561401e5761401e6140f1565b604052919050565b60008219821115614039576140396140db565b500190565b60008261405957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614078576140786140db565b500290565b60008282101561408f5761408f6140db565b500390565b60005b838110156140af578181015183820152602001614097565b83811115610e085750506000910152565b60006000198214156140d4576140d46140db565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e1757600080fd5b8015158114610e1757600080fdfe71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954a264697066735822122060e11ba1abc110f76d4cd39aba87dad3b3ac08aa1b76de1b6ea48177638d78c164736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,address,address)": {
        "details": "Reverts if the same LP token is added more than once.",
        "params": {
          "_allocPoint": "allocation points for this LP",
          "_lpToken": "the corresponding lp token",
          "_rewarder": "the rewarder"
        }
      },
      "deposit(uint256,uint256)": {
        "details": "it is possible to call this function with _amount == 0 to claim current rewards",
        "params": {
          "_amount": "amount to deposit",
          "_pid": "the pool id"
        }
      },
      "depositFor(uint256,uint256,address)": {
        "details": "user must initiate transaction from masterchef",
        "params": {
          "_amount": "amount to deposit",
          "_pid": "the pool id",
          "_user": "the user being represented"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "massUpdatePools()": {
        "details": "Be careful of gas spending!"
      },
      "migrate(uint256[])": {
        "details": "Assume the orginal MasterMore has stopped emisions hence we can skip updatePool() to save gas cost"
      },
      "multiClaim(uint256[])": {
        "params": {
          "_pids": "array pids, pools to claim"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingTokens(uint256,address)": {
        "params": {
          "_pid": "the pool id",
          "_user": "the user address TODO include factor operations"
        }
      },
      "proposeOwner(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewarderBonusTokenInfo(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "set(uint256,uint256,address,bool)": {
        "params": {
          "_allocPoint": "allocation points",
          "_pid": "the pool id",
          "_rewarder": "the rewarder",
          "overwrite": "overwrite rewarder?"
        }
      },
      "setVeMore(address)": {
        "params": {
          "_newVeMore": "the new VeMore address"
        }
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "updateEmissionRate(uint256)": {
        "details": "Pancake has to add hidden dummy pools inorder to alter the emission,here we make it simple and transparent to all.",
        "params": {
          "_morePerSec": "more amount to be updated"
        }
      },
      "updateEmissionRepartition(uint256)": {
        "params": {
          "_dilutingRepartition": "the future diluting repartition"
        }
      },
      "updateFactor(address,uint256)": {
        "details": "can only be called by veMore",
        "params": {
          "_newVeMoreBalance": "the amount of veMORE",
          "_user": "the user to update"
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "the amount to withdraw",
          "_pid": "the pool id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(uint256,address,address)": {
        "notice": "Add a new lp to the pool. Can only be called by the owner."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit LP tokens to MasterChef for MORE allocation."
      },
      "depositFor(uint256,uint256,address)": {
        "notice": "Deposit LP tokens to MasterChef for MORE allocation on behalf of user"
      },
      "emergencyMoreWithdraw()": {
        "notice": "In case we need to manually migrate MORE funds from MasterChef Sends all remaining more from the contract to the owner"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "massUpdatePools()": {
        "notice": "Update reward variables for all pools."
      },
      "migrate(uint256[])": {
        "notice": "Helper function to migrate fund from multiple pools to the new MasterMore.user must initiate transaction from masterchef"
      },
      "multiClaim(uint256[])": {
        "notice": "claims rewards for multiple pids"
      },
      "pendingTokens(uint256,address)": {
        "notice": "View function to see pending MOREs on frontend."
      },
      "poolLength()": {
        "notice": "returns pool length"
      },
      "rewarderBonusTokenInfo(uint256)": {
        "notice": "Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm"
      },
      "set(uint256,uint256,address,bool)": {
        "notice": "Update the given pool's MORE allocation point. Can only be called by the owner."
      },
      "setVeMore(address)": {
        "notice": "updates veMore address"
      },
      "updateEmissionRate(uint256)": {
        "notice": "updates emission rate"
      },
      "updateEmissionRepartition(uint256)": {
        "notice": "updates emission repartition"
      },
      "updateFactor(address,uint256)": {
        "notice": "updates factor after any veMore token operation (minting/burning)"
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool to be up-to-date."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw LP tokens from MasterMore.Automatically harvest pending rewards and sends to user"
      }
    },
    "notice": "MasterMore is a boss. He says \"go f your blocks maki boy, I'm gonna use timestamp instead\" In addition, veMore holders boost their (non-diluting) emissions. This contract rewards users in function of their amount of lp staked (diluting pool) factor (non-diluting pool) Factor and sumOfFactors are updated by contract VeMore.sol after any veMore minting/burning Note that it's ownable and the owner wields tremendous power. The ownership will be transferred to a governance smart contract once More is sufficiently distributed and the community can show to govern itself.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 55,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 578,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 36520,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 36691,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 246,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 289,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 231,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 34068,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "more",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20)1410"
      },
      {
        "astId": 34071,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "veMore",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IVeMore)66391"
      },
      {
        "astId": 34074,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "newMasterMore",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IMasterMore)65524"
      },
      {
        "astId": 34076,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "morePerSec",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 34078,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "dilutingRepartition",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 34080,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "nonDilutingRepartition",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 34082,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 34084,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 34088,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "poolInfo",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_struct(PoolInfo)34065_storage)dyn_storage"
      },
      {
        "astId": 34091,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "lpTokens",
        "offset": 0,
        "slot": "210",
        "type": "t_struct(AddressSet)6033_storage"
      },
      {
        "astId": 34098,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "userInfo",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)34048_storage))"
      },
      {
        "astId": 34104,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "claimableMore",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 34106,
        "contract": "contracts/rewards/MasterMore.sol:MasterMore",
        "label": "maxPoolLength",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)34065_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)34065_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterMore.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1410": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterMore)65524": {
        "encoding": "inplace",
        "label": "contract IMasterMore",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)65859": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(IVeMore)66391": {
        "encoding": "inplace",
        "label": "contract IVeMore",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)34048_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterMore.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)34048_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)34048_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterMore.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)34048_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(AddressSet)6033_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6032,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5732_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)34065_storage": {
        "encoding": "inplace",
        "label": "struct MasterMore.PoolInfo",
        "members": [
          {
            "astId": 34051,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1410"
          },
          {
            "astId": 34053,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 34055,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 34057,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "accMorePerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 34060,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "rewarder",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IRewarder)65859"
          },
          {
            "astId": 34062,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "sumOfFactors",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 34064,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "accMorePerFactorShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)5732_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5727,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5731,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)34048_storage": {
        "encoding": "inplace",
        "label": "struct MasterMore.UserInfo",
        "members": [
          {
            "astId": 34043,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34045,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 34047,
            "contract": "contracts/rewards/MasterMore.sol:MasterMore",
            "label": "factor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}