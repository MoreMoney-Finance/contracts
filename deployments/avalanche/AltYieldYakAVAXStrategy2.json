{
  "address": "0x3F898DaDf9E0Bd678B0D1513a3a6D88Ef43aeC2A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SubjectParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        }
      ],
      "name": "SubjectUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_accounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldCheckptIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trancheToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_oracleCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "_viewTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sourceStrategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "acceptMigration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apfSmoothingPer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "approvedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "checkApprovedAndEncode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "collectYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_yieldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "collectYieldValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "currentMultiple",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositedMultiple",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "depositedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "disapproveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disapprovedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeMultiple",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "harvestPartially",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "migrateAllTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetStrategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldRecipient",
          "type": "address"
        }
      ],
      "name": "migrateStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pegCurrency",
          "type": "address"
        }
      ],
      "name": "newCurrentOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldRecipient",
          "type": "address"
        }
      ],
      "name": "registerDepositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "registerMintTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "rescueCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "rescueNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "rescueStrandedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "smoothing",
          "type": "uint256"
        }
      ],
      "name": "setApfSmoothingPer10k",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setFeePer10k",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "setYakStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stabilityFeePer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "startingTokensPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenMetadata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralThisPhase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralNow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apfLastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apf",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "tranche",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "trancheToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trancheTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewAPF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllApprovedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllDisapprovedTokenStrategyMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "APF",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowablePer10k",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "valuePer1e18",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "strategyName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "tvl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "harvestBalance2Tally",
              "type": "uint256"
            },
            {
              "internalType": "enum IStrategy.YieldType",
              "name": "yieldType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingStrategy",
              "type": "address"
            }
          ],
          "internalType": "struct IStrategy.StrategyMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllDisapprovedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllFeesEver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllStrategyMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "APF",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowablePer10k",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "valuePer1e18",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "strategyName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "tvl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "harvestBalance2Tally",
              "type": "uint256"
            },
            {
              "internalType": "enum IStrategy.YieldType",
              "name": "yieldType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingStrategy",
              "type": "address"
            }
          ],
          "internalType": "struct IStrategy.StrategyMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllTokensEver",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "viewBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewEstimatedHarvestable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "viewHarvestBalance2Tally",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewSourceHarvestable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewStrategyMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "APF",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowablePer10k",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "valuePer1e18",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "strategyName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "tvl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "harvestBalance2Tally",
              "type": "uint256"
            },
            {
              "internalType": "enum IStrategy.YieldType",
              "name": "yieldType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingStrategy",
              "type": "address"
            }
          ],
          "internalType": "struct IStrategy.StrategyMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "name": "viewTargetCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewUnderlyingStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        }
      ],
      "name": "viewValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        }
      ],
      "name": "viewValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "viewYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_yieldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueCurrency",
          "type": "address"
        }
      ],
      "name": "viewYieldValueBorrowable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowablePer10k",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawnFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNative",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yakStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldType",
      "outputs": [
        {
          "internalType": "enum IStrategy.YieldType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x739e4c766272d6595d4d45df4cde7366aca6fb51df38b1754cf4393df024f81e",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x3F898DaDf9E0Bd678B0D1513a3a6D88Ef43aeC2A",
    "transactionIndex": 7,
    "gasUsed": "4932334",
    "logsBloom": "0x
    "blockHash": "0xdcc30ac8472d71f372c05c5ff33238bf724fbeb437274d388d2c8000c5b61840",
    "transactionHash": "0x739e4c766272d6595d4d45df4cde7366aca6fb51df38b1754cf4393df024f81e",
    "logs": [],
    "blockNumber": 15863148,
    "cumulativeGasUsed": "5954218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0x9e1EE00d45252aA58623F7d771FB414aA38f0878"
  ],
  "numDeployments": 1,
  "solcInputHash": "29c1ebb1b2d9c39d46482066141779aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SubjectParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"SubjectUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldCheckptIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trancheToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_oracleCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_viewTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acceptMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apfSmoothingPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approvedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"checkApprovedAndEncode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"collectYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_yieldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"collectYieldValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"currentMultiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositedMultiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"depositedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"disapproveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disapprovedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeMultiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"harvestPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrateAllTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldRecipient\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pegCurrency\",\"type\":\"address\"}],\"name\":\"newCurrentOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldRecipient\",\"type\":\"address\"}],\"name\":\"registerDepositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"registerMintTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueStrandedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"smoothing\",\"type\":\"uint256\"}],\"name\":\"setApfSmoothingPer10k\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeePer10k\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setYakStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stabilityFeePer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startingTokensPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralThisPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralNow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apfLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"tranche\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"trancheToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewAPF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllApprovedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllDisapprovedTokenStrategyMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"APF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuePer1e18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"strategyName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestBalance2Tally\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategy.YieldType\",\"name\":\"yieldType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingStrategy\",\"type\":\"address\"}],\"internalType\":\"struct IStrategy.StrategyMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllDisapprovedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllFeesEver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllStrategyMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"APF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuePer1e18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"strategyName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestBalance2Tally\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategy.YieldType\",\"name\":\"yieldType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingStrategy\",\"type\":\"address\"}],\"internalType\":\"struct IStrategy.StrategyMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllTokensEver\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"viewBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewEstimatedHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"viewHarvestBalance2Tally\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewSourceHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewStrategyMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"APF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuePer1e18\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"strategyName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestBalance2Tally\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategy.YieldType\",\"name\":\"yieldType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingStrategy\",\"type\":\"address\"}],\"internalType\":\"struct IStrategy.StrategyMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"name\":\"viewTargetCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewUnderlyingStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"}],\"name\":\"viewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"}],\"name\":\"viewValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"viewYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_yieldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueCurrency\",\"type\":\"address\"}],\"name\":\"viewYieldValueBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowablePer10k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawnFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yakStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldType\",\"outputs\":[{\"internalType\":\"enum IStrategy.YieldType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"charactersPlayed()\":{\"details\":\"returns all characters played by this contract (e.g. stable coin, oracle registry)\"},\"dependsOnCharacters()\":{\"details\":\"returns all the character dependencies like FEE_RECIPIENT\"},\"dependsOnRoles()\":{\"details\":\"returns all the roles dependencies of this contract like FUND_TRANSFERER\"},\"rolesPlayed()\":{\"details\":\"returns all roles played by this contract\"},\"updateMainCharacterCache(uint256)\":{\"details\":\"Updates the main character cache for a speciic character\"},\"updateRoleCache(uint256,address)\":{\"details\":\"Updates the role cache for a specific role and address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_viewTVL(address)\":{\"notice\":\"TVL per token\"},\"acceptMigration(uint256,address,address,uint256,uint256)\":{\"notice\":\"Accept migrated assets from another tranche\"},\"approveToken(address,bytes)\":{\"notice\":\"set up a token to be supported by this strategy\"},\"approvedToken(address)\":{\"notice\":\"Is a token supported by this strategy?\"},\"approvedTokensCount()\":{\"notice\":\"count the number of tokens this strategy currently supports\"},\"checkApprovedAndEncode(address,address)\":{\"notice\":\"Check whether a token is approved and encode params\"},\"collectYieldValueBorrowable(uint256,address,address,address)\":{\"notice\":\"For a specific tranche, collect yield and view value and borrowable per 10k\"},\"disapproveToken(address,bytes)\":{\"notice\":\"Give some token the stink-eye and tell it to never show its face again\"},\"disapprovedTokensCount()\":{\"notice\":\"count the number of tokens this strategy currently supports\"},\"harvestPartially(address)\":{\"notice\":\"Call reinvest\"},\"migrateAllTo(address)\":{\"notice\":\"Migrate all tranches managed to a new strategy, using strategy registry as go-between\"},\"migrateStrategy(uint256,address,address,address)\":{\"notice\":\"Migrate contents of tranche to new strategy\"},\"newCurrentOracle(address,address)\":{\"notice\":\"Notify contract to update oracle cache\"},\"registerDepositFor(address,uint256,uint256,address)\":{\"notice\":\"Register deposit to tranche on behalf of user (to be called by other contract)\"},\"registerMintTranche(address,uint256,address,uint256,uint256)\":{\"notice\":\"Allows tranche contracts to register new tranches\"},\"rescueCollateral(address,uint256,address)\":{\"notice\":\"In an emergency, withdraw tokens from yield generator\"},\"rescueNative(uint256,address)\":{\"notice\":\"Rescue any stranded native currency\"},\"rescueStrandedTokens(address,uint256,address)\":{\"notice\":\"In an emergency, withdraw any tokens stranded in this contract's balance\"},\"setApfSmoothingPer10k(uint256)\":{\"notice\":\"Since return rates vary, we smooth\"},\"setYakStrategy(address,address)\":{\"notice\":\"Set the yy strategy for a token\"},\"stabilityFeePer10k(address)\":{\"notice\":\"View Stability fee if any\"},\"trancheToken(uint256)\":{\"notice\":\"Returns the token associated with a tranche\"},\"trancheTokenID(uint256)\":{\"notice\":\"The ID of the tranche token (relevant if not handling ERC20)\"},\"viewAPF(address)\":{\"notice\":\"Annual percentage factor, APR = APF - 100%\"},\"viewAllApprovedTokens()\":{\"notice\":\"View all tokens currently supported by this strategy\"},\"viewAllDisapprovedTokens()\":{\"notice\":\"View all tokens currently supported by this strategy\"},\"viewAllFeesEver()\":{\"notice\":\"All fees including currently pending and already withdrawn\"},\"viewAllStrategyMetadata()\":{\"notice\":\"view metadata for all tokens in an array\"},\"viewAllTokensEver()\":{\"notice\":\"All the tokens this strategy has ever touched\"},\"viewBorrowable(uint256)\":{\"notice\":\"View borrowable per10k of tranche\"},\"viewEstimatedHarvestable(address)\":{\"notice\":\"View estimated harvestable amount\"},\"viewHarvestBalance2Tally(address)\":{\"notice\":\"View outstanding yield that needs to be distributed to accounts of an asset if any\"},\"viewSourceHarvestable(address)\":{\"notice\":\"View amount of yield that yak strategy could reinvest\"},\"viewStrategyMetadata(address)\":{\"notice\":\"View metadata for a token\"},\"viewTargetCollateralAmount(uint256)\":{\"notice\":\"View collateral owned by tranche, taking into account compounding and fee\"},\"viewValue(uint256,address)\":{\"notice\":\"View the value of a tranche\"},\"viewValueBorrowable(uint256,address)\":{\"notice\":\"View value and borrowable per10k of tranche\"},\"viewYield(uint256,address)\":{\"notice\":\"View accrued yield for a tranche\"},\"viewYieldValueBorrowable(uint256,address,address)\":{\"notice\":\"For a specific tranche, view its accrued yield, value and borrowable per 10k\"},\"withdraw(uint256,uint256,address,address)\":{\"notice\":\"Withdraw tokens from tranche (only callable by fund transferer)\"},\"withdrawAllFees()\":{\"notice\":\"Withdraw all acrrued fees\"},\"withdrawFees(address)\":{\"notice\":\"Withdraw fees for one token\"},\"yieldCurrency()\":{\"notice\":\"The currency used to aggregate yield in this strategy (mintable)\"},\"yieldType()\":{\"notice\":\"compounding\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AltYieldYakAVAXStrategy2.sol\":\"AltYieldYakAVAXStrategy2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC3156.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\",\"keccak256\":\"0x37da077051cf4b6f30ec15adeca851a7db85dc34173a4cfd033a01f9af0d00c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb218fa8b4b52df590ff19b9f6d08b5be7f3abfc168a0ea33f5eb612f8f4dd989\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0d9159aa6c1a0d8006fb152b0aee46a0f9b8938575ede1a0d7e186b3bc79c8d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20FlashMint.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../interfaces/IERC3156.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * Adds the {flashLoan} method, which provides flash loan support at the token\\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC20FlashMint is ERC20, IERC3156FlashLender {\\n    bytes32 private constant _RETURN_VALUE = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /**\\n     * @dev Returns the maximum amount of tokens available for loan.\\n     * @param token The address of the token that is requested.\\n     * @return The amont of token that can be loaned.\\n     */\\n    function maxFlashLoan(address token) public view override returns (uint256) {\\n        return token == address(this) ? type(uint256).max - ERC20.totalSupply() : 0;\\n    }\\n\\n    /**\\n     * @dev Returns the fee applied when doing flash loans. By default this\\n     * implementation has 0 fees. This function can be overloaded to make\\n     * the flash loan mechanism deflationary.\\n     * @param token The token to be flash loaned.\\n     * @param amount The amount of tokens to be loaned.\\n     * @return The fees applied to the corresponding flash loan.\\n     */\\n    function flashFee(address token, uint256 amount) public view virtual override returns (uint256) {\\n        require(token == address(this), \\\"ERC20FlashMint: wrong token\\\");\\n        // silence warning about unused variable without the addition of bytecode.\\n        amount;\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Performs a flash loan. New tokens are minted and sent to the\\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\\n     * interface. By the end of the flash loan, the receiver is expected to own\\n     * amount + fee tokens and have them approved back to the token contract itself so\\n     * they can be burned.\\n     * @param receiver The receiver of the flash loan. Should implement the\\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\\n     * @param token The token to be flash loaned. Only `address(this)` is\\n     * supported.\\n     * @param amount The amount of tokens to be loaned.\\n     * @param data An arbitrary datafield that is passed to the receiver.\\n     * @return `true` is the flash loan was successful.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual override returns (bool) {\\n        uint256 fee = flashFee(token, amount);\\n        _mint(address(receiver), amount);\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) == _RETURN_VALUE,\\n            \\\"ERC20FlashMint: invalid return value\\\"\\n        );\\n        uint256 currentAllowance = allowance(address(receiver), address(this));\\n        require(currentAllowance >= amount + fee, \\\"ERC20FlashMint: allowance does not allow refund\\\");\\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\\n        _burn(address(receiver), amount + fee);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x50e9caaf6a3e2415ea93e2531a8f3a5d7b449f7bc34b595b5738ed82b582744a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x8a763ef5625e97f5287c7ddd5ede434129069e15d83bf0a68ad10a5e56ccb439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/OracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./oracles/OracleAware.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./roles/DependsOnOracleListener.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\n/// Central hub and router for all oracles\\ncontract OracleRegistry is RoleAware, DependsOracleListener {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    mapping(address => mapping(address => address)) public tokenOracle;\\n    mapping(address => mapping(address => EnumerableSet.AddressSet))\\n        internal _listeners;\\n    mapping(address => uint256) public borrowablePer10ks;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(ORACLE_REGISTRY);\\n    }\\n\\n    function setBorrowable(address token, uint256 borrowablePer10k)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowablePer10ks[token] = borrowablePer10k;\\n        emit SubjectParameterUpdated(\\\"borrowable\\\", token, borrowablePer10k);\\n    }\\n\\n    /// Initialize oracle for a specific token\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        address oracle,\\n        uint256 borrowablePer10k,\\n        bool primary,\\n        bytes calldata data\\n    ) external onlyOwnerExecActivator {\\n        borrowablePer10ks[token] = borrowablePer10k;\\n        IOracle(oracle).setOracleParams(token, pegCurrency, data);\\n\\n        // only overwrite oracle and update listeners if update is for a primary\\n        // or there is no pre-existing oracle\\n        address previousOracle = tokenOracle[token][pegCurrency];\\n        if (previousOracle == address(0) || primary) {\\n            tokenOracle[token][pegCurrency] = oracle;\\n\\n            EnumerableSet.AddressSet storage listeners = _listeners[token][\\n                pegCurrency\\n            ];\\n            for (uint256 i; listeners.length() > i; i++) {\\n                OracleAware(listeners.at(i)).newCurrentOracle(\\n                    token,\\n                    pegCurrency\\n                );\\n            }\\n        }\\n\\n        emit SubjectParameterUpdated(\\\"borrowable\\\", token, borrowablePer10k);\\n    }\\n\\n    /// Which oracle contract is currently responsible for a token is cached\\n    /// This updates\\n    function listenForCurrentOracleUpdates(address token, address pegCurrency)\\n        external\\n        returns (address)\\n    {\\n        require(isOracleListener(msg.sender), \\\"Not allowed to listen\\\");\\n        _listeners[token][pegCurrency].add(msg.sender);\\n        return tokenOracle[token][pegCurrency];\\n    }\\n\\n    /// View converted value in currently registered oracle\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public view returns (uint256) {\\n        return\\n            IOracle(tokenOracle[token][pegCurrency]).viewAmountInPeg(\\n                token,\\n                inAmount,\\n                pegCurrency\\n            );\\n    }\\n\\n    /// View amounts for an array of tokens\\n    function viewAmountsInPeg(\\n        address[] calldata tokens,\\n        uint256[] calldata inAmounts,\\n        address pegCurrency\\n    ) external view returns (uint256[] memory) {\\n        uint256[] memory result = new uint256[](inAmounts.length);\\n        for (uint256 i; inAmounts.length > i; i++) {\\n            result[i] = viewAmountInPeg(tokens[i], inAmounts[i], pegCurrency);\\n        }\\n        return result;\\n    }\\n\\n    /// Update converted value in currently registered oracle\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) public returns (uint256) {\\n        return\\n            IOracle(tokenOracle[token][pegCurrency]).getAmountInPeg(\\n                token,\\n                inAmount,\\n                pegCurrency\\n            );\\n    }\\n\\n    /// Get amounts for an array of tokens\\n    function getAmountsInPeg(\\n        address[] calldata tokens,\\n        uint256[] calldata inAmounts,\\n        address pegCurrency\\n    ) external returns (uint256[] memory) {\\n        uint256[] memory result = new uint256[](inAmounts.length);\\n        for (uint256 i; inAmounts.length > i; i++) {\\n            result[i] = getAmountInPeg(tokens[i], inAmounts[i], pegCurrency);\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3698f072078d5f74cbbefab2d08c8b2446607f7bdf64b08d05b60380482d6194\",\"license\":\"BUSL-1.1\"},\"contracts/ProxyOwnershipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IProxyOwnership.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./roles/DependsOnTrancheTransferer.sol\\\";\\n\\n/// Provides a transitive closure over ownership relations for NFTs containing\\n/// other assets\\nabstract contract ProxyOwnershipERC721 is\\n    ERC721Enumerable,\\n    IProxyOwnership,\\n    DependsOnTrancheTransferer\\n{\\n    using Address for address;\\n\\n    mapping(uint256 => uint256) public _containedIn;\\n\\n    /// Allows for tokens to have not just an owner address, but also container\\n    /// within the owner contract which they belong to\\n    function containedIn(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address owner, uint256 containerId)\\n    {\\n        return (ownerOf(tokenId), _containedIn[tokenId]);\\n    }\\n\\n    /// Check that spender is approved, owner or approved for container\\n    function isAuthorized(address spender, uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        address tokenOwner = ownerOf(tokenId);\\n        return\\n            _isApprovedOrOwner(spender, tokenId) ||\\n            (tokenOwner.isContract() &&\\n                IProxyOwnership(tokenOwner).isAuthorized(\\n                    spender,\\n                    _containedIn[tokenId]\\n                ));\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal override view returns (bool) {\\n        return isTrancheTransferer(spender) || super._isApprovedOrOwner(spender, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x489b3426c6e02275a973ff0ac3c038bccbceaca575abe280a4732f96fe1d1e7e\",\"license\":\"BUSL-1.1\"},\"contracts/Stablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnMinterBurner.sol\\\";\\nimport \\\"./roles/DependsOnFeeRecipient.sol\\\";\\nimport \\\"../interfaces/IFeeReporter.sol\\\";\\n\\ncontract Stablecoin is\\n    RoleAware,\\n    ERC20FlashMint,\\n    ReentrancyGuard,\\n    DependsOnMinterBurner,\\n    DependsOnFeeRecipient,\\n    ERC20Permit,\\n    IFeeReporter\\n{\\n    uint256 public globalDebtCeiling = 2_000_000 ether;\\n\\n    uint256 public flashFeePer10k = (0.05 * 10_000) / 100;\\n    bool public flashLoansEnabled = true;\\n    uint256 public override viewAllFeesEver;\\n\\n    mapping(address => uint256) public minBalance;\\n\\n    constructor(address _roles)\\n        RoleAware(_roles)\\n        ERC20(\\\"Moremoney USD\\\", \\\"MONEY\\\")\\n        ERC20Permit(\\\"MONEY\\\")\\n    {\\n        _charactersPlayed.push(STABLECOIN);\\n    }\\n\\n    // --------------------------- Mint / burn --------------------------------------//\\n\\n    /// Mint stable, restricted to MinterBurner role (respecting global debt ceiling)\\n    function mint(address account, uint256 amount) external nonReentrant {\\n        require(isMinterBurner(msg.sender), \\\"Not an autorized minter/burner\\\");\\n        _mint(account, amount);\\n\\n        require(\\n            globalDebtCeiling > totalSupply(),\\n            \\\"Total supply exceeds global debt ceiling\\\"\\n        );\\n    }\\n\\n    /// Burn stable, restricted to MinterBurner role\\n    function burn(address account, uint256 amount) external nonReentrant {\\n        require(isMinterBurner(msg.sender), \\\"Not an authorized minter/burner\\\");\\n        _burn(account, amount);\\n    }\\n\\n    /// Set global debt ceiling\\n    function setGlobalDebtCeiling(uint256 debtCeiling) external onlyOwnerExec {\\n        globalDebtCeiling = debtCeiling;\\n        emit ParameterUpdated(\\\"debt ceiling\\\", debtCeiling);\\n    }\\n\\n    // --------------------------- Min balances -------------------------------------//\\n\\n    /// For some applications we may want to mint balances that can't be withdrawn or burnt.\\n    /// Contracts using this should first check balance before setting in a transaction\\n    function setMinBalance(address account, uint256 balance) external {\\n        require(isMinterBurner(msg.sender), \\\"Not an authorized minter/burner\\\");\\n\\n        minBalance[account] = balance;\\n    }\\n\\n    /// Check transfer and burn transactions for minimum balance compliance\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        super._afterTokenTransfer(from, to, amount);\\n        require(\\n            balanceOf(from) >= minBalance[from],\\n            \\\"Moremoney: below min balance\\\"\\n        );\\n    }\\n\\n    // ----------------- Flash loan related functions ------------------------------ //\\n\\n    /// Calculate the fee taken on a flash loan\\n    function flashFee(address, uint256 amount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return (amount * flashFeePer10k) / 10_000;\\n    }\\n\\n    /// Set flash fee\\n    function setFlashFeePer10k(uint256 fee) external onlyOwnerExec {\\n        flashFeePer10k = fee;\\n\\n        emit ParameterUpdated(\\\"flash fee\\\", fee);\\n    }\\n\\n    /// Take out a flash loan, sending fee to feeRecipient\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public override returns (bool) {\\n        require(flashLoansEnabled, \\\"Flash loans are disabled\\\");\\n        uint256 fee = flashFee(token, amount);\\n        _mint(feeRecipient(), fee);\\n        viewAllFeesEver += fee;\\n        return super.flashLoan(receiver, token, amount, data);\\n    }\\n\\n    /// Enable or disable flash loans\\n    function setFlashLoansEnabled(bool setting) external onlyOwnerExec {\\n        flashLoansEnabled = setting;\\n        emit SubjectUpdated(\\\"flash loans enabled/disabled\\\", address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x47a3c09d5747a57e05db671737b921b6936e8f8945ae928faf594f93744a90a8\",\"license\":\"BUSL-1.1\"},\"contracts/StrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// TODO: handle non-ERC20 migrations\\n\\n/// Central clearing house for all things strategy, for activating and migrating\\ncontract StrategyRegistry is RoleAware, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    mapping(address => address) public replacementStrategy;\\n\\n    EnumerableSet.AddressSet internal enabledStrategies;\\n    EnumerableSet.AddressSet internal allStrategiesEver;\\n\\n    mapping(address => uint256) public _tokenCount;\\n    mapping(address => uint256) public _disabledTokenCount;\\n    uint256 public totalTokenStratRows;\\n    uint256 public totalDisabledTokenStratRows;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(STRATEGY_REGISTRY);\\n    }\\n\\n    /// View all enabled strategies\\n    function allEnabledStrategies() external view returns (address[] memory) {\\n        return enabledStrategies.values();\\n    }\\n\\n    /// Enable a strategy\\n    function enableStrategy(address strat) external onlyOwnerExec {\\n        enabledStrategies.add(strat);\\n        allStrategiesEver.add(strat);\\n        updateTokenCount(strat);\\n    }\\n\\n    /// Disable a strategy\\n    function disableStrategy(address strat) external onlyOwnerExec {\\n        totalTokenStratRows -= _tokenCount[strat];\\n        enabledStrategies.remove(strat);\\n    }\\n\\n    /// View whether a strategy is enabled\\n    function enabledStrategy(address strat) external view returns (bool) {\\n        return enabledStrategies.contains(strat);\\n    }\\n\\n    /// Replace a strategy and migrate all its assets to replacement\\n    /// beware not to introduce cycles :)\\n    function replaceStrategy(address legacyStrat, address replacementStrat)\\n        external\\n        onlyOwnerExec\\n    {\\n        require(\\n            enabledStrategies.contains(replacementStrat),\\n            \\\"Replacement strategy is not enabled\\\"\\n        );\\n        IStrategy(legacyStrat).migrateAllTo(replacementStrat);\\n        enabledStrategies.remove(legacyStrat);\\n        replacementStrategy[legacyStrat] = replacementStrat;\\n    }\\n\\n    /// Get strategy or any replacement of it\\n    function getCurrentStrategy(address strat) external view returns (address) {\\n        address result = strat;\\n        while (replacementStrategy[result] != address(0)) {\\n            result = replacementStrategy[result];\\n        }\\n        return result;\\n    }\\n\\n    /// Endpoint for strategies to deposit tokens for migration destinations\\n    /// to later withdraw\\n    function depositMigrationTokens(address destination, address token)\\n        external\\n        nonReentrant\\n    {\\n        uint256 amount = IERC20(token).balanceOf(msg.sender);\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        IERC20(token).safeIncreaseAllowance(destination, amount);\\n    }\\n\\n    /// update accounting cache for view function\\n    function updateTokenCount(address strat) public {\\n        require(enabledStrategies.contains(strat), \\\"Not an enabled strategy!\\\");\\n\\n        uint256 oldCount = _tokenCount[strat];\\n        uint256 newCount = IStrategy(strat).approvedTokensCount();\\n        totalTokenStratRows = totalTokenStratRows + newCount - oldCount;\\n        _tokenCount[strat] = newCount;\\n\\n        oldCount = _disabledTokenCount[strat];\\n        newCount = IStrategy(strat).disapprovedTokensCount();\\n        totalDisabledTokenStratRows =\\n            totalDisabledTokenStratRows +\\n            newCount -\\n            oldCount;\\n        _disabledTokenCount[strat] = newCount;\\n    }\\n\\n    /// Return a big ol list of strategy metadata\\n    function viewAllEnabledStrategyMetadata()\\n        external\\n        view\\n        returns (IStrategy.StrategyMetadata[] memory)\\n    {\\n        IStrategy.StrategyMetadata[]\\n            memory result = new IStrategy.StrategyMetadata[](\\n                totalTokenStratRows\\n            );\\n        uint256 enabledTotal = enabledStrategies.length();\\n        uint256 resultI;\\n        for (uint256 stratI; enabledTotal > stratI; stratI++) {\\n            IStrategy strat = IStrategy(enabledStrategies.at(stratI));\\n            IStrategy.StrategyMetadata[] memory meta = strat\\n                .viewAllStrategyMetadata();\\n            for (uint256 i; meta.length > i; i++) {\\n                result[resultI + i] = meta[i];\\n            }\\n            resultI += meta.length;\\n        }\\n\\n        return result;\\n    }\\n\\n    function viewAllDisabledTokenStrategyMetadata()\\n        external\\n        view\\n        returns (IStrategy.StrategyMetadata[] memory)\\n    {\\n        IStrategy.StrategyMetadata[]\\n            memory result = new IStrategy.StrategyMetadata[](\\n                totalDisabledTokenStratRows\\n            );\\n\\n        uint256 enabledTotal = enabledStrategies.length();\\n        uint256 resultI;\\n\\n        for (uint256 stratI; enabledTotal > stratI; stratI++) {\\n            IStrategy strat = IStrategy(enabledStrategies.at(stratI));\\n            IStrategy.StrategyMetadata[] memory meta = strat\\n                .viewAllDisapprovedTokenStrategyMetadata();\\n\\n            for (uint256 i; meta.length > i; i++) {\\n                result[resultI + i] = meta[i];\\n            }\\n            resultI += meta.length;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xf63d1b1fe4abdce179e4d8273322e699a3ab72f95c97aaba0a64ea256d4da81c\",\"license\":\"BUSL-1.1\"},\"contracts/Tranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ProxyOwnershipERC721.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./StrategyRegistry.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnStrategyRegistry.sol\\\";\\nimport \\\"./roles/DependsOnFundTransferer.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/// Express an amount of token held in yield farming strategy as an ERC721\\ncontract Tranche is\\n    ProxyOwnershipERC721,\\n    DependsOnTrancheIDService,\\n    DependsOnStrategyRegistry,\\n    DependsOnFundTransferer,\\n    RoleAware,\\n    IAsset,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    event TrancheUpdated(uint256 indexed trancheId);\\n\\n    mapping(uint256 => address) public _holdingStrategies;\\n\\n    mapping(uint256 => EnumerableSet.UintSet) internal updatedTranches;\\n    uint256 public updateTrackingPeriod = 7 days;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _roles\\n    ) ERC721(_name, _symbol) RoleAware(_roles) {\\n        _rolesPlayed.push(TRANCHE);\\n    }\\n\\n    /// internal function managing the minting of new tranches\\n    /// letting the holding strategy collect the asset\\n    function _mintTranche(\\n        address minter,\\n        uint256 vaultId,\\n        address strategy,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) internal returns (uint256 trancheId) {\\n        require(\\n            strategyRegistry().enabledStrategy(strategy),\\n            \\\"Strategy not approved\\\"\\n        );\\n\\n        trancheId = trancheIdService().getNextTrancheId();\\n\\n        _holdingStrategies[trancheId] = strategy;\\n        _containedIn[trancheId] = vaultId;\\n        _checkAssetToken(assetToken);\\n        _safeMint(minter, trancheId, abi.encode(vaultId));\\n\\n        IStrategy(strategy).registerMintTranche(\\n            minter,\\n            trancheId,\\n            assetToken,\\n            assetTokenId,\\n            assetAmount\\n        );\\n\\n        _trackUpdated(trancheId);\\n    }\\n\\n    /// Mint a new tranche\\n    function mintTranche(\\n        uint256 vaultId,\\n        address strategy,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) external nonReentrant returns (uint256 trancheId) {\\n        return\\n            _mintTranche(\\n                msg.sender,\\n                vaultId,\\n                strategy,\\n                assetToken,\\n                assetTokenId,\\n                assetAmount\\n            );\\n    }\\n\\n    /// Deposit more collateral to the tranche\\n    function deposit(uint256 trancheId, uint256 tokenAmount)\\n        external\\n        nonReentrant\\n    {\\n        _deposit(msg.sender, trancheId, tokenAmount);\\n    }\\n\\n    /// Endpoint for authorized fund transferer to deposit on behalf of user\\n    function registerDepositFor(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 tokenAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized fund transfer\\\");\\n        _deposit(depositor, trancheId, tokenAmount);\\n    }\\n\\n    /// Internal logic for depositing\\n    function _deposit(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 tokenAmount\\n    ) internal virtual {\\n        IStrategy strat = IStrategy(getCurrentHoldingStrategy(trancheId));\\n        strat.registerDepositFor(\\n            depositor,\\n            trancheId,\\n            tokenAmount,\\n            ownerOf(trancheId)\\n        );\\n        _trackUpdated(trancheId);\\n    }\\n\\n    /// Withdraw tokens from tranche, checing viability\\n    function withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address yieldCurrency,\\n        address recipient\\n    ) external override nonReentrant {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw\\\"\\n        );\\n        require(recipient != address(0), \\\"Don't burn\\\");\\n\\n        _withdraw(trancheId, tokenAmount, yieldCurrency, recipient);\\n    }\\n\\n    /// Withdraw tokens from tranche, checing viability, internal logic\\n    function _withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address yieldCurrency,\\n        address recipient\\n    ) internal virtual {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        IStrategy(holdingStrategy).withdraw(\\n            trancheId,\\n            tokenAmount,\\n            yieldCurrency,\\n            recipient\\n        );\\n        require(isViable(trancheId), \\\"Tranche unviable\\\");\\n        _trackUpdated(trancheId);\\n    }\\n\\n    /// Make strategy calculate and disburse yield\\n    function _collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) internal returns (uint256) {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        uint256 yield = IStrategy(holdingStrategy).collectYield(\\n            trancheId,\\n            currency,\\n            recipient\\n        );\\n\\n        _trackUpdated(trancheId);\\n        return yield;\\n    }\\n\\n    /// Disburse yield in tranche to recipient\\n    function collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) external virtual override nonReentrant returns (uint256) {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to withdraw yield\\\"\\n        );\\n        return _collectYield(trancheId, currency, recipient);\\n    }\\n\\n    /// Collect yield in a batch\\n    function batchCollectYield(\\n        uint256[] calldata trancheIds,\\n        address currency,\\n        address recipient\\n    ) external nonReentrant returns (uint256) {\\n        uint256 yield;\\n\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n            require(\\n                isAuthorized(msg.sender, trancheId),\\n                \\\"not authorized to withdraw\\\"\\n            );\\n\\n            yield += _collectYield(trancheId, currency, recipient);\\n        }\\n        return yield;\\n    }\\n\\n    /// View accrued yield in a tranche\\n    function viewYield(uint256 trancheId, address currency)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return IStrategy(holdingStrategy).viewYield(trancheId, currency);\\n    }\\n\\n    /// View yield jointly in a batch\\n    function batchViewYield(uint256[] calldata trancheIds, address currency)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 yield;\\n\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            yield += viewYield(trancheId, currency);\\n        }\\n        return yield;\\n    }\\n\\n    /// View borrowable per 10k of tranche\\n    function viewBorrowable(uint256 trancheId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return IStrategy(holdingStrategy).viewBorrowable(trancheId);\\n    }\\n\\n    /// View value, and borrowable (average weighted by value) for a batch, jointly\\n    function batchViewValueBorrowable(\\n        uint256[] calldata trancheIds,\\n        address currency\\n    ) public view returns (uint256, uint256) {\\n        uint256 totalValue;\\n        uint256 totalBorrowablePer10k;\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            (uint256 value, uint256 borrowablePer10k) = IStrategy(\\n                _holdingStrategies[trancheId]\\n            ).viewValueBorrowable(trancheId, currency);\\n            totalBorrowablePer10k += value * borrowablePer10k;\\n        }\\n\\n        return (totalValue, totalBorrowablePer10k / totalValue);\\n    }\\n\\n    /// Collect yield and view value and borrowable per 10k\\n    function collectYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(\\n            isAuthorized(msg.sender, trancheId) || isFundTransferer(msg.sender),\\n            \\\"not authorized to withdraw\\\"\\n        );\\n        return\\n            _collectYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency,\\n                recipient\\n            );\\n    }\\n\\n    /// Internal function to collect yield and view value and borrowable per 10k\\n    function _collectYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        address holdingStrategy = getCurrentHoldingStrategy(trancheId);\\n        return\\n            IStrategy(holdingStrategy).collectYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency,\\n                recipient\\n            );\\n    }\\n\\n    /// Collect yield and view value and borrowable jointly and in weighted avg.\\n    function batchCollectYieldValueBorrowable(\\n        uint256[] calldata trancheIds,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        public\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        )\\n    {\\n        for (uint256 i; trancheIds.length > i; i++) {\\n            uint256 trancheId = trancheIds[i];\\n\\n            // these calls are nonReentrant individually\\n            (\\n                uint256 _yield,\\n                uint256 _value,\\n                uint256 _borrowablePer10k\\n            ) = collectYieldValueBorrowable(\\n                    trancheId,\\n                    yieldCurrency,\\n                    valueCurrency,\\n                    recipient\\n                );\\n            yield += _yield;\\n            value += _value;\\n            borrowablePer10k += _borrowablePer10k * _value;\\n        }\\n        borrowablePer10k = borrowablePer10k / value;\\n    }\\n\\n    /// View yield value and borrowable together\\n    function viewYieldValueBorrowable(\\n        uint256 trancheId,\\n        address yieldCurrency,\\n        address valueCurrency\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        address holdingStrategy = _holdingStrategies[trancheId];\\n        return\\n            IStrategy(holdingStrategy).viewYieldValueBorrowable(\\n                trancheId,\\n                yieldCurrency,\\n                valueCurrency\\n            );\\n    }\\n\\n    /// Check if a tranche is viable. Can be overriden to check\\n    /// collateralization ratio. By default defer to container.\\n    function isViable(uint256 trancheId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        address tokenOwner = ownerOf(trancheId);\\n        if (tokenOwner.isContract()) {\\n            IProxyOwnership bearer = IProxyOwnership(tokenOwner);\\n            return bearer.isViable(_containedIn[trancheId]);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// Migrate assets from one strategy to another, collecting yield if any\\n    function migrateStrategy(\\n        uint256 trancheId,\\n        address destination,\\n        address yieldToken,\\n        address yieldRecipient\\n    )\\n        external\\n        override\\n        nonReentrant\\n        returns (\\n            address token,\\n            uint256 tokenId,\\n            uint256 targetAmount\\n        )\\n    {\\n        require(\\n            isAuthorized(msg.sender, trancheId),\\n            \\\"not authorized to migrate\\\"\\n        );\\n\\n        require(\\n            strategyRegistry().enabledStrategy(destination),\\n            \\\"Strategy not approved\\\"\\n        );\\n\\n        address sourceStrategy = getCurrentHoldingStrategy(trancheId);\\n        (token, tokenId, targetAmount) = IStrategy(sourceStrategy)\\n            .migrateStrategy(\\n                trancheId,\\n                destination,\\n                yieldToken,\\n                yieldRecipient\\n            );\\n\\n        _acceptStrategyMigration(\\n            trancheId,\\n            sourceStrategy,\\n            destination,\\n            token,\\n            tokenId,\\n            targetAmount\\n        );\\n\\n        _trackUpdated(trancheId);\\n    }\\n\\n    /// Notify a recipient strategy that they have been migrated to\\n    function _acceptStrategyMigration(\\n        uint256 trancheId,\\n        address tokenSource,\\n        address destination,\\n        address token,\\n        uint256 tokenId,\\n        uint256 targetAmount\\n    ) internal {\\n        IStrategy(destination).acceptMigration(\\n            trancheId,\\n            tokenSource,\\n            token,\\n            tokenId,\\n            targetAmount\\n        );\\n\\n        _holdingStrategies[trancheId] = destination;\\n    }\\n\\n    /// Retrieve current strategy and update if necessary\\n    function getCurrentHoldingStrategy(uint256 trancheId)\\n        public\\n        returns (address)\\n    {\\n        address oldStrat = _holdingStrategies[trancheId];\\n        StrategyRegistry registry = strategyRegistry();\\n        address newStrat = registry.getCurrentStrategy(oldStrat);\\n\\n        if (oldStrat != newStrat) {\\n            _acceptStrategyMigration(\\n                trancheId,\\n                address(registry),\\n                newStrat,\\n                IStrategy(oldStrat).trancheToken(trancheId),\\n                IStrategy(oldStrat).trancheTokenID(trancheId),\\n                IStrategy(oldStrat).viewTargetCollateralAmount(trancheId)\\n            );\\n        }\\n\\n        return newStrat;\\n    }\\n\\n    /// View which strategy should be holding assets for a tranche,\\n    /// taking into account global migrations\\n    function viewCurrentHoldingStrategy(uint256 trancheId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return\\n            StrategyRegistry(strategyRegistry()).getCurrentStrategy(\\n                _holdingStrategies[trancheId]\\n            );\\n    }\\n\\n    /// Internals of tranche transfer, correctly tracking containement\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal override {\\n        super._safeTransfer(from, to, tokenId, _data);\\n        if (_data.length > 0) {\\n            _containedIn[tokenId] = abi.decode(_data, (uint256));\\n        }\\n\\n        _trackUpdated(tokenId);\\n    }\\n\\n    /// Set up an ID slot for this tranche with the id service\\n    function setupTrancheSlot() external {\\n        trancheIdService().setupTrancheSlot();\\n    }\\n\\n    /// Check whether an asset token is admissible\\n    function _checkAssetToken(address token) internal view virtual {}\\n\\n    /// View all the tranches of an owner\\n    function viewTranchesByOwner(address owner)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        uint256 num = balanceOf(owner);\\n        uint256[] memory result = new uint256[](num);\\n        for (uint256 i; num > i; i++) {\\n            result[i] = tokenOfOwnerByIndex(owner, i);\\n        }\\n\\n        return result;\\n    }\\n\\n    function trancheToken(uint256 trancheId) external view returns (address) {\\n        return\\n            IStrategy(viewCurrentHoldingStrategy(trancheId)).trancheToken(\\n                trancheId\\n            );\\n    }\\n\\n    /// track that a tranche was updated\\n    function _trackUpdated(uint256 trancheId) internal {\\n        updatedTranches[block.timestamp / updateTrackingPeriod].add(trancheId);\\n        emit TrancheUpdated(trancheId);\\n    }\\n\\n    /// Set update tracking period\\n    function setUpdateTrackingPeriod(uint256 period) external onlyOwnerExec {\\n        require(period != 0, \\\"Period can't be zero\\\");\\n        updateTrackingPeriod = period;\\n\\n        emit ParameterUpdated(\\\"tracking period\\\", period);\\n    }\\n}\\n\",\"keccak256\":\"0x03b4679013534cd02a52b2925d1555b7066777f73e33ea095886a5d35883b90e\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./TrancheIDService.sol\\\";\\nimport \\\"./roles/DependsOnTrancheIDService.sol\\\";\\n\\nabstract contract TrancheIDAware is RoleAware, DependsOnTrancheIDService {\\n    uint256 immutable totalTrancheSlots;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        totalTrancheSlots = TrancheIDService(\\n            Roles(_roles).mainCharacters(TRANCHE_ID_SERVICE)\\n        ).totalTrancheSlots();\\n    }\\n\\n    mapping(uint256 => address) _slotTranches;\\n\\n    function tranche(uint256 trancheId) public view returns (address) {\\n        uint256 slot = trancheId % totalTrancheSlots;\\n        address trancheContract = _slotTranches[slot];\\n        if (trancheContract == address(0)) {\\n            trancheContract = trancheIdService().slotTranches(slot);\\n        }\\n\\n        return trancheContract;\\n    }\\n}\\n\",\"keccak256\":\"0x5bb76f49729b9c9f20e09c82bd52888c63eece2d947b81141b5c4dec4caf4fa6\",\"license\":\"BUSL-1.1\"},\"contracts/TrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./roles/RoleAware.sol\\\";\\nimport \\\"./roles/DependsOnTranche.sol\\\";\\n\\ncontract TrancheIDService is RoleAware, DependsOnTranche {\\n    uint256 public constant totalTrancheSlots = 1e8;\\n    uint256 public nextTrancheSlot = 1;\\n\\n    struct TrancheSlot {\\n        uint256 nextTrancheIdRange;\\n        uint256 trancheSlot;\\n    }\\n\\n    mapping(address => TrancheSlot) public trancheSlots;\\n    mapping(uint256 => address) public slotTranches;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        _charactersPlayed.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function getNextTrancheId() external returns (uint256 id) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        TrancheSlot storage slot = trancheSlots[msg.sender];\\n        require(slot.trancheSlot != 0, \\\"Caller doesn't have a slot\\\");\\n        id = slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n        slot.nextTrancheIdRange++;\\n    }\\n\\n    function setupTrancheSlot() external returns (TrancheSlot memory) {\\n        require(isTranche(msg.sender), \\\"Caller not a tranche contract\\\");\\n        require(\\n            trancheSlots[msg.sender].trancheSlot == 0,\\n            \\\"Tranche already has a slot\\\"\\n        );\\n        trancheSlots[msg.sender] = TrancheSlot({\\n            nextTrancheIdRange: 1,\\n            trancheSlot: nextTrancheSlot\\n        });\\n        slotTranches[nextTrancheSlot] = msg.sender;\\n        nextTrancheSlot++;\\n        return trancheSlots[msg.sender];\\n    }\\n\\n    function viewNextTrancheId(address trancheContract)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheSlot storage slot = trancheSlots[trancheContract];\\n        return slot.nextTrancheIdRange * totalTrancheSlots + slot.trancheSlot;\\n    }\\n\\n    function viewTrancheContractByID(uint256 trancheId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return slotTranches[trancheId % totalTrancheSlots];\\n    }\\n\\n    function viewSlotByTrancheContract(address tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return trancheSlots[tranche].trancheSlot;\\n    }\\n}\\n\",\"keccak256\":\"0x2ff50771604993c3d0c405e26e33a054d55c7e5291e41993086c0c911a9d97fc\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../TrancheIDAware.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../roles/DependsOnOracleRegistry.sol\\\";\\n\\n/// Mixin for contracts that depend on oracles, caches current oracles\\n/// resposible for a token pair\\nabstract contract OracleAware is RoleAware, DependsOnOracleRegistry {\\n    mapping(address => mapping(address => address)) public _oracleCache;\\n\\n    constructor() {\\n        _rolesPlayed.push(ORACLE_LISTENER);\\n    }\\n\\n    /// Notify contract to update oracle cache\\n    function newCurrentOracle(address token, address pegCurrency) external {\\n        // make sure we don't init cache if we aren't listening\\n        if (_oracleCache[token][pegCurrency] != address(0)) {\\n            _oracleCache[token][pegCurrency] = oracleRegistry().tokenOracle(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    /// get current oracle and subscribe to cache updates if necessary\\n    function _getOracle(address token, address pegCurrency)\\n        internal\\n        returns (address oracle)\\n    {\\n        oracle = _oracleCache[token][pegCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().listenForCurrentOracleUpdates(\\n                token,\\n                pegCurrency\\n            );\\n        }\\n    }\\n\\n    /// View value of a token amount in value currency\\n    function _viewValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        return IOracle(oracle).viewAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    /// Get value of a token amount in value currency, updating oracle state\\n    function _getValue(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value) {\\n        address oracle = _getOracle(token, valueCurrency);\\n\\n        return IOracle(oracle).getAmountInPeg(token, amount, valueCurrency);\\n    }\\n\\n    /// View value and borrowable together\\n    function _viewValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal view virtual returns (uint256 value, uint256 borrowablePer10k) {\\n        address oracle = _oracleCache[token][valueCurrency];\\n        if (oracle == address(0)) {\\n            oracle = oracleRegistry().tokenOracle(token, valueCurrency);\\n        }\\n        (value, borrowablePer10k) = IOracle(oracle).viewPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n    }\\n\\n    /// Retrieve value (updating oracle) as well as borrowable per 10k\\n    function _getValueBorrowable(\\n        address token,\\n        uint256 amount,\\n        address valueCurrency\\n    ) internal virtual returns (uint256 value, uint256 borrowablerPer10k) {\\n        address oracle = _getOracle(token, valueCurrency);\\n\\n        (value, borrowablerPer10k) = IOracle(oracle).getPegAmountAndBorrowable(\\n            token,\\n            amount,\\n            valueCurrency\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x84ec21cfad9d2b01854792e7d372071cc8017704e67e5db8c29bbc9794af63e7\",\"license\":\"BUSL-1.1\"},\"contracts/roles/CallsStableCoinMintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependsOnStableCoin.sol\\\";\\n\\nabstract contract CallsStableCoinMintBurn is DependsOnStableCoin {\\n    constructor() {\\n        _rolesPlayed.push(MINTER_BURNER);\\n    }\\n\\n    function _mintStable(address account, uint256 amount) internal {\\n        stableCoin().mint(account, amount);\\n    }\\n\\n    function _burnStable(address account, uint256 amount) internal {\\n        stableCoin().burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc68e2165d8db32702b8a69155ff5acfc3db5dd72c18b648dc002fdc3aef7f3f1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title DependentContract.\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    /// @dev returns all characters played by this contract (e.g. stable coin, oracle registry)\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    /// @dev returns all roles played by this contract\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    /// @dev returns all the character dependencies like FEE_RECIPIENT\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    /// @dev returns all the roles dependencies of this contract like FUND_TRANSFERER\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xaea783afd230965aa519d2cc53f26a44f3f507b8d2089b8092c09caf35bd0d81\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnFeeRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnFeeRecipient is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(FEE_RECIPIENT);\\n    }\\n\\n    function feeRecipient() internal view returns (address) {\\n        return mainCharacterCache[FEE_RECIPIENT];\\n    }\\n}\\n\",\"keccak256\":\"0x9d1ad57c63532b22e883defa9e768e775e2da690f03978b5ca3cb4357b213e76\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnFundTransferer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnFundTransferer is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(FUND_TRANSFERER);\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n}\\n\",\"keccak256\":\"0x0d6d42f9d7e5a3643f7b1da53be3773fb93100906665f91d27fe258431b9f610\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnMinterBurner.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnMinterBurner is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(MINTER_BURNER);\\n    }\\n\\n    function isMinterBurner(address contr) internal view returns (bool) {\\n        return roleCache[contr][MINTER_BURNER];\\n    }\\n}\\n\",\"keccak256\":\"0x5863a6fd5193f04eec8e572cedc8060133d109445f4147d16ff528355eceb211\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleListener.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOracleListener is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(ORACLE_LISTENER);\\n    }\\n\\n    function isOracleListener(address contr) internal view returns (bool) {\\n        return roleCache[contr][ORACLE_LISTENER];\\n    }\\n}\\n\",\"keccak256\":\"0x12ae03a26b336364f75b3e9f720808e9685e7e18d52d71b4f7e166a0cce87540\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnOracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../OracleRegistry.sol\\\";\\n\\nabstract contract DependsOnOracleRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(ORACLE_REGISTRY);\\n    }\\n\\n    function oracleRegistry() internal view returns (OracleRegistry) {\\n        return OracleRegistry(mainCharacterCache[ORACLE_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xfbac5de676c7a5e178c70f897c70e366c39de56fe07c830ca8733a2ff1ebcfd3\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnStableCoin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../Stablecoin.sol\\\";\\n\\nabstract contract DependsOnStableCoin is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(STABLECOIN);\\n    }\\n\\n    function stableCoin() internal view returns (Stablecoin) {\\n        return Stablecoin(mainCharacterCache[STABLECOIN]);\\n    }\\n}\\n\",\"keccak256\":\"0x153e3a51fe0c85849aeaea0599ef716f540d5fcee309e822670fe951ecce9bf1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnStrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../StrategyRegistry.sol\\\";\\n\\nabstract contract DependsOnStrategyRegistry is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(STRATEGY_REGISTRY);\\n    }\\n\\n    function strategyRegistry() internal view returns (StrategyRegistry) {\\n        return StrategyRegistry(mainCharacterCache[STRATEGY_REGISTRY]);\\n    }\\n}\\n\",\"keccak256\":\"0xe863f111fb83af25b55b7899cb1c22cbe6cb316921f6f5a73077f18bbd54375b\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTranche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnTranche is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(TRANCHE);\\n    }\\n\\n    function isTranche(address contr) internal view returns (bool) {\\n        return roleCache[contr][TRANCHE];\\n    }\\n}\\n\",\"keccak256\":\"0x6e67b0afd0d3fc00998b226343fef13aeca167d19eb8cec8b8a55ebf96063962\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTrancheIDService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\nimport \\\"../TrancheIDService.sol\\\";\\n\\nabstract contract DependsOnTrancheIDService is DependentContract {\\n    constructor() {\\n        _dependsOnCharacters.push(TRANCHE_ID_SERVICE);\\n    }\\n\\n    function trancheIdService() internal view returns (TrancheIDService) {\\n        return TrancheIDService(mainCharacterCache[TRANCHE_ID_SERVICE]);\\n    }\\n}\\n\",\"keccak256\":\"0x88e728c6f64f4e84351f9eaa921bfca6f3dc22b58d433d8077a844edb9bd93c1\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnTrancheTransferer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnTrancheTransferer is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(TRANCHE_TRANSFERER);\\n    }\\n\\n    function isTrancheTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][TRANCHE_TRANSFERER];\\n    }\\n}\\n\",\"keccak256\":\"0x42d3a367f29a3afe61e6402c31dc4838c9dbe587e4f9be159243334298b245bc\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    event SubjectUpdated(string param, address subject);\\n    event ParameterUpdated(string param, uint256 value);\\n    event SubjectParameterUpdated(string param, address subject, uint256 value);\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Roles: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or disabler\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or activator\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Updates the role cache for a specific role and address\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.roles(contr, role);\\n    }\\n\\n    /// @dev Updates the main character cache for a speciic character\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    /// @dev returns the owner's address\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    /// @dev returns the executor address\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    /// @dev returns the disabler address\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    /// @dev checks whether the passed address is activator or not\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.roles(contr, ACTIVATOR);\\n    }\\n}\\n\",\"keccak256\":\"0xeb75105e3789b321336a2f2e81a32ba0b8136809e9e7184629650a374b094871\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant TRANCHE_TRANSFERER = 5;\\nuint256 constant UNDERWATER_LIQUIDATOR = 6;\\nuint256 constant LIQUIDATION_PROTECTED = 7;\\nuint256 constant SMART_LIQUIDITY = 8;\\nuint256 constant LIQUID_YIELD = 9;\\nuint256 constant VEMORE_MINTER = 10;\\n\\nuint256 constant PROTOCOL_TOKEN = 100;\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\nuint256 constant CURVE_POOL = 109;\\nuint256 constant ISOLATED_LENDING_LIQUIDATION = 110;\\nuint256 constant STABLE_LENDING = 111;\\nuint256 constant STABLE_LENDING_LIQUIDATION = 112;\\nuint256 constant SMART_LIQUIDITY_FACTORY = 113;\\nuint256 constant LIQUID_YIELD_HOLDER = 114;\\nuint256 constant LIQUID_YIELD_REBALANCER = 115;\\nuint256 constant LIQUID_YIELD_REDISTRIBUTOR_MAVAX = 116;\\nuint256 constant LIQUID_YIELD_REDISTRIBUTOR_MSAVAX = 117;\\nuint256 constant INTEREST_RATE_CONTROLLER = 118;\\nuint256 constant STABLE_LENDING_2 = 119;\\nuint256 constant STABLE_LENDING2_LIQUIDATION = 120;\\nuint256 constant VEMORE = 121;\\n\\nuint256 constant DIRECT_LIQUIDATOR = 200;\\nuint256 constant LPT_LIQUIDATOR = 201;\\nuint256 constant DIRECT_STABLE_LIQUIDATOR = 202;\\nuint256 constant LPT_STABLE_LIQUIDATOR = 203;\\nuint256 constant LPT_STABLE2_LIQUIDATOR = 204;\\nuint256 constant DIRECT_STABLE2_LIQUIDATOR = 205;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev assign role to an account\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    /// @dev revoke role of a particular account\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    /// @dev set main character\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    /// @dev returns the current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0990516fee2a74c593031370c0fa2c6e96bcda558e0a2b5286a507a099c8dadf\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/AltYieldYakAVAXStrategy2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./YieldYakAVAXStrategy2.sol\\\";\\n\\ncontract AltYieldYakAVAXStrategy2 is YieldYakAVAXStrategy2 {\\n    constructor(address _wrappedNative, address _roles)\\n        YieldYakAVAXStrategy2(_wrappedNative, _roles)\\n    {}\\n}\\n\",\"keccak256\":\"0xee7b562b32d01aea3971c8e91c69c23cb444202491009fae2804407843bfafd0\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/Strategy2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../../interfaces/IStrategy.sol\\\";\\nimport \\\"../oracles/OracleAware.sol\\\";\\nimport \\\"../Tranche.sol\\\";\\nimport \\\"../roles/DependsOnStrategyRegistry.sol\\\";\\nimport \\\"../roles/CallsStableCoinMintBurn.sol\\\";\\nimport \\\"../roles/DependsOnTranche.sol\\\";\\nimport \\\"../roles/DependsOnFundTransferer.sol\\\";\\nimport \\\"../../interfaces/IFeeReporter.sol\\\";\\n\\n/// Base class for strategies with facilities to manage (deposit/withdraw)\\n/// collateral in yield bearing system as well as yield distribution\\nabstract contract Strategy2 is\\n    IStrategy,\\n    OracleAware,\\n    CallsStableCoinMintBurn,\\n    DependsOnStrategyRegistry,\\n    DependsOnTranche,\\n    DependsOnFundTransferer,\\n    TrancheIDAware,\\n    ReentrancyGuard,\\n    IFeeReporter\\n{\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bool public override isActive = true;\\n\\n    bytes32 public immutable override strategyName;\\n\\n    EnumerableSet.AddressSet internal _approvedTokens;\\n    EnumerableSet.AddressSet internal _disapprovedTokens;\\n    EnumerableSet.AddressSet internal _allTokensEver;\\n\\n    struct CollateralAccount {\\n        uint256 collateral;\\n        uint256 yieldCheckptIdx;\\n        address trancheToken;\\n    }\\n\\n    mapping(uint256 => CollateralAccount) public _accounts;\\n\\n    struct TokenMetadata {\\n        uint256[] yieldCheckpoints;\\n        uint256 totalCollateralThisPhase;\\n        uint256 totalCollateralNow;\\n        uint256 apfLastUpdated;\\n        uint256 apf;\\n    }\\n\\n    uint256 public apfSmoothingPer10k = 5000;\\n\\n    mapping(address => TokenMetadata) public tokenMetadata;\\n\\n    uint256 internal constant FP64 = 2**64;\\n\\n    constructor(bytes32 stratName) {\\n        strategyName = stratName;\\n    }\\n\\n    /// Run only if the strategy has not been deactivated\\n    modifier onlyActive() {\\n        require(isActive, \\\"Strategy is not active\\\");\\n        _;\\n    }\\n\\n    /// Allows tranche contracts to register new tranches\\n    function registerMintTranche(\\n        address minter,\\n        uint256 trancheId,\\n        address assetToken,\\n        uint256,\\n        uint256 assetAmount\\n    ) external override onlyActive nonReentrant {\\n        require(\\n            isFundTransferer(msg.sender) && tranche(trancheId) == msg.sender,\\n            \\\"Invalid tranche\\\"\\n        );\\n        _mintTranche(minter, trancheId, assetToken, assetAmount);\\n    }\\n\\n    /// Internals for minting or migrating a tranche\\n    function _mintTranche(\\n        address minter,\\n        uint256 trancheId,\\n        address assetToken,\\n        uint256 assetAmount\\n    ) internal {\\n        TokenMetadata storage meta = tokenMetadata[assetToken];\\n        _accounts[trancheId].yieldCheckptIdx = meta.yieldCheckpoints.length;\\n        _setAndCheckTrancheToken(trancheId, assetToken);\\n        _deposit(minter, trancheId, assetAmount, yieldCurrency(), minter);\\n    }\\n\\n    /// Register deposit to tranche on behalf of user (to be called by other contract)\\n    function registerDepositFor(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 amount,\\n        address yieldRecipient\\n    ) external virtual override onlyActive nonReentrant {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Not authorized to transfer user funds\\\"\\n        );\\n        _deposit(depositor, trancheId, amount, yieldCurrency(), yieldRecipient);\\n    }\\n\\n    /// Internal function to manage depositing\\n    function _deposit(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 amount,\\n        address yieldToken,\\n        address yieldRecipient\\n    ) internal virtual {\\n        address token = trancheToken(trancheId);\\n        _collectYield(trancheId, yieldToken, yieldRecipient);\\n\\n        amount = collectCollateral(depositor, token, amount);\\n        uint256 oldBalance = _accounts[trancheId].collateral;\\n        _accounts[trancheId].collateral = oldBalance + amount;\\n\\n        TokenMetadata storage meta = tokenMetadata[token];\\n        meta.totalCollateralNow += amount;\\n        _handleBalanceUpdate(trancheId, token, oldBalance + amount);\\n    }\\n\\n    /// Callback for strategy-specific logic\\n    function _handleBalanceUpdate(\\n        uint256 trancheId,\\n        address token,\\n        uint256 balance\\n    ) internal virtual {}\\n\\n    /// Withdraw tokens from tranche (only callable by fund transferer)\\n    function withdraw(\\n        uint256 trancheId,\\n        uint256 amount,\\n        address yieldToken,\\n        address recipient\\n    ) external virtual override onlyActive nonReentrant {\\n        require(isFundTransferer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        require(recipient != address(0), \\\"Don't send to zero address\\\");\\n\\n        _withdraw(trancheId, amount, yieldToken, recipient);\\n    }\\n\\n    /// Internal machinations of withdrawals and returning collateral\\n    function _withdraw(\\n        uint256 trancheId,\\n        uint256 amount,\\n        address yieldToken,\\n        address recipient\\n    ) internal virtual {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        address token = trancheToken(trancheId);\\n\\n        _collectYield(trancheId, yieldToken, recipient);\\n\\n        amount = min(amount, viewTargetCollateralAmount(trancheId));\\n        returnCollateral(recipient, token, amount);\\n\\n        account.collateral -= amount;\\n\\n        TokenMetadata storage meta = tokenMetadata[token];\\n        // compounding strategies must add any additional collateral to totalCollateralNow\\n        // in _collectYield, so we don't get an underflow here\\n        meta.totalCollateralNow -= amount;\\n\\n        if (meta.yieldCheckpoints.length > account.yieldCheckptIdx) {\\n            // this account is participating in the current distribution phase, remove it\\n            meta.totalCollateralThisPhase -= amount;\\n        }\\n        _handleBalanceUpdate(trancheId, token, account.collateral);\\n    }\\n\\n    /// Migrate contents of tranche to new strategy\\n    function migrateStrategy(\\n        uint256 trancheId,\\n        address targetStrategy,\\n        address yieldToken,\\n        address yieldRecipient\\n    )\\n        external\\n        virtual\\n        override\\n        onlyActive\\n        returns (\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(msg.sender == tranche(trancheId), \\\"Not authorized to migrate\\\");\\n\\n        address token = trancheToken(trancheId);\\n        uint256 targetAmount = viewTargetCollateralAmount(trancheId);\\n\\n        _collectYield(trancheId, yieldToken, yieldRecipient);\\n        uint256 subCollateral = returnCollateral(\\n            address(this),\\n            token,\\n            targetAmount\\n        );\\n        IERC20(token).safeIncreaseAllowance(targetStrategy, subCollateral);\\n        tokenMetadata[token].totalCollateralNow -= subCollateral;\\n        delete _accounts[trancheId];\\n\\n        return (token, 0, subCollateral);\\n    }\\n\\n    /// Accept migrated assets from another tranche\\n    function acceptMigration(\\n        uint256 trancheId,\\n        address sourceStrategy,\\n        address tokenContract,\\n        uint256,\\n        uint256 amount\\n    ) external virtual override nonReentrant {\\n        require(msg.sender == tranche(trancheId), \\\"Not authorized to migrate\\\");\\n        _mintTranche(sourceStrategy, trancheId, tokenContract, amount);\\n    }\\n\\n    /// Migrate all tranches managed to a new strategy, using strategy registry as\\n    /// go-between\\n    function migrateAllTo(address destination)\\n        external\\n        override\\n        onlyActive\\n        onlyOwnerExecDisabler\\n    {\\n        tallyHarvestBalance();\\n\\n        for (uint256 i; _allTokensEver.length() > i; i++) {\\n            address token = _allTokensEver.at(i);\\n\\n            uint256 totalAmount = _viewTVL(token);\\n            StrategyRegistry registry = strategyRegistry();\\n            returnCollateral(address(registry), token, totalAmount);\\n            IERC20(token).safeApprove(address(registry), 0);\\n            IERC20(token).safeApprove(address(registry), type(uint256).max);\\n\\n            registry.depositMigrationTokens(destination, token);\\n        }\\n        isActive = false;\\n    }\\n\\n    /// Account for harvested yield which has lapped up upon the shore of this\\n    /// contract's balance and convert it into yield for users, for all tokens\\n    function tallyHarvestBalance() internal virtual returns (uint256 balance) {}\\n\\n    function collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) external virtual override nonReentrant returns (uint256) {\\n        require(\\n            isFundTransferer(msg.sender) ||\\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\\n            \\\"Not authorized to collect yield\\\"\\n        );\\n\\n        return _collectYield(trancheId, currency, recipient);\\n    }\\n\\n    /// For a specific tranche, collect yield and view value and borrowable per 10k\\n    function collectYieldValueBorrowable(\\n        uint256 trancheId,\\n        address _yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        external\\n        override\\n        nonReentrant\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        )\\n    {\\n        require(\\n            isFundTransferer(msg.sender) ||\\n                Tranche(tranche(trancheId)).isAuthorized(msg.sender, trancheId),\\n            \\\"Not authorized to collect yield\\\"\\n        );\\n\\n        yield = _collectYield(trancheId, _yieldCurrency, recipient);\\n        (value, borrowablePer10k) = _getValueBorrowable(\\n            trancheToken(trancheId),\\n            viewTargetCollateralAmount(trancheId),\\n            valueCurrency\\n        );\\n    }\\n\\n    /// For a specific tranche, view its accrued yield, value and borrowable per 10k\\n    function viewYieldValueBorrowable(\\n        uint256 trancheId,\\n        address _yieldCurrency,\\n        address valueCurrency\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        )\\n    {\\n        yield = viewYield(trancheId, _yieldCurrency);\\n        (value, borrowablePer10k) = _viewValueBorrowable(\\n            trancheToken(trancheId),\\n            viewTargetCollateralAmount(trancheId),\\n            valueCurrency\\n        );\\n    }\\n\\n    /// View the value of a tranche\\n    function viewValue(uint256 trancheId, address valueCurrency)\\n        external\\n        view\\n        override\\n        returns (uint256 value)\\n    {\\n        (value, ) = _viewValueBorrowable(\\n            trancheToken(trancheId),\\n            viewTargetCollateralAmount(trancheId),\\n            valueCurrency\\n        );\\n    }\\n\\n    /// View value and borrowable per10k of tranche\\n    function viewValueBorrowable(uint256 trancheId, address valueCurrency)\\n        external\\n        view\\n        override\\n        returns (uint256 value, uint256 borrowable)\\n    {\\n        return\\n            _viewValueBorrowable(\\n                trancheToken(trancheId),\\n                viewTargetCollateralAmount(trancheId),\\n                valueCurrency\\n            );\\n    }\\n\\n    /// View borrowable per10k of tranche\\n    function viewBorrowable(uint256 trancheId)\\n        external\\n        view\\n        override\\n        returns (uint256 borrowablePer10k)\\n    {\\n        (, borrowablePer10k) = _viewValueBorrowable(\\n            trancheToken(trancheId),\\n            viewTargetCollateralAmount(trancheId),\\n            yieldCurrency()\\n        );\\n    }\\n\\n    /// Withdraw collateral from source account\\n    function collectCollateral(\\n        address source,\\n        address token,\\n        uint256 collateralAmount\\n    ) internal virtual returns (uint256 amount2Add);\\n\\n    /// Return collateral to user\\n    function returnCollateral(\\n        address recipient,\\n        address token,\\n        uint256 collateralAmount\\n    ) internal virtual returns (uint256 collteral2Subtract);\\n\\n    /// Returns the token associated with a tranche\\n    function trancheToken(uint256 trancheId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return _accounts[trancheId].trancheToken;\\n    }\\n\\n    /// Internal, sets the tranche token and checks that it's supported\\n    function _setAndCheckTrancheToken(uint256 trancheId, address token)\\n        internal\\n        virtual\\n    {\\n        require(_approvedTokens.contains(token), \\\"Not an approved token\\\");\\n        _accounts[trancheId].trancheToken = token;\\n    }\\n\\n    /// Is a token supported by this strategy?\\n    function approvedToken(address token) public view override returns (bool) {\\n        return _approvedTokens.contains(token);\\n    }\\n\\n    /// Internal, collect yield and disburse it to recipient\\n    function _collectYield(\\n        uint256 trancheId,\\n        address currency,\\n        address recipient\\n    ) internal virtual returns (uint256 yieldEarned);\\n\\n    /// Internal, view accrued yield for account\\n    function _viewYield(\\n        CollateralAccount storage account,\\n        TokenMetadata storage tokenMeta,\\n        address currency\\n    ) internal view returns (uint256) {\\n        require(currency == yieldCurrency(), \\\"Wrong yield currency\\\");\\n\\n        uint256[] storage checkPts = tokenMeta.yieldCheckpoints;\\n        if (checkPts.length > account.yieldCheckptIdx) {\\n            uint256 yieldDelta = checkPts[checkPts.length - 1] -\\n                checkPts[account.yieldCheckptIdx];\\n            return (account.collateral * yieldDelta) / FP64;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// View accrued yield for a tranche\\n    function viewYield(uint256 trancheId, address currency)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        return\\n            _viewYield(\\n                account,\\n                tokenMetadata[trancheToken(trancheId)],\\n                currency\\n            );\\n    }\\n\\n    /// The currency used to aggregate yield in this strategy (mintable)\\n    function yieldCurrency() public view virtual override returns (address) {\\n        return address(stableCoin());\\n    }\\n\\n    /// set up a token to be supported by this strategy\\n    function approveToken(address token, bytes calldata data)\\n        external\\n        virtual\\n        onlyOwnerExecActivator\\n    {\\n        _approveToken(token, data);\\n\\n        // Kick the oracle to update\\n        _getValue(token, 1e18, address(stableCoin()));\\n    }\\n\\n    /// Internals to approving token and informing the strategy registry\\n    function _approveToken(address token, bytes calldata) internal virtual {\\n        _approvedTokens.add(token);\\n        _disapprovedTokens.remove(token);\\n        _allTokensEver.add(token);\\n        tokenMetadata[token].apf = 10_000;\\n        tokenMetadata[token].apfLastUpdated = block.timestamp;\\n\\n        strategyRegistry().updateTokenCount(address(this));\\n    }\\n\\n    /// Give some token the stink-eye and tell it to never show its face again\\n    function disapproveToken(address token, bytes calldata)\\n        external\\n        virtual\\n        onlyOwnerExec\\n    {\\n        _approvedTokens.remove(token);\\n        _disapprovedTokens.add(token);\\n        strategyRegistry().updateTokenCount(address(this));\\n    }\\n\\n    /// Calculate collateral amount held by tranche (e.g. taking into account\\n    /// compounding)\\n    function viewTargetCollateralAmount(uint256 trancheId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        return account.collateral;\\n    }\\n\\n    /// The ID of the tranche token (relevant if not handling ERC20)\\n    function trancheTokenID(uint256) external pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// All the tokens this strategy has ever touched\\n    function viewAllTokensEver() external view returns (address[] memory) {\\n        return _allTokensEver.values();\\n    }\\n\\n    /// View all tokens currently supported by this strategy\\n    function viewAllApprovedTokens()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _approvedTokens.values();\\n    }\\n\\n    /// View all tokens currently supported by this strategy\\n    function viewAllDisapprovedTokens()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _disapprovedTokens.values();\\n    }\\n\\n    /// count the number of tokens this strategy currently supports\\n    function approvedTokensCount() external view override returns (uint256) {\\n        return _approvedTokens.length();\\n    }\\n\\n    /// count the number of tokens this strategy currently supports\\n    function disapprovedTokensCount() external view override returns (uint256) {\\n        return _disapprovedTokens.length();\\n    }\\n\\n    /// View metadata for a token\\n    function viewStrategyMetadata(address token)\\n        public\\n        view\\n        override\\n        returns (IStrategy.StrategyMetadata memory)\\n    {\\n        (uint256 value, uint256 borrowablePer10k) = _viewValueBorrowable(\\n            token,\\n            1 ether,\\n            address(stableCoin())\\n        );\\n\\n        return\\n            IStrategy.StrategyMetadata({\\n                strategy: address(this),\\n                token: token,\\n                APF: viewAPF(token),\\n                totalCollateral: tokenMetadata[token].totalCollateralNow,\\n                borrowablePer10k: borrowablePer10k,\\n                valuePer1e18: value,\\n                strategyName: strategyName,\\n                tvl: _viewTVL(token),\\n                harvestBalance2Tally: viewHarvestBalance2Tally(token),\\n                yieldType: yieldType(),\\n                stabilityFee: stabilityFeePer10k(token),\\n                underlyingStrategy: viewUnderlyingStrategy(token)\\n            });\\n    }\\n\\n    /// view metadata for all tokens in an array\\n    function viewAllStrategyMetadata()\\n        external\\n        view\\n        override\\n        returns (IStrategy.StrategyMetadata[] memory)\\n    {\\n        uint256 tokenCount = _approvedTokens.length();\\n        IStrategy.StrategyMetadata[]\\n            memory result = new IStrategy.StrategyMetadata[](tokenCount);\\n        for (uint256 i; tokenCount > i; i++) {\\n            result[i] = viewStrategyMetadata(_approvedTokens.at(i));\\n        }\\n        return result;\\n    }\\n\\n    // view metadata for all tokens that have been disapproved\\n    function viewAllDisapprovedTokenStrategyMetadata()\\n        external\\n        view\\n        override\\n        returns (IStrategy.StrategyMetadata[] memory)\\n    {\\n        uint256 tokenCount = _disapprovedTokens.length();\\n        IStrategy.StrategyMetadata[]\\n            memory result = new IStrategy.StrategyMetadata[](tokenCount);\\n        for (uint256 i; tokenCount > i; i++) {\\n            result[i] = viewStrategyMetadata(_disapprovedTokens.at(i));\\n        }\\n        return result;\\n    }\\n\\n    /// Annual percentage factor, APR = APF - 100%\\n    function viewAPF(address token)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return tokenMetadata[token].apf;\\n    }\\n\\n    /// Miniumum of two numbes\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// View TVL in a token\\n    function _viewTVL(address token) public view virtual returns (uint256) {\\n        return tokenMetadata[token].totalCollateralNow;\\n    }\\n\\n    /// View Stability fee if any\\n    function stabilityFeePer10k(address) public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// Internal, update APF number\\n    function _updateAPF(\\n        address token,\\n        uint256 addedBalance,\\n        uint256 basisValue\\n    ) internal {\\n        TokenMetadata storage tokenMeta = tokenMetadata[token];\\n        if (addedBalance > 0 && tokenMeta.apfLastUpdated < block.timestamp) {\\n            uint256 lastUpdated = tokenMeta.apfLastUpdated;\\n            uint256 timeDelta = lastUpdated > 0\\n                ? block.timestamp - lastUpdated\\n                : 1 weeks;\\n\\n            uint256 newRate = ((addedBalance + basisValue) *\\n                10_000 *\\n                (365 days)) /\\n                basisValue /\\n                timeDelta;\\n\\n            uint256 smoothing = lastUpdated > 0 ? apfSmoothingPer10k : 0;\\n            tokenMeta.apf =\\n                (tokenMeta.apf * smoothing) /\\n                10_000 +\\n                (newRate * (10_000 - smoothing)) /\\n                10_000;\\n            tokenMeta.apfLastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    /// Since return rates vary, we smooth\\n    function setApfSmoothingPer10k(uint256 smoothing) external onlyOwnerExec {\\n        apfSmoothingPer10k = smoothing;\\n        emit ParameterUpdated(\\\"apf smoothing\\\", smoothing);\\n    }\\n\\n    /// View outstanding yield that needs to be distributed to accounts of an asset\\n    /// if any\\n    function viewHarvestBalance2Tally(address)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return 0;\\n    }\\n\\n    /// Returns whether the strategy is compounding repaying or no yield\\n    function yieldType() public view virtual override returns (YieldType);\\n\\n    /// In an emergency, withdraw tokens from yield generator\\n    function rescueCollateral(\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external onlyOwnerExec {\\n        require(recipient != address(0), \\\"Don't send to zero address\\\");\\n        returnCollateral(recipient, token, amount);\\n    }\\n\\n    /// In an emergency, withdraw any tokens stranded in this contract's balance\\n    function rescueStrandedTokens(\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external onlyOwnerExec {\\n        require(recipient != address(0), \\\"Don't send to zero address\\\");\\n        IERC20(token).safeTransfer(recipient, amount);\\n    }\\n\\n    /// Rescue any stranded native currency\\n    function rescueNative(uint256 amount, address recipient)\\n        external\\n        onlyOwnerExec\\n    {\\n        require(recipient != address(0), \\\"Don't send to zero address\\\");\\n        payable(recipient).transfer(amount);\\n    }\\n\\n    /// Accept native deposits\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    /// View estimated harvestable amount in source strategy\\n    function viewSourceHarvestable(address)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return 0;\\n    }\\n\\n    /// View estimated harvestable amount\\n    function viewEstimatedHarvestable(address token)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return viewHarvestBalance2Tally(token) + viewSourceHarvestable(token);\\n    }\\n\\n    // View the underlying yield strategy (if any)\\n    function viewUnderlyingStrategy(address token)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address);\\n}\\n\",\"keccak256\":\"0xc6d8853871c26099dfedc57649a4987421138688cdd6797050034e00f246da17\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/YieldYakAVAXStrategy2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./YieldYakStrategy2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../interfaces/IWETH.sol\\\";\\n\\ncontract YieldYakAVAXStrategy2 is YieldYakStrategy2 {\\n    using SafeERC20 for IERC20;\\n\\n    IWETH public immutable wrappedNative;\\n\\n    constructor(address _wrappedNative, address _roles)\\n        YieldYakStrategy2(_roles)\\n    {\\n        wrappedNative = IWETH(_wrappedNative);\\n    }\\n\\n    /// Withdraw from user account and deposit into yieldyak strategy\\n    function collectCollateral(\\n        address source,\\n        address token,\\n        uint256 collateralAmount\\n    ) internal override returns (uint256) {\\n        require(token == address(wrappedNative), \\\"Only for WAVAX\\\");\\n        IERC20(token).safeTransferFrom(source, address(this), collateralAmount);\\n        wrappedNative.withdraw(collateralAmount);\\n\\n        address yS = yakStrategy[token];\\n        uint256 balanceBefore = IERC20(yS).balanceOf(address(this));\\n        IYakStrategy(yS).deposit{value: collateralAmount}();\\n\\n        return\\n            IYakStrategy(yS).getDepositTokensForShares(\\n                IERC20(yS).balanceOf(address(this)) - balanceBefore\\n            );\\n    }\\n\\n    /// Withdraw from yy strategy and return to user\\n    function returnCollateral(\\n        address recipient,\\n        address token,\\n        uint256 targetAmount\\n    ) internal override returns (uint256) {\\n        require(recipient != address(0), \\\"Don't send to zero address\\\");\\n        require(token == address(wrappedNative), \\\"Only for WAVAX\\\");\\n\\n        address yS = yakStrategy[token];\\n        uint256 receiptAmount = IYakStrategy(yS).getSharesForDepositTokens(\\n            targetAmount\\n        );\\n\\n        uint256 balanceBefore = address(this).balance;\\n        IYakStrategy(yS).withdraw(receiptAmount);\\n        uint256 balanceDelta = address(this).balance - balanceBefore;\\n\\n        wrappedNative.deposit{value: balanceDelta}();\\n\\n        IERC20(token).safeTransfer(recipient, balanceDelta);\\n\\n        return balanceDelta;\\n    }\\n\\n    /// Internal, initialize a token\\n    function _approveToken(address token, bytes calldata data)\\n        internal\\n        override\\n    {\\n        require(token == address(wrappedNative), \\\"Only for WAVAX\\\");\\n        changeUnderlyingStrat(token, abi.decode(data, (address)));\\n        Strategy2._approveToken(token, data);\\n    }\\n\\n    /// Set the yy strategy for a token\\n    function setYakStrategy(address token, address strategy)\\n        external\\n        override\\n        onlyOwnerExec\\n    {\\n        changeUnderlyingStrat(token, strategy);\\n    }\\n}\\n\",\"keccak256\":\"0xd65905daeb599a9166d5586fee2a5ef084c48a4fe9ad7fc11a460e0a3ad2901b\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/YieldYakStrategy2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Strategy2.sol\\\";\\n\\nimport \\\"../../interfaces/IYakStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../roles/DependsOnFeeRecipient.sol\\\";\\n\\n/// Compounding strategy using yieldyak\\ncontract YieldYakStrategy2 is Strategy2, DependsOnFeeRecipient {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(address => address) public yakStrategy;\\n    mapping(uint256 => uint256) public depositedMultiple;\\n    mapping(address => uint256) public feeMultiple;\\n    mapping(address => uint256) public feeBase;\\n    mapping(address => uint256) public startingTokensPerShare;\\n    uint256 public withdrawnFees;\\n\\n    uint256 feePer10k = 1000;\\n\\n    constructor(address _roles)\\n        Strategy2(\\\"YieldYak compounding\\\")\\n        TrancheIDAware(_roles)\\n    {}\\n\\n    /// Withdraw from user account and deposit into yieldyak strategy\\n    function collectCollateral(\\n        address source,\\n        address token,\\n        uint256 collateralAmount\\n    ) internal virtual override returns (uint256) {\\n        IERC20(token).safeTransferFrom(source, address(this), collateralAmount);\\n\\n        address yS = yakStrategy[token];\\n        IERC20(token).safeIncreaseAllowance(yS, collateralAmount);\\n        uint256 balanceBefore = IERC20(yS).balanceOf(address(this));\\n        IYakStrategy(yS).deposit(collateralAmount);\\n\\n        return\\n            IYakStrategy(yS).getDepositTokensForShares(\\n                IERC20(yS).balanceOf(address(this)) - balanceBefore\\n            );\\n    }\\n\\n    /// Withdraw from yy strategy and return to user\\n    function returnCollateral(\\n        address recipient,\\n        address token,\\n        uint256 targetAmount\\n    ) internal virtual override returns (uint256) {\\n        require(recipient != address(0), \\\"Don't send to zero address\\\");\\n\\n        address yS = yakStrategy[token];\\n        uint256 receiptAmount = IYakStrategy(yS).getSharesForDepositTokens(\\n            targetAmount\\n        );\\n\\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\\n        IYakStrategy(yS).withdraw(receiptAmount);\\n        uint256 balanceDelta = IERC20(token).balanceOf(address(this)) -\\n            balanceBefore;\\n\\n        IERC20(token).safeTransfer(recipient, balanceDelta);\\n\\n        return balanceDelta;\\n    }\\n\\n    /// View collateral owned by tranche, taking into account compounding and fee\\n    function viewTargetCollateralAmount(uint256 trancheId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        uint256 originalAmount = account.collateral;\\n\\n        uint256 feeFactor = 10_000 - feePer10k;\\n\\n        uint256 current = currentWithYield(\\n            account.trancheToken,\\n            account.collateral,\\n            depositedMultiple[trancheId]\\n        );\\n\\n        if (current > originalAmount) {\\n            return\\n                originalAmount +\\n                (current * feeFactor) /\\n                10_000 -\\n                (originalAmount * feeFactor) /\\n                10_000;\\n        } else {\\n            return current;\\n        }\\n    }\\n\\n    /// Set the yy strategy for a token\\n    function setYakStrategy(address token, address strategy)\\n        external\\n        virtual\\n        onlyOwnerExec\\n    {\\n        changeUnderlyingStrat(token, strategy);\\n    }\\n\\n    /// Check whether a token is approved and encode params\\n    function checkApprovedAndEncode(address token, address strategy)\\n        public\\n        view\\n        returns (bool, bytes memory)\\n    {\\n        return (approvedToken(token), abi.encode(strategy));\\n    }\\n\\n    /// Internal, initialize a token\\n    function _approveToken(address token, bytes calldata data)\\n        internal\\n        virtual\\n        override\\n    {\\n        address newStrat = abi.decode(data, (address));\\n        require(\\n            IYakStrategy(newStrat).depositToken() == token,\\n            \\\"Provided yak strategy does not take token as deposit\\\"\\n        );\\n        changeUnderlyingStrat(token, newStrat);\\n\\n        super._approveToken(token, data);\\n    }\\n\\n    /// Internal, applies compounding to the tranche balance, minus fees\\n    function _collectYield(\\n        uint256 trancheId,\\n        address,\\n        address\\n    ) internal override returns (uint256) {\\n        CollateralAccount storage account = _accounts[trancheId];\\n        if (account.collateral > 0) {\\n            address token = account.trancheToken;\\n            TokenMetadata storage tokenMeta = tokenMetadata[token];\\n\\n            uint256 newAmount = viewTargetCollateralAmount(trancheId);\\n            uint256 oldAmount = account.collateral;\\n\\n            uint256 current = currentWithYield(\\n                token,\\n                oldAmount,\\n                depositedMultiple[trancheId]\\n            );\\n            \\n            uint256 fees = current > newAmount ? current - newAmount : 0;\\n            feeBase[token] =\\n                fees +\\n                currentWithYield(token, feeBase[token], feeMultiple[token]);\\n\\n            uint256 m = currentMultiple(token);\\n            feeMultiple[token] = m;\\n            depositedMultiple[trancheId] = m;\\n\\n            // prevent underflow on withdrawals\\n            tokenMeta.totalCollateralNow =\\n                tokenMeta.totalCollateralNow +\\n                newAmount -\\n                oldAmount;\\n\\n            account.collateral = newAmount;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// Set deposited shares -- the counterweight to _collectYield\\n    function _handleBalanceUpdate(\\n        uint256 trancheId,\\n        address token,\\n        uint256\\n    ) internal override {\\n        depositedMultiple[trancheId] = currentMultiple(token);\\n    }\\n\\n    /// TVL per token\\n    function _viewTVL(address token) public view override returns (uint256) {\\n        address strat = yakStrategy[token];\\n        return\\n            IYakStrategy(strat).getDepositTokensForShares(\\n                IERC20(strat).balanceOf(address(this))\\n            );\\n    }\\n\\n    /// compounding\\n    function yieldType() public pure override returns (IStrategy.YieldType) {\\n        return IStrategy.YieldType.COMPOUNDING;\\n    }\\n\\n    /// Call reinvest\\n    function harvestPartially(address token) external override nonReentrant {\\n        IYakStrategy(yakStrategy[token]).reinvest();\\n    }\\n\\n    /// All fees including currently pending and already withdrawn\\n    function viewAllFeesEver()\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        for (uint256 i; _allTokensEver.length() > i; i++) {\\n            address token = _allTokensEver.at(i);\\n            balance += _viewValue(\\n                token,\\n                currentWithYield(token, feeBase[token], feeMultiple[token]),\\n                yieldCurrency()\\n            );\\n        }\\n\\n        balance += withdrawnFees;\\n    }\\n\\n    /// Withdraw fees for one token\\n    function withdrawFees(address token) public {\\n        uint256 amount = currentWithYield(\\n            token,\\n            feeBase[token],\\n            feeMultiple[token]\\n        );\\n\\n        returnCollateral(feeRecipient(), token, amount);\\n        withdrawnFees += _getValue(token, amount, yieldCurrency());\\n        feeBase[token] = 0;\\n        feeMultiple[token] = currentMultiple(token);\\n    }\\n\\n    /// Withdraw all acrrued fees\\n    function withdrawAllFees() external {\\n        for (uint256 i; _allTokensEver.length() > i; i++) {\\n            address token = _allTokensEver.at(i);\\n            withdrawFees(token);\\n        }\\n    }\\n\\n    /// View amount of yield that yak strategy could reinvest\\n    function viewSourceHarvestable(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address strat = yakStrategy[token];\\n        uint256 reinvestAmount = IYakStrategy(strat).estimateReinvestReward();\\n        uint256 scaled = (IERC20(strat).balanceOf(address(this)) *\\n            reinvestAmount) / IERC20(strat).totalSupply();\\n        return _viewValue(token, scaled, yieldCurrency());\\n    }\\n\\n    // View the underlying yield strategy (if any)\\n    function viewUnderlyingStrategy(address token)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return yakStrategy[token];\\n    }\\n\\n    function depositedShares(uint256 trancheId) public view returns (uint256) {}\\n\\n    function currentMultiple(address token) public view returns (uint256) {\\n        return\\n            (1e18 *\\n                IYakStrategy(yakStrategy[token]).getDepositTokensForShares(\\n                    1e18\\n                )) / startingTokensPerShare[token];\\n    }\\n\\n    function currentWithYield(\\n        address token,\\n        uint256 collateral,\\n        uint256 multipleWhenDeposited\\n    ) internal view returns (uint256) {\\n        return (currentMultiple(token) * collateral) / multipleWhenDeposited;\\n    }\\n\\n    function changeUnderlyingStrat(address token, address newStrat) internal {\\n        address current = yakStrategy[token];\\n        if (current != address(0)) {\\n            uint256 balanceBefore = IERC20(token).balanceOf(address(this));\\n            IYakStrategy(current).withdraw(\\n                IERC20(current).balanceOf(address(this))\\n            );\\n            uint256 balanceDelta = IERC20(token).balanceOf(address(this)) -\\n                balanceBefore;\\n\\n            IYakStrategy(newStrat).deposit(balanceDelta);\\n\\n            startingTokensPerShare[token] =\\n                (IYakStrategy(newStrat).getDepositTokensForShares(1e18) *\\n                    startingTokensPerShare[token]) /\\n                IYakStrategy(current).getDepositTokensForShares(1e18);\\n        } else {\\n            yakStrategy[token] = newStrat;\\n            startingTokensPerShare[token] = IYakStrategy(newStrat)\\n                .getDepositTokensForShares(1e18);\\n            feeMultiple[token] = startingTokensPerShare[token];\\n        }\\n\\n        emit SubjectUpdated(\\\"yak strategy\\\", token);\\n    }\\n\\n    function setFeePer10k(uint256 fee) external onlyOwnerExec {\\n        require(10_000 >= fee, \\\"Fee too high\\\");\\n        feePer10k = fee;\\n    }\\n}\\n\",\"keccak256\":\"0x28a05fea4823ada0a7470155e2191968a3d96b5781dd3bf7398ebd9b5fc1e2c0\",\"license\":\"BUSL-1.1\"},\"interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IAsset {\\n    function withdraw(\\n        uint256 trancheId,\\n        uint256 tokenAmount,\\n        address yieldToken,\\n        address recipient\\n    ) external;\\n\\n    function migrateStrategy(\\n        uint256 trancheId,\\n        address targetStrategy,\\n        address yieldToken,\\n        address yieldRecipient\\n    )\\n        external\\n        returns (\\n            address token,\\n            uint256 tokenId,\\n            uint256 targetAmount\\n        );\\n\\n    function collectYield(\\n        uint256 tokenId,\\n        address currency,\\n        address recipient\\n    ) external returns (uint256);\\n\\n    function viewYield(uint256 tokenId, address currency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function viewBorrowable(uint256 tokenId) external view returns (uint256);\\n\\n    function collectYieldValueBorrowable(\\n        uint256 tokenId,\\n        address yieldCurrency,\\n        address valueCurrency,\\n        address recipient\\n    )\\n        external\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        );\\n\\n    function viewYieldValueBorrowable(\\n        uint256 tokenId,\\n        address yieldCurrency,\\n        address valueCurrency\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 yield,\\n            uint256 value,\\n            uint256 borrowablePer10k\\n        );\\n}\\n\",\"keccak256\":\"0x30cf95dc4e446f8795a444f3fcf7afa930bd29c3328a9f47b371d100f0ca6f14\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IFeeReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IFeeReporter {\\n    function viewAllFeesEver() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf4383ba84fe6fd76c743ef3083de5bf0a822ae8bd26228850aef3c2084ca62ff\",\"license\":\"BUSL-1.1\"},\"interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function viewAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256);\\n\\n    function getAmountInPeg(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256);\\n\\n    function viewPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external view returns (uint256, uint256);\\n\\n    function getPegAmountAndBorrowable(\\n        address token,\\n        uint256 inAmount,\\n        address pegCurrency\\n    ) external returns (uint256, uint256);\\n\\n    function setOracleParams(\\n        address token,\\n        address pegCurrency,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// TODO: compatible with NFTs\\n\",\"keccak256\":\"0x6ef05e6a5a8e53c294f12218d9f1f3720fe443576f2a576a7342402d5648fe01\",\"license\":\"BUSL-1.1\"},\"interfaces/IProxyOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// TODO naming of these different proxy functions\\n\\ninterface IProxyOwnership {\\n    function containedIn(uint256 tokenId)\\n        external\\n        view\\n        returns (address containerAddress, uint256 containerId);\\n\\n    function isAuthorized(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isViable(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaadb532483d1abca0ae2c47a496ad810e510119a64db56b4adb2d619ebd14d7c\",\"license\":\"BUSL-1.1\"},\"interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IStrategy is IAsset {\\n    enum YieldType {\\n        REPAYING,\\n        COMPOUNDING,\\n        NOYIELD\\n    }\\n\\n    struct StrategyMetadata {\\n        address strategy;\\n        address token;\\n        uint256 APF;\\n        uint256 totalCollateral;\\n        uint256 borrowablePer10k;\\n        uint256 valuePer1e18;\\n        bytes32 strategyName;\\n        uint256 tvl;\\n        uint256 harvestBalance2Tally;\\n        YieldType yieldType;\\n        uint256 stabilityFee;\\n        address underlyingStrategy;\\n    }\\n\\n    function acceptMigration(\\n        uint256 trancheId,\\n        address sourceStrategy,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function registerMintTranche(\\n        address minter,\\n        uint256 trancheId,\\n        address assetToken,\\n        uint256 assetTokenId,\\n        uint256 assetAmount\\n    ) external;\\n\\n    function registerDepositFor(\\n        address depositor,\\n        uint256 trancheId,\\n        uint256 amount,\\n        address yieldRecipient\\n    ) external;\\n\\n    function strategyName() external view returns (bytes32);\\n\\n    function isActive() external returns (bool);\\n\\n    function migrateAllTo(address destination) external;\\n\\n    function trancheToken(uint256 trancheId)\\n        external\\n        view\\n        returns (address token);\\n\\n    function trancheTokenID(uint256 trancheId)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    function viewTargetCollateralAmount(uint256 trancheId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approvedToken(address token) external view returns (bool);\\n\\n    function viewAllApprovedTokens() external view returns (address[] memory);\\n\\n    function approvedTokensCount() external view returns (uint256);\\n\\n    function viewAllDisapprovedTokens()\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function disapprovedTokensCount() external view returns (uint256);\\n\\n    function viewStrategyMetadata(address token)\\n        external\\n        view\\n        returns (StrategyMetadata memory);\\n\\n    function viewAllStrategyMetadata()\\n        external\\n        view\\n        returns (StrategyMetadata[] memory);\\n\\n    function viewAllDisapprovedTokenStrategyMetadata()\\n        external\\n        view\\n        returns (StrategyMetadata[] memory);\\n\\n    function viewAPF(address token) external view returns (uint256);\\n\\n    function viewValueBorrowable(uint256 trancheId, address valueCurrency)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function yieldType() external view returns (YieldType);\\n\\n    function harvestPartially(address token) external;\\n\\n    function viewValue(uint256 tokenId, address currency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function yieldCurrency() external view returns (address);\\n\\n    // View estimated harvestable amount\\n    function viewEstimatedHarvestable(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // View the underlying yield strategy (if any)\\n    function viewUnderlyingStrategy(address token)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x466b21e0e4dffee598b429e533a4cec6d7514c8491c56868402e4c5664ac47c5\",\"license\":\"BUSL-1.1\"},\"interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\npragma solidity ^0.8.0;\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x3241bbccd1c11cffc9673939e0be9b5e8e1c019b86dc87f18b146b5889a1a2e2\",\"license\":\"BUSL-1.1\"},\"interfaces/IYakStrategy.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IYakStrategy {\\n    function depositToken() external view returns (address);\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256);\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() external view returns (uint256);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external view returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(\\n        uint256 minReturnAmountAccepted,\\n        bool disableDeposits\\n    ) external;\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x1ebe20303bc4f378e5913b42ab645bfa41b42c58ce1b66f70efc7ae428dff9dc\"}},\"version\":1}",
  "bytecode": "0x6101006040526009805460ff191660011790556113886011556103e86019553480156200002b57600080fd5b50604051620055ab380380620055ab8339810160408190526200004e9162000330565b8181807f5969656c6459616b20636f6d706f756e64696e6700000000000000000000000081806001600160a01b038116620000da5760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b0319166080526002805460018082018355606a6000805160206200558b8339815191529283015560058054808301825560047f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db09182018190558554808501875560669086015582548085019093559101849055835480830185556068908401556003805480840182557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b908101829055815480850190925501829055835491820184556000939093526069910181905560405163b4ed0b6d60e01b8152918201526001600160a01b0382169063b4ed0b6d9060240160206040518083038186803b158015620001f257600080fd5b505afa15801562000207573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022d91906200030c565b6001600160a01b031663fae794e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156200026657600080fd5b505afa1580156200027b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a1919062000367565b60a052506001600881905560c09190915260028054918201815560005260676000805160206200558b83398151915290910155505060601b6001600160601b03191660e05250620003809050565b80516001600160a01b03811681146200030757600080fd5b919050565b6000602082840312156200031e578081fd5b6200032982620002ef565b9392505050565b6000806040838503121562000343578081fd5b6200034e83620002ef565b91506200035e60208401620002ef565b90509250929050565b60006020828403121562000379578081fd5b5051919050565b60805160601c60a05160c05160e05160601c6151776200041460003960008181610d1e01528181612e9801528181612fe4015281816131ef0152818161435a01526143d4015260008181610be901526112c40152600061241c0152600081816106640152818161103e0152818161197a01528181612d6e01528181612e01015281816131640152613c9801526151776000f3fe6080604052600436106103665760003560e01c806301c7b9f81461036f5780630581f3b5146103a257806306b8ce99146103c2578063071060a6146103d75780630a3017d9146103f75780630b504430146104175780630ccc5bd6146104445780630d74962814610464578063110acb2314610479578063164e68de146104a657806316a6b54a146104c657806318af4c9e146104e65780631dc3a759146105065780631f7ea8811461052757806321fa0f1f1461054757806322f3e2d4146105695780632642b6061461059357806326473a8f146105e157806328f3fc73146105fc578063296b12281461061c578063392f5f64146106525780633a3db435146106865780633ace96ec146106a6578063447d52ba146106c6578063459ba127146106e657806349d4f22e146107065780634a7a7f41146107265780634d578359146107485780634d9d01b2146107765780634df87c091461078b5780636caa9c11146107ab5780636fecdf24146107cb57806371b3177a146108305780637268d1c0146108505780637a1a04df146108705780637b2c9279146108ab5780637dad209b146108c05780638496e891146108d557806389f117b3146109105780639470505f146105e157806395494bf5146105065780639b0f09ae146109305780639dc3a9f51461094c5780639fffe06414610979578063a4d77f9014610999578063a50233c9146109ce578063a51c8fab146109ee578063abcbc4fc14610a10578063ad89b79414610a30578063aeb38d8b14610a45578063af236af414610a65578063b06ea8f014610a7a578063b23d66c214610a90578063b832799314610ad5578063bf184ea414610af5578063c5c72dc314610b15578063cfbc531f14610b35578063d0d9ab5914610b4b578063d241c9c014610b60578063d9cb512c14610b80578063dc94cb7d14610b95578063e10ac23a14610baa578063e173ad2514610bd7578063e22d284514610c0b578063e2e730f614610c74578063e8ea4fae14610c94578063e9c3f77d14610ca9578063ea7bade314610cdf578063eb6d3a1114610d0c578063f725ed1014610d40578063f8903fb714610d60578063f8d6a05d14610d80578063fa98a4ba14610da0578063fabee7db14610dc0578063fac82e8c14610de0578063fd80d0c314610e00578063fe65a5b414610e205761036d565b3661036d57005b005b34801561037b57600080fd5b5061038f61038a366004614af4565b610e40565b6040519081526020015b60405180910390f35b3480156103ae57600080fd5b5061038f6103bd3660046148af565b610e65565b3480156103ce57600080fd5b5061038f611017565b3480156103e357600080fd5b5061036d6103f2366004614ac4565b611028565b34801561040357600080fd5b5061038f6104123660046148af565b6110ee565b34801561042357600080fd5b5061038f6104323660046148af565b60176020526000908152604090205481565b34801561045057600080fd5b5061036d61045f3660046149c9565b61110c565b34801561047057600080fd5b5061038f611195565b34801561048557600080fd5b506104996104943660046148af565b611227565b6040516103999190615014565b3480156104b257600080fd5b5061036d6104c13660046148af565b611327565b3480156104d257600080fd5b5061038f6104e13660046148af565b611408565b3480156104f257600080fd5b5061036d610501366004614af4565b6114ca565b34801561051257600080fd5b5061038f610521366004614ac4565b50600090565b34801561053357600080fd5b5061036d61054236600461491f565b611574565b34801561055357600080fd5b5061055c61162c565b6040516103999190614de6565b34801561057557600080fd5b506009546105839060ff1681565b6040519015158152602001610399565b34801561059f57600080fd5b506105d46105ae3660046148e7565b60066020908152600092835260408084209091529082529020546001600160a01b031681565b6040516103999190614d2f565b3480156105ed57600080fd5b5061038f6105213660046148af565b34801561060857600080fd5b5061036d6106173660046148e7565b6116fe565b34801561062857600080fd5b506105d46106373660046148af565b6013602052600090815260409020546001600160a01b031681565b34801561065e57600080fd5b506105d47f000000000000000000000000000000000000000000000000000000000000000081565b34801561069257600080fd5b5061036d6106a1366004614ac4565b6117f1565b3480156106b257600080fd5b5061036d6106c136600461491f565b611898565b3480156106d257600080fd5b5061036d6106e1366004614af4565b611963565b3480156106f257600080fd5b5061036d610701366004614b95565b611a39565b34801561071257600080fd5b5061036d6107213660046149c9565b611ab2565b34801561073257600080fd5b5061073b611b35565b6040516103999190614e29565b34801561075457600080fd5b506107686107633660046148e7565b611b8d565b604051610399929190614e61565b34801561078257600080fd5b5061038f611bc5565b34801561079757600080fd5b506105836107a63660046148af565b611bd1565b3480156107b757600080fd5b5061038f6107c6366004614ac4565b611bde565b3480156107d757600080fd5b506108106107e63660046148af565b60126020526000908152604090206001810154600282015460038301546004909301549192909184565b604080519485526020850193909352918301526060820152608001610399565b34801561083c57600080fd5b5061036d61084b366004614bf1565b611bff565b34801561085c57600080fd5b5061038f61086b366004614ac4565b611cd8565b34801561087c57600080fd5b5061058361088b36600461499e565b600160209081526000928352604080842090915290825290205460ff1681565b3480156108b757600080fd5b506105d4611cfe565b3480156108cc57600080fd5b5061073b611d08565b3480156108e157600080fd5b506108f56108f0366004614b4e565b611d5e565b60408051938452602084019290925290820152606001610399565b34801561091c57600080fd5b5061036d61092b3660046148af565b611e79565b34801561093c57600080fd5b5060016040516103999190614e7c565b34801561095857600080fd5b5061038f6109673660046148af565b60156020526000908152604090205481565b34801561098557600080fd5b5061036d6109943660046148e7565b611f05565b3480156109a557600080fd5b506109b96109b4366004614af4565b611f58565b60408051928352602083019190915201610399565b3480156109da57600080fd5b5061036d6109e9366004614a5b565b611f81565b3480156109fa57600080fd5b50610a03612042565b6040516103999190614d99565b348015610a1c57600080fd5b5061038f610a2b366004614ac4565b61204e565b348015610a3c57600080fd5b5061055c61205e565b348015610a5157600080fd5b5061038f610a60366004614ac4565b612129565b348015610a7157600080fd5b5061036d612139565b348015610a8657600080fd5b5061038f60115481565b348015610a9c57600080fd5b50610ab0610aab366004614b4e565b61217b565b604080516001600160a01b039094168452602084019290925290820152606001610399565b348015610ae157600080fd5b5061036d610af0366004614a0a565b61228e565b348015610b0157600080fd5b5061038f610b10366004614ac4565b612347565b348015610b2157600080fd5b5061038f610b30366004614ac4565b612357565b348015610b4157600080fd5b5061038f60185481565b348015610b5757600080fd5b50610a03612408565b348015610b6c57600080fd5b506105d4610b7b366004614ac4565b612414565b348015610b8c57600080fd5b50610a0361250e565b348015610ba157600080fd5b5061073b61251a565b348015610bb657600080fd5b5061038f610bc53660046148af565b60166020526000908152604090205481565b348015610be357600080fd5b5061038f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c1757600080fd5b50610c50610c26366004614ac4565b6010602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b031690820152606001610399565b348015610c8057600080fd5b5061038f610c8f3660046148af565b612570565b348015610ca057600080fd5b5061073b612677565b348015610cb557600080fd5b506105d4610cc4366004614ac4565b6000602081905290815260409020546001600160a01b031681565b348015610ceb57600080fd5b5061038f610cfa366004614ac4565b60146020526000908152604090205481565b348015610d1857600080fd5b506105d47f000000000000000000000000000000000000000000000000000000000000000081565b348015610d4c57600080fd5b506105d4610d5b3660046148af565b6126cd565b348015610d6c57600080fd5b5061038f610d7b366004614b18565b6126eb565b348015610d8c57600080fd5b5061038f610d9b3660046148af565b6127de565b348015610dac57600080fd5b506108f5610dbb366004614b18565b6127f4565b348015610dcc57600080fd5b506105d4610ddb366004614ac4565b61282f565b348015610dec57600080fd5b5061036d610dfb3660046148af565b61284d565b348015610e0c57600080fd5b5061038f610e1b366004614af4565b612a08565b348015610e2c57600080fd5b5061036d610e3b366004614ac4565b612a4c565b6000610e5d610e4e8461282f565b610e5785612357565b84612adb565b509392505050565b6001600160a01b038082166000908152601360209081526040808320548151630173caf760e71b81529151939416928492849263b9e57b809260048083019392829003018186803b158015610eb957600080fd5b505afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190614adc565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2e57600080fd5b505afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f669190614adc565b6040516370a0823160e01b815283906001600160a01b038616906370a0823190610f94903090600401614d2f565b60206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190614adc565b610fee919061504f565b610ff8919061503b565b905061100c8582611007611cfe565b612c20565b93505050505b919050565b6000611023600c612d60565b905090565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561108857600080fd5b505afa15801561109c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c091906148cb565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b031660009081526012602052604090206004015490565b33611115612d6a565b6001600160a01b0316148061113957503361112e612dfd565b6001600160a01b0316145b61115e5760405162461bcd60e51b815260040161115590614e9d565b60405180910390fd5b6001600160a01b0381166111845760405162461bcd60e51b815260040161115590614f4a565b61118f818484612e6e565b50505050565b6000805b806111a4600e612d60565b11156112195760006111b7600e83613077565b6001600160a01b0381166000908152601660209081526040808320546015909252909120549192506111f99183916111f191839190613083565b611007611cfe565b6112039084615023565b9250508080611211906150b1565b915050611199565b506018546110239082615023565b61122f61481a565b60008061124c84670de0b6b3a76400006112476130a4565b612adb565b91509150604051806101800160405280306001600160a01b03168152602001856001600160a01b03168152602001611283866110ee565b815260200160126000876001600160a01b03166001600160a01b031681526020019081526020016000206002015481526020018281526020018381526020017f000000000000000000000000000000000000000000000000000000000000000081526020016112f186612570565b8152600060208201526040016001815260200160008152602001611314866126cd565b6001600160a01b03169052949350505050565b6001600160a01b0381166000908152601660209081526040808320546015909252822054611356918491613083565b905061139d611396606760009081526020527f682158d08466d11c566d5712d4396197fdd67e65be71d83c97ef719ec468867b546001600160a01b031690565b8383612e6e565b506113b082826113ab611cfe565b6130dc565b601860008282546113c19190615023565b90915550506001600160a01b0382166000908152601660205260408120556113e882611408565b6001600160a01b0390921660009081526015602052604090209190915550565b6001600160a01b03818116600090815260176020908152604080832054601390925280832054905163755c4d2d60e11b8152670de0b6b3a764000060048201529293919291169063eab89a5a9060240160206040518083038186803b15801561147057600080fd5b505afa158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190614adc565b6114ba90670de0b6b3a764000061504f565b6114c4919061503b565b92915050565b336114d3612d6a565b6001600160a01b031614806114f75750336114ec612dfd565b6001600160a01b0316145b6115135760405162461bcd60e51b815260040161115590614e9d565b6001600160a01b0381166115395760405162461bcd60e51b815260040161115590614f4a565b6040516001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561156f573d6000803e3d6000fd5b505050565b3361157d612d6a565b6001600160a01b031614806115a1575033611596612dfd565b6001600160a01b0316145b806115b057506115b03361314a565b61160c5760405162461bcd60e51b81526020600482015260396024820152600080516020615122833981519152604482015278391037b91030baba3437b934bd32b21030b1ba34bb30ba37b960391b6064820152608401611155565b6116178383836131ed565b61118f83670de0b6b3a76400006113ab6130a4565b6060600061163a600a612d60565b90506000816001600160401b0381111561166457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561169d57816020015b61168a61481a565b8152602001906001900390816116825790505b50905060005b808311156116f7576116b9610494600a83613077565b8282815181106116d957634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806116ef906150b1565b9150506116a3565b5091505090565b6001600160a01b038281166000908152600660209081526040808320858516845290915290205416156117ed5761173361325e565b6001600160a01b0316635e73a03483836040518363ffffffff1660e01b8152600401611760929190614d43565b60206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b091906148cb565b6001600160a01b0383811660009081526006602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b336117fa612d6a565b6001600160a01b0316148061181e575033611813612dfd565b6001600160a01b0316145b61183a5760405162461bcd60e51b815260040161115590614e9d565b601181905560408051818152600d818301526c61706620736d6f6f7468696e6760981b60608201526020810183905290517f3a64504f0bc0c335e2aecb78638a257e0351a3fe0370861fd54ee4190b9209339181900360800190a150565b336118a1612d6a565b6001600160a01b031614806118c55750336118ba612dfd565b6001600160a01b0316145b6118e15760405162461bcd60e51b815260040161115590614e9d565b6118ec600a84613296565b506118f8600c846132ab565b506119016132c0565b6001600160a01b03166311848c45306040518263ffffffff1660e01b815260040161192c9190614d2f565b600060405180830381600087803b15801561194657600080fd5b505af115801561195a573d6000803e3d6000fd5b50505050505050565b60405163f0723d9760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d97906119b19084908690600401614d5d565b60206040518083038186803b1580156119c957600080fd5b505afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a019190614aa4565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b60026008541415611a5c5760405162461bcd60e51b815260040161115590614f7e565b6002600855611a6a85612414565b6001600160a01b0316336001600160a01b031614611a9a5760405162461bcd60e51b815260040161115590614f17565b611aa6848685846132f8565b50506001600855505050565b33611abb612d6a565b6001600160a01b03161480611adf575033611ad4612dfd565b6001600160a01b0316145b611afb5760405162461bcd60e51b815260040161115590614e9d565b6001600160a01b038116611b215760405162461bcd60e51b815260040161115590614f4a565b61156f6001600160a01b0384168284613348565b60606003805480602002602001604051908101604052809291908181526020018280548015611b8357602002820191906000526020600020905b815481526020019060010190808311611b6f575b5050505050905090565b60006060611b9a84611bd1565b83604051602001611bab9190614d2f565b604051602081830303815290604052915091509250929050565b6000611023600a612d60565b60006114c4600a8361339e565b60058181548110611bee57600080fd5b600091825260209091200154905081565b60095460ff16611c215760405162461bcd60e51b815260040161115590614ee7565b60026008541415611c445760405162461bcd60e51b815260040161115590614f7e565b6002600855611c52336133b3565b611c9b5760405162461bcd60e51b815260206004820152601a6024820152794e6f7420617574686f72697a656420746f20776974686472617760301b6044820152606401611155565b6001600160a01b038116611cc15760405162461bcd60e51b815260040161115590614f4a565b611ccd848484846133dc565b505060016008555050565b6000611cf7611ce68361282f565b611cef84612357565b611247611cfe565b9392505050565b60006110236130a4565b60606004805480602002602001604051908101604052809291908181526020018280548015611b835760200282019190600052602060002090815481526020019060010190808311611b6f575050505050905090565b600080600060026008541415611d865760405162461bcd60e51b815260040161115590614f7e565b6002600855611d94336133b3565b80611e205750611da387612414565b6001600160a01b0316632972b0f033896040518363ffffffff1660e01b8152600401611dd0929190614d5d565b60206040518083038186803b158015611de857600080fd5b505afa158015611dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e209190614aa4565b611e3c5760405162461bcd60e51b815260040161115590614fdd565b611e478787866134a3565b9250611e64611e558861282f565b611e5e89612357565b876135e6565b60016008559398909750929550919350505050565b60026008541415611e9c5760405162461bcd60e51b815260040161115590614f7e565b60026008556001600160a01b03808216600090815260136020526040808220548151637edad01f60e11b8152915193169263fdb5a03e9260048084019391929182900301818387803b158015611ef157600080fd5b505af1158015611aa6573d6000803e3d6000fd5b33611f0e612d6a565b6001600160a01b03161480611f32575033611f27612dfd565b6001600160a01b0316145b611f4e5760405162461bcd60e51b815260040161115590614e9d565b6117ed8282613655565b600080611f76611f678561282f565b611f7086612357565b85612adb565b915091509250929050565b60095460ff16611fa35760405162461bcd60e51b815260040161115590614ee7565b60026008541415611fc65760405162461bcd60e51b815260040161115590614f7e565b6002600855611fd4336133b3565b61202e5760405162461bcd60e51b815260206004820152602560248201527f4e6f7420617574686f72697a656420746f207472616e7366657220757365722060448201526466756e647360d81b6064820152608401611155565b611ccd84848461203c611cfe565b85613b24565b6060611023600a613bc5565b60028181548110611bee57600080fd5b6060600061206c600c612d60565b90506000816001600160401b0381111561209657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156120cf57816020015b6120bc61481a565b8152602001906001900390816120b45790505b50905060005b808311156116f7576120eb610494600c83613077565b82828151811061210b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080612121906150b1565b9150506120d5565b60048181548110611bee57600080fd5b60005b80612147600e612d60565b111561217857600061215a600e83613077565b905061216581611327565b5080612170816150b1565b91505061213c565b50565b6009546000908190819060ff166121a45760405162461bcd60e51b815260040161115590614ee7565b6121ad87612414565b6001600160a01b0316336001600160a01b0316146121dd5760405162461bcd60e51b815260040161115590614f17565b60006121e88861282f565b905060006121f589612357565b90506122028988886134a3565b506000612210308484612e6e565b90506122266001600160a01b0384168a83613bd2565b6001600160a01b0383166000908152601260205260408120600201805483929061225190849061506e565b90915550506000998a52601060205260408a208a8155600181018b905560020180546001600160a01b031916905591999197509095505050505050565b60095460ff166122b05760405162461bcd60e51b815260040161115590614ee7565b600260085414156122d35760405162461bcd60e51b815260040161115590614f7e565b60026008556122e1336133b3565b80156122fd5750336122f285612414565b6001600160a01b0316145b61233b5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207472616e63686560881b6044820152606401611155565b611aa6858585846132f8565b60038181548110611bee57600080fd5b6000818152601060205260408120805460195483906123789061271061506e565b60028401548454600088815260146020526040812054939450926123a6926001600160a01b03169190613083565b9050828111156123fd576127106123bd838561504f565b6123c7919061503b565b6127106123d4848461504f565b6123de919061503b565b6123e89085615023565b6123f2919061506e565b945050505050611012565b935061101292505050565b6060611023600c613bc5565b6000806124417f0000000000000000000000000000000000000000000000000000000000000000846150cc565b6000818152600760205260409020549091506001600160a01b031680611cf757606960009081526020527f366a7b92acda364086cc991f618bf9f10b629ec0f7ae94543f96b691b69ec9925460405163043b4d2f60e51b8152600481018490526001600160a01b0390911690638769a5e09060240160206040518083038186803b1580156124ce57600080fd5b505afa1580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250691906148cb565b949350505050565b6060611023600e613bc5565b60606002805480602002602001604051908101604052809291908181526020018280548015611b835760200282019190600052602060002090815481526020019060010190808311611b6f575050505050905090565b6001600160a01b038082166000908152601360205260408082205490516370a0823160e01b815291921690819063eab89a5a9082906370a08231906125b9903090600401614d2f565b60206040518083038186803b1580156125d157600080fd5b505afa1580156125e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126099190614adc565b6040518263ffffffff1660e01b815260040161262791815260200190565b60206040518083038186803b15801561263f57600080fd5b505afa158015612653573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf79190614adc565b60606005805480602002602001604051908101604052809291908181526020018280548015611b835760200282019190600052602060002090815481526020019060010190808311611b6f575050505050905090565b6001600160a01b039081166000908152601360205260409020541690565b6000600260085414156127105760405162461bcd60e51b815260040161115590614f7e565b600260085561271e336133b3565b806127aa575061272d84612414565b6001600160a01b0316632972b0f033866040518363ffffffff1660e01b815260040161275a929190614d5d565b60206040518083038186803b15801561277257600080fd5b505afa158015612786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127aa9190614aa4565b6127c65760405162461bcd60e51b815260040161115590614fdd565b6127d18484846134a3565b6001600855949350505050565b60006127e982610e65565b6114c4906000615023565b60008060006128038686612a08565b92506128206128118761282f565b61281a88612357565b86612adb565b93979096509294509192505050565b6000908152601060205260409020600201546001600160a01b031690565b60095460ff1661286f5760405162461bcd60e51b815260040161115590614ee7565b33612878612d6a565b6001600160a01b0316148061289c575033612891612dfd565b6001600160a01b0316145b806128b65750336128ab613c7e565b6001600160a01b0316145b6129115760405162461bcd60e51b81526020600482015260386024820152600080516020615122833981519152604482015277391037b91030baba3437b934bd32b2103234b9b0b13632b960411b6064820152608401611155565b60005b8061291f600e612d60565b11156129fa576000612932600e83613077565b9050600061293f82612570565b9050600061294b6132c0565b9050612958818484612e6e565b5061296e6001600160a01b038416826000613ce2565b6129846001600160a01b03841682600019613ce2565b60405163269974d160e21b81526001600160a01b03821690639a65d344906129b29088908790600401614d43565b600060405180830381600087803b1580156129cc57600080fd5b505af11580156129e0573d6000803e3d6000fd5b5050505050505080806129f2906150b1565b915050612914565b50506009805460ff19169055565b600082815260106020526040812061250681601284612a268861282f565b6001600160a01b03166001600160a01b0316815260200190815260200160002085613df4565b33612a55612d6a565b6001600160a01b03161480612a79575033612a6e612dfd565b6001600160a01b0316145b612a955760405162461bcd60e51b815260040161115590614e9d565b806127101015612ad65760405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606401611155565b601955565b6001600160a01b0380841660009081526006602090815260408083208585168452909152812054909182911680612b9457612b1461325e565b6001600160a01b0316635e73a03487866040518363ffffffff1660e01b8152600401612b41929190614d43565b60206040518083038186803b158015612b5957600080fd5b505afa158015612b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9191906148cb565b90505b6040516313f3552960e21b81526001600160a01b03821690634fcd54a490612bc490899089908990600401614d76565b604080518083038186803b158015612bdb57600080fd5b505afa158015612bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c139190614bce565b9097909650945050505050565b6001600160a01b038084166000908152600660209081526040808320858516845290915281205490911680612cd757612c5761325e565b6001600160a01b0316635e73a03486856040518363ffffffff1660e01b8152600401612c84929190614d43565b60206040518083038186803b158015612c9c57600080fd5b505afa158015612cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd491906148cb565b90505b6040516323aaad6360e21b81526001600160a01b03821690638eaab58c90612d0790889088908890600401614d76565b60206040518083038186803b158015612d1f57600080fd5b505afa158015612d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d579190614adc565b95945050505050565b60006114c4825490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc557600080fd5b505afa158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102391906148cb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612e5a57600080fd5b505af1158015612dd9573d6000803e3d6000fd5b60006001600160a01b038416612e965760405162461bcd60e51b815260040161115590614f4a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614612ee75760405162461bcd60e51b815260040161115590614fb5565b6001600160a01b03838116600090815260136020526040808220549051636ec6726b60e11b815260048101869052921691829063dd8ce4d69060240160206040518083038186803b158015612f3b57600080fd5b505afa158015612f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f739190614adc565b604051632e1a7d4d60e01b81526004810182905290915047906001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b158015612fba57600080fd5b505af1158015612fce573d6000803e3d6000fd5b5050505060008147612fe0919061506e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561303d57600080fd5b505af1158015613051573d6000803e3d6000fd5b5061306c935050506001600160a01b03891690508983613348565b979650505050505050565b6000611cf78383613f0e565b6000818361309086611408565b61309a919061504f565b612506919061503b565b606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b031690565b6000806130e98584613f46565b604051630576cbc360e41b81529091506001600160a01b0382169063576cbc309061311c90889088908890600401614d76565b602060405180830381600087803b15801561313657600080fd5b505af1158015612d33573d6000803e3d6000fd5b60405163f0723d9760e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d979061319d9085906103eb90600401614d5d565b60206040518083038186803b1580156131b557600080fd5b505afa1580156131c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190614aa4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461323e5760405162461bcd60e51b815260040161115590614fb5565b6132538361324e838501856148af565b613655565b61156f838383613ffa565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b6000611cf7836001600160a01b03841661404d565b6000611cf7836001600160a01b03841661416a565b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6001600160a01b03821660009081526012602090815260408083208054878552601090935292206001015561332d84846141b4565b61334185858461333b611cfe565b89613b24565b5050505050565b61156f8363a9059cbb60e01b8484604051602401613367929190614d5d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614234565b6000611cf7836001600160a01b038416614306565b6001600160a01b0316600090815260016020818152604080842092845291905290205460ff1690565b6000848152601060205260408120906133f48661282f565b90506134018685856134a3565b506134148561340f88612357565b61431e565b9450613421838287612e6e565b5084826000016000828254613436919061506e565b90915550506001600160a01b03811660009081526012602052604081206002810180549192889261346890849061506e565b9091555050600183015481541115613494578581600101600082825461348e919061506e565b90915550505b61195a87838560000154614336565b60008381526010602052604081208054156135db5760028101546001600160a01b03166000818152601260205260408120906134de88612357565b845460008a81526014602052604081205492935090916135019086908490613083565b9050600083821161351357600061351d565b61351d848361506e565b6001600160a01b03871660009081526016602090815260408083205460159092529091205491925061355191889190613083565b61355b9082615023565b6001600160a01b03871660009081526016602052604081209190915561358087611408565b6001600160a01b03881660009081526015602090815260408083208490558f835260149091529020819055600287015490915084906135c0908790615023565b6135ca919061506e565b600290960195909555505050835550505b506000949350505050565b60008060006135f58685613f46565b60405163442fd02b60e11b81529091506001600160a01b0382169063885fa0569061362890899089908990600401614d76565b6040805180830381600087803b15801561364157600080fd5b505af1158015612bef573d6000803e3d6000fd5b6001600160a01b038083166000908152601360205260409020541680156139fa576040516370a0823160e01b81526000906001600160a01b038516906370a08231906136a5903090600401614d2f565b60206040518083038186803b1580156136bd57600080fd5b505afa1580156136d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f59190614adc565b6040516370a0823160e01b81529091506001600160a01b03831690632e1a7d4d9082906370a082319061372c903090600401614d2f565b60206040518083038186803b15801561374457600080fd5b505afa158015613758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377c9190614adc565b6040518263ffffffff1660e01b815260040161379a91815260200190565b600060405180830381600087803b1580156137b457600080fd5b505af11580156137c8573d6000803e3d6000fd5b50505050600081856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016137fb9190614d2f565b60206040518083038186803b15801561381357600080fd5b505afa158015613827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384b9190614adc565b613855919061506e565b60405163b6b55f2560e01b8152600481018290529091506001600160a01b0385169063b6b55f2590602401600060405180830381600087803b15801561389a57600080fd5b505af11580156138ae573d6000803e3d6000fd5b505060405163755c4d2d60e11b8152670de0b6b3a764000060048201526001600160a01b038616925063eab89a5a915060240160206040518083038186803b1580156138f957600080fd5b505afa15801561390d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139319190614adc565b6001600160a01b038681166000908152601760205260409081902054905163755c4d2d60e11b8152670de0b6b3a76400006004820152909187169063eab89a5a9060240160206040518083038186803b15801561398d57600080fd5b505afa1580156139a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c59190614adc565b6139cf919061504f565b6139d9919061503b565b6001600160a01b03861660009081526017602052604090205550613ac29050565b6001600160a01b038381166000908152601360205260409081902080546001600160a01b03191692851692831790555163755c4d2d60e11b8152670de0b6b3a7640000600482015263eab89a5a9060240160206040518083038186803b158015613a6357600080fd5b505afa158015613a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9b9190614adc565b6001600160a01b038416600090815260176020908152604080832084905560159091529020555b60408051818152600c818301526b79616b20737472617465677960a01b60608201526001600160a01b038516602082015290517fbd64fae90eab1019a6c354538cfa598ad3d642c5b1bc8a8613bcb716723fa2d79181900360800190a1505050565b6000613b2f8561282f565b9050613b3c8584846134a3565b50613b48868286614356565b600086815260106020526040902054909450613b648582615023565b6000878152601060209081526040808320939093556001600160a01b03851682526012905290812060028101805491928892613ba1908490615023565b90915550613bbb90508784613bb68986615023565b614336565b5050505050505050565b60606000611cf783614626565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613c03929190614d43565b60206040518083038186803b158015613c1b57600080fd5b505afa158015613c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c539190614adc565b613c5d9190615023565b905061118f8463095ea7b360e01b8584604051602401613367929190614d5d565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b158015612dc557600080fd5b801580613d6a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90613d189030908690600401614d43565b60206040518083038186803b158015613d3057600080fd5b505afa158015613d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d689190614adc565b155b613dd55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401611155565b61156f8363095ea7b360e01b8484604051602401613367929190614d5d565b6000613dfe611cfe565b6001600160a01b0316826001600160a01b031614613e555760405162461bcd60e51b815260206004820152601460248201527357726f6e67207969656c642063757272656e637960601b6044820152606401611155565b6001840154835484911015613f0457600081866001015481548110613e8a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548260018480549050613ea7919061506e565b81548110613ec557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154613eda919061506e565b9050600160401b818760000154613ef1919061504f565b613efb919061503b565b92505050611cf7565b6000915050611cf7565b6000826000018281548110613f3357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6001600160a01b038083166000908152600660209081526040808320858516845290915290205416806114c457613f7b61325e565b6001600160a01b0316631757616884846040518363ffffffff1660e01b8152600401613fa8929190614d43565b602060405180830381600087803b158015613fc257600080fd5b505af1158015613fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf791906148cb565b614005600a846132ab565b50614011600c84613296565b5061401d600e846132ab565b506001600160a01b03831660009081526012602052604090206127106004820155426003909101556119016132c0565b6000818152600183016020526040812054801561416057600061407160018361506e565b85549091506000906140859060019061506e565b90508181146141065760008660000182815481106140b357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106140e457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061412557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506114c4565b60009150506114c4565b60006141768383614306565b6141ac575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556114c4565b5060006114c4565b6141bf600a8261339e565b6142035760405162461bcd60e51b81526020600482015260156024820152742737ba1030b71030b8383937bb32b2103a37b5b2b760591b6044820152606401611155565b60009182526010602052604090912060020180546001600160a01b0319166001600160a01b03909216919091179055565b6000614289826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146829092919063ffffffff16565b80519091501561156f57808060200190518101906142a79190614aa4565b61156f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611155565b60009081526001919091016020526040902054151590565b60008183111561432f5750806114c4565b50816114c4565b61433f82611408565b600093845260146020526040909320929092555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146143a95760405162461bcd60e51b815260040161115590614fb5565b6143be6001600160a01b038416853085614691565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561442057600080fd5b505af1158015614434573d6000803e3d6000fd5b505050506001600160a01b038381166000908152601360205260408082205490516370a0823160e01b815292169182906370a0823190614478903090600401614d2f565b60206040518083038186803b15801561449057600080fd5b505afa1580156144a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c89190614adc565b9050816001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561450557600080fd5b505af1158015614519573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038616935063eab89a5a925084915083906370a0823190614554903090600401614d2f565b60206040518083038186803b15801561456c57600080fd5b505afa158015614580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145a49190614adc565b6145ae919061506e565b6040518263ffffffff1660e01b81526004016145cc91815260200190565b60206040518083038186803b1580156145e457600080fd5b505afa1580156145f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061461c9190614adc565b9695505050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561467657602002820191906000526020600020905b815481526020019060010190808311614662575b50505050509050919050565b606061250684846000856146c9565b6040516001600160a01b038085166024830152831660448201526064810182905261118f9085906323b872dd60e01b90608401613367565b60608247101561472a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611155565b843b6147785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611155565b600080866001600160a01b031685876040516147949190614d13565b60006040518083038185875af1925050503d80600081146147d1576040519150601f19603f3d011682016040523d82523d6000602084013e6147d6565b606091505b509150915061306c828286606083156147f0575081611cf7565b8251156148005782518084602001fd5b8160405162461bcd60e51b81526004016111559190614e8a565b60405180610180016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000801916815260200160008152602001600081526020016000600281111561489b57634e487b7160e01b600052602160045260246000fd5b815260006020820181905260409091015290565b6000602082840312156148c0578081fd5b8135611cf78161510c565b6000602082840312156148dc578081fd5b8151611cf78161510c565b600080604083850312156148f9578081fd5b82356149048161510c565b915060208301356149148161510c565b809150509250929050565b600080600060408486031215614933578081fd5b833561493e8161510c565b925060208401356001600160401b0380821115614959578283fd5b818601915086601f83011261496c578283fd5b81358181111561497a578384fd5b87602082850101111561498b578384fd5b6020830194508093505050509250925092565b600080604083850312156149b0578182fd5b82356149bb8161510c565b946020939093013593505050565b6000806000606084860312156149dd578283fd5b83356149e88161510c565b92506020840135915060408401356149ff8161510c565b809150509250925092565b600080600080600060a08688031215614a21578081fd5b8535614a2c8161510c565b9450602086013593506040860135614a438161510c565b94979396509394606081013594506080013592915050565b60008060008060808587031215614a70578384fd5b8435614a7b8161510c565b935060208501359250604085013591506060850135614a998161510c565b939692955090935050565b600060208284031215614ab5578081fd5b81518015158114611cf7578182fd5b600060208284031215614ad5578081fd5b5035919050565b600060208284031215614aed578081fd5b5051919050565b60008060408385031215614b06578182fd5b8235915060208301356149148161510c565b600080600060608486031215614b2c578283fd5b833592506020840135614b3e8161510c565b915060408401356149ff8161510c565b60008060008060808587031215614b63578182fd5b843593506020850135614b758161510c565b92506040850135614b858161510c565b91506060850135614a998161510c565b600080600080600060a08688031215614bac578283fd5b853594506020860135614bbe8161510c565b93506040860135614a438161510c565b60008060408385031215614be0578182fd5b505080516020909101519092909150565b60008060008060808587031215614c06578182fd5b84359350602085013592506040850135614b858161510c565b6001600160a01b03169052565b60008151808452614c44816020860160208601615085565b601f01601f19169290920160200192915050565b60038110614c7657634e487b7160e01b600052602160045260246000fd5b9052565b614c85828251614c1f565b6020810151614c976020840182614c1f565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151614cf382850182614c58565b505061014081810151908301526101608082015161118f82850182614c1f565b60008251614d25818460208701615085565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015614dda5783516001600160a01b031683529284019291840191600101614db5565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614dda57614e15838551614c7a565b928401926101809290920191600101614e02565b6020808252825182820181905260009190848201906040850190845b81811015614dda57835183529284019291840191600101614e45565b60008315158252604060208301526125066040830184614c2c565b602081016114c48284614c58565b600060208252611cf76020830184614c2c565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b6020808252601690820152755374726174656779206973206e6f742061637469766560501b604082015260600190565b6020808252601990820152784e6f7420617574686f72697a656420746f206d69677261746560381b604082015260600190565b6020808252601a9082015279446f6e27742073656e6420746f207a65726f206164647265737360301b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600e908201526d09edcd8f240ccdee440ae82ac82b60931b604082015260600190565b6020808252601f908201527f4e6f7420617574686f72697a656420746f20636f6c6c656374207969656c6400604082015260600190565b61018081016114c48284614c7a565b60008219821115615036576150366150e0565b500190565b60008261504a5761504a6150f6565b500490565b6000816000190483118215151615615069576150696150e0565b500290565b600082821015615080576150806150e0565b500390565b60005b838110156150a0578181015183820152602001615088565b8381111561118f5750506000910152565b60006000198214156150c5576150c56150e0565b5060010190565b6000826150db576150db6150f6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461217857600080fdfe43616c6c6572206973206e6f7420746865206f776e65722c206578656375746fa2646970667358221220dbb83d37c20598de5c1b7ef1968c92e189be89ebf33c2f4cba89776fc7b762ee64736f6c63430008030033405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
  "deployedBytecode": "0x6080604052600436106103665760003560e01c806301c7b9f81461036f5780630581f3b5146103a257806306b8ce99146103c2578063071060a6146103d75780630a3017d9146103f75780630b504430146104175780630ccc5bd6146104445780630d74962814610464578063110acb2314610479578063164e68de146104a657806316a6b54a146104c657806318af4c9e146104e65780631dc3a759146105065780631f7ea8811461052757806321fa0f1f1461054757806322f3e2d4146105695780632642b6061461059357806326473a8f146105e157806328f3fc73146105fc578063296b12281461061c578063392f5f64146106525780633a3db435146106865780633ace96ec146106a6578063447d52ba146106c6578063459ba127146106e657806349d4f22e146107065780634a7a7f41146107265780634d578359146107485780634d9d01b2146107765780634df87c091461078b5780636caa9c11146107ab5780636fecdf24146107cb57806371b3177a146108305780637268d1c0146108505780637a1a04df146108705780637b2c9279146108ab5780637dad209b146108c05780638496e891146108d557806389f117b3146109105780639470505f146105e157806395494bf5146105065780639b0f09ae146109305780639dc3a9f51461094c5780639fffe06414610979578063a4d77f9014610999578063a50233c9146109ce578063a51c8fab146109ee578063abcbc4fc14610a10578063ad89b79414610a30578063aeb38d8b14610a45578063af236af414610a65578063b06ea8f014610a7a578063b23d66c214610a90578063b832799314610ad5578063bf184ea414610af5578063c5c72dc314610b15578063cfbc531f14610b35578063d0d9ab5914610b4b578063d241c9c014610b60578063d9cb512c14610b80578063dc94cb7d14610b95578063e10ac23a14610baa578063e173ad2514610bd7578063e22d284514610c0b578063e2e730f614610c74578063e8ea4fae14610c94578063e9c3f77d14610ca9578063ea7bade314610cdf578063eb6d3a1114610d0c578063f725ed1014610d40578063f8903fb714610d60578063f8d6a05d14610d80578063fa98a4ba14610da0578063fabee7db14610dc0578063fac82e8c14610de0578063fd80d0c314610e00578063fe65a5b414610e205761036d565b3661036d57005b005b34801561037b57600080fd5b5061038f61038a366004614af4565b610e40565b6040519081526020015b60405180910390f35b3480156103ae57600080fd5b5061038f6103bd3660046148af565b610e65565b3480156103ce57600080fd5b5061038f611017565b3480156103e357600080fd5b5061036d6103f2366004614ac4565b611028565b34801561040357600080fd5b5061038f6104123660046148af565b6110ee565b34801561042357600080fd5b5061038f6104323660046148af565b60176020526000908152604090205481565b34801561045057600080fd5b5061036d61045f3660046149c9565b61110c565b34801561047057600080fd5b5061038f611195565b34801561048557600080fd5b506104996104943660046148af565b611227565b6040516103999190615014565b3480156104b257600080fd5b5061036d6104c13660046148af565b611327565b3480156104d257600080fd5b5061038f6104e13660046148af565b611408565b3480156104f257600080fd5b5061036d610501366004614af4565b6114ca565b34801561051257600080fd5b5061038f610521366004614ac4565b50600090565b34801561053357600080fd5b5061036d61054236600461491f565b611574565b34801561055357600080fd5b5061055c61162c565b6040516103999190614de6565b34801561057557600080fd5b506009546105839060ff1681565b6040519015158152602001610399565b34801561059f57600080fd5b506105d46105ae3660046148e7565b60066020908152600092835260408084209091529082529020546001600160a01b031681565b6040516103999190614d2f565b3480156105ed57600080fd5b5061038f6105213660046148af565b34801561060857600080fd5b5061036d6106173660046148e7565b6116fe565b34801561062857600080fd5b506105d46106373660046148af565b6013602052600090815260409020546001600160a01b031681565b34801561065e57600080fd5b506105d47f000000000000000000000000000000000000000000000000000000000000000081565b34801561069257600080fd5b5061036d6106a1366004614ac4565b6117f1565b3480156106b257600080fd5b5061036d6106c136600461491f565b611898565b3480156106d257600080fd5b5061036d6106e1366004614af4565b611963565b3480156106f257600080fd5b5061036d610701366004614b95565b611a39565b34801561071257600080fd5b5061036d6107213660046149c9565b611ab2565b34801561073257600080fd5b5061073b611b35565b6040516103999190614e29565b34801561075457600080fd5b506107686107633660046148e7565b611b8d565b604051610399929190614e61565b34801561078257600080fd5b5061038f611bc5565b34801561079757600080fd5b506105836107a63660046148af565b611bd1565b3480156107b757600080fd5b5061038f6107c6366004614ac4565b611bde565b3480156107d757600080fd5b506108106107e63660046148af565b60126020526000908152604090206001810154600282015460038301546004909301549192909184565b604080519485526020850193909352918301526060820152608001610399565b34801561083c57600080fd5b5061036d61084b366004614bf1565b611bff565b34801561085c57600080fd5b5061038f61086b366004614ac4565b611cd8565b34801561087c57600080fd5b5061058361088b36600461499e565b600160209081526000928352604080842090915290825290205460ff1681565b3480156108b757600080fd5b506105d4611cfe565b3480156108cc57600080fd5b5061073b611d08565b3480156108e157600080fd5b506108f56108f0366004614b4e565b611d5e565b60408051938452602084019290925290820152606001610399565b34801561091c57600080fd5b5061036d61092b3660046148af565b611e79565b34801561093c57600080fd5b5060016040516103999190614e7c565b34801561095857600080fd5b5061038f6109673660046148af565b60156020526000908152604090205481565b34801561098557600080fd5b5061036d6109943660046148e7565b611f05565b3480156109a557600080fd5b506109b96109b4366004614af4565b611f58565b60408051928352602083019190915201610399565b3480156109da57600080fd5b5061036d6109e9366004614a5b565b611f81565b3480156109fa57600080fd5b50610a03612042565b6040516103999190614d99565b348015610a1c57600080fd5b5061038f610a2b366004614ac4565b61204e565b348015610a3c57600080fd5b5061055c61205e565b348015610a5157600080fd5b5061038f610a60366004614ac4565b612129565b348015610a7157600080fd5b5061036d612139565b348015610a8657600080fd5b5061038f60115481565b348015610a9c57600080fd5b50610ab0610aab366004614b4e565b61217b565b604080516001600160a01b039094168452602084019290925290820152606001610399565b348015610ae157600080fd5b5061036d610af0366004614a0a565b61228e565b348015610b0157600080fd5b5061038f610b10366004614ac4565b612347565b348015610b2157600080fd5b5061038f610b30366004614ac4565b612357565b348015610b4157600080fd5b5061038f60185481565b348015610b5757600080fd5b50610a03612408565b348015610b6c57600080fd5b506105d4610b7b366004614ac4565b612414565b348015610b8c57600080fd5b50610a0361250e565b348015610ba157600080fd5b5061073b61251a565b348015610bb657600080fd5b5061038f610bc53660046148af565b60166020526000908152604090205481565b348015610be357600080fd5b5061038f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c1757600080fd5b50610c50610c26366004614ac4565b6010602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b031690820152606001610399565b348015610c8057600080fd5b5061038f610c8f3660046148af565b612570565b348015610ca057600080fd5b5061073b612677565b348015610cb557600080fd5b506105d4610cc4366004614ac4565b6000602081905290815260409020546001600160a01b031681565b348015610ceb57600080fd5b5061038f610cfa366004614ac4565b60146020526000908152604090205481565b348015610d1857600080fd5b506105d47f000000000000000000000000000000000000000000000000000000000000000081565b348015610d4c57600080fd5b506105d4610d5b3660046148af565b6126cd565b348015610d6c57600080fd5b5061038f610d7b366004614b18565b6126eb565b348015610d8c57600080fd5b5061038f610d9b3660046148af565b6127de565b348015610dac57600080fd5b506108f5610dbb366004614b18565b6127f4565b348015610dcc57600080fd5b506105d4610ddb366004614ac4565b61282f565b348015610dec57600080fd5b5061036d610dfb3660046148af565b61284d565b348015610e0c57600080fd5b5061038f610e1b366004614af4565b612a08565b348015610e2c57600080fd5b5061036d610e3b366004614ac4565b612a4c565b6000610e5d610e4e8461282f565b610e5785612357565b84612adb565b509392505050565b6001600160a01b038082166000908152601360209081526040808320548151630173caf760e71b81529151939416928492849263b9e57b809260048083019392829003018186803b158015610eb957600080fd5b505afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190614adc565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2e57600080fd5b505afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f669190614adc565b6040516370a0823160e01b815283906001600160a01b038616906370a0823190610f94903090600401614d2f565b60206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190614adc565b610fee919061504f565b610ff8919061503b565b905061100c8582611007611cfe565b612c20565b93505050505b919050565b6000611023600c612d60565b905090565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561108857600080fd5b505afa15801561109c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c091906148cb565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b031660009081526012602052604090206004015490565b33611115612d6a565b6001600160a01b0316148061113957503361112e612dfd565b6001600160a01b0316145b61115e5760405162461bcd60e51b815260040161115590614e9d565b60405180910390fd5b6001600160a01b0381166111845760405162461bcd60e51b815260040161115590614f4a565b61118f818484612e6e565b50505050565b6000805b806111a4600e612d60565b11156112195760006111b7600e83613077565b6001600160a01b0381166000908152601660209081526040808320546015909252909120549192506111f99183916111f191839190613083565b611007611cfe565b6112039084615023565b9250508080611211906150b1565b915050611199565b506018546110239082615023565b61122f61481a565b60008061124c84670de0b6b3a76400006112476130a4565b612adb565b91509150604051806101800160405280306001600160a01b03168152602001856001600160a01b03168152602001611283866110ee565b815260200160126000876001600160a01b03166001600160a01b031681526020019081526020016000206002015481526020018281526020018381526020017f000000000000000000000000000000000000000000000000000000000000000081526020016112f186612570565b8152600060208201526040016001815260200160008152602001611314866126cd565b6001600160a01b03169052949350505050565b6001600160a01b0381166000908152601660209081526040808320546015909252822054611356918491613083565b905061139d611396606760009081526020527f682158d08466d11c566d5712d4396197fdd67e65be71d83c97ef719ec468867b546001600160a01b031690565b8383612e6e565b506113b082826113ab611cfe565b6130dc565b601860008282546113c19190615023565b90915550506001600160a01b0382166000908152601660205260408120556113e882611408565b6001600160a01b0390921660009081526015602052604090209190915550565b6001600160a01b03818116600090815260176020908152604080832054601390925280832054905163755c4d2d60e11b8152670de0b6b3a764000060048201529293919291169063eab89a5a9060240160206040518083038186803b15801561147057600080fd5b505afa158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190614adc565b6114ba90670de0b6b3a764000061504f565b6114c4919061503b565b92915050565b336114d3612d6a565b6001600160a01b031614806114f75750336114ec612dfd565b6001600160a01b0316145b6115135760405162461bcd60e51b815260040161115590614e9d565b6001600160a01b0381166115395760405162461bcd60e51b815260040161115590614f4a565b6040516001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561156f573d6000803e3d6000fd5b505050565b3361157d612d6a565b6001600160a01b031614806115a1575033611596612dfd565b6001600160a01b0316145b806115b057506115b03361314a565b61160c5760405162461bcd60e51b81526020600482015260396024820152600080516020615122833981519152604482015278391037b91030baba3437b934bd32b21030b1ba34bb30ba37b960391b6064820152608401611155565b6116178383836131ed565b61118f83670de0b6b3a76400006113ab6130a4565b6060600061163a600a612d60565b90506000816001600160401b0381111561166457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561169d57816020015b61168a61481a565b8152602001906001900390816116825790505b50905060005b808311156116f7576116b9610494600a83613077565b8282815181106116d957634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806116ef906150b1565b9150506116a3565b5091505090565b6001600160a01b038281166000908152600660209081526040808320858516845290915290205416156117ed5761173361325e565b6001600160a01b0316635e73a03483836040518363ffffffff1660e01b8152600401611760929190614d43565b60206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b091906148cb565b6001600160a01b0383811660009081526006602090815260408083208685168452909152902080546001600160a01b031916929091169190911790555b5050565b336117fa612d6a565b6001600160a01b0316148061181e575033611813612dfd565b6001600160a01b0316145b61183a5760405162461bcd60e51b815260040161115590614e9d565b601181905560408051818152600d818301526c61706620736d6f6f7468696e6760981b60608201526020810183905290517f3a64504f0bc0c335e2aecb78638a257e0351a3fe0370861fd54ee4190b9209339181900360800190a150565b336118a1612d6a565b6001600160a01b031614806118c55750336118ba612dfd565b6001600160a01b0316145b6118e15760405162461bcd60e51b815260040161115590614e9d565b6118ec600a84613296565b506118f8600c846132ab565b506119016132c0565b6001600160a01b03166311848c45306040518263ffffffff1660e01b815260040161192c9190614d2f565b600060405180830381600087803b15801561194657600080fd5b505af115801561195a573d6000803e3d6000fd5b50505050505050565b60405163f0723d9760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d97906119b19084908690600401614d5d565b60206040518083038186803b1580156119c957600080fd5b505afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a019190614aa4565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b60026008541415611a5c5760405162461bcd60e51b815260040161115590614f7e565b6002600855611a6a85612414565b6001600160a01b0316336001600160a01b031614611a9a5760405162461bcd60e51b815260040161115590614f17565b611aa6848685846132f8565b50506001600855505050565b33611abb612d6a565b6001600160a01b03161480611adf575033611ad4612dfd565b6001600160a01b0316145b611afb5760405162461bcd60e51b815260040161115590614e9d565b6001600160a01b038116611b215760405162461bcd60e51b815260040161115590614f4a565b61156f6001600160a01b0384168284613348565b60606003805480602002602001604051908101604052809291908181526020018280548015611b8357602002820191906000526020600020905b815481526020019060010190808311611b6f575b5050505050905090565b60006060611b9a84611bd1565b83604051602001611bab9190614d2f565b604051602081830303815290604052915091509250929050565b6000611023600a612d60565b60006114c4600a8361339e565b60058181548110611bee57600080fd5b600091825260209091200154905081565b60095460ff16611c215760405162461bcd60e51b815260040161115590614ee7565b60026008541415611c445760405162461bcd60e51b815260040161115590614f7e565b6002600855611c52336133b3565b611c9b5760405162461bcd60e51b815260206004820152601a6024820152794e6f7420617574686f72697a656420746f20776974686472617760301b6044820152606401611155565b6001600160a01b038116611cc15760405162461bcd60e51b815260040161115590614f4a565b611ccd848484846133dc565b505060016008555050565b6000611cf7611ce68361282f565b611cef84612357565b611247611cfe565b9392505050565b60006110236130a4565b60606004805480602002602001604051908101604052809291908181526020018280548015611b835760200282019190600052602060002090815481526020019060010190808311611b6f575050505050905090565b600080600060026008541415611d865760405162461bcd60e51b815260040161115590614f7e565b6002600855611d94336133b3565b80611e205750611da387612414565b6001600160a01b0316632972b0f033896040518363ffffffff1660e01b8152600401611dd0929190614d5d565b60206040518083038186803b158015611de857600080fd5b505afa158015611dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e209190614aa4565b611e3c5760405162461bcd60e51b815260040161115590614fdd565b611e478787866134a3565b9250611e64611e558861282f565b611e5e89612357565b876135e6565b60016008559398909750929550919350505050565b60026008541415611e9c5760405162461bcd60e51b815260040161115590614f7e565b60026008556001600160a01b03808216600090815260136020526040808220548151637edad01f60e11b8152915193169263fdb5a03e9260048084019391929182900301818387803b158015611ef157600080fd5b505af1158015611aa6573d6000803e3d6000fd5b33611f0e612d6a565b6001600160a01b03161480611f32575033611f27612dfd565b6001600160a01b0316145b611f4e5760405162461bcd60e51b815260040161115590614e9d565b6117ed8282613655565b600080611f76611f678561282f565b611f7086612357565b85612adb565b915091509250929050565b60095460ff16611fa35760405162461bcd60e51b815260040161115590614ee7565b60026008541415611fc65760405162461bcd60e51b815260040161115590614f7e565b6002600855611fd4336133b3565b61202e5760405162461bcd60e51b815260206004820152602560248201527f4e6f7420617574686f72697a656420746f207472616e7366657220757365722060448201526466756e647360d81b6064820152608401611155565b611ccd84848461203c611cfe565b85613b24565b6060611023600a613bc5565b60028181548110611bee57600080fd5b6060600061206c600c612d60565b90506000816001600160401b0381111561209657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156120cf57816020015b6120bc61481a565b8152602001906001900390816120b45790505b50905060005b808311156116f7576120eb610494600c83613077565b82828151811061210b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080612121906150b1565b9150506120d5565b60048181548110611bee57600080fd5b60005b80612147600e612d60565b111561217857600061215a600e83613077565b905061216581611327565b5080612170816150b1565b91505061213c565b50565b6009546000908190819060ff166121a45760405162461bcd60e51b815260040161115590614ee7565b6121ad87612414565b6001600160a01b0316336001600160a01b0316146121dd5760405162461bcd60e51b815260040161115590614f17565b60006121e88861282f565b905060006121f589612357565b90506122028988886134a3565b506000612210308484612e6e565b90506122266001600160a01b0384168a83613bd2565b6001600160a01b0383166000908152601260205260408120600201805483929061225190849061506e565b90915550506000998a52601060205260408a208a8155600181018b905560020180546001600160a01b031916905591999197509095505050505050565b60095460ff166122b05760405162461bcd60e51b815260040161115590614ee7565b600260085414156122d35760405162461bcd60e51b815260040161115590614f7e565b60026008556122e1336133b3565b80156122fd5750336122f285612414565b6001600160a01b0316145b61233b5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207472616e63686560881b6044820152606401611155565b611aa6858585846132f8565b60038181548110611bee57600080fd5b6000818152601060205260408120805460195483906123789061271061506e565b60028401548454600088815260146020526040812054939450926123a6926001600160a01b03169190613083565b9050828111156123fd576127106123bd838561504f565b6123c7919061503b565b6127106123d4848461504f565b6123de919061503b565b6123e89085615023565b6123f2919061506e565b945050505050611012565b935061101292505050565b6060611023600c613bc5565b6000806124417f0000000000000000000000000000000000000000000000000000000000000000846150cc565b6000818152600760205260409020549091506001600160a01b031680611cf757606960009081526020527f366a7b92acda364086cc991f618bf9f10b629ec0f7ae94543f96b691b69ec9925460405163043b4d2f60e51b8152600481018490526001600160a01b0390911690638769a5e09060240160206040518083038186803b1580156124ce57600080fd5b505afa1580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250691906148cb565b949350505050565b6060611023600e613bc5565b60606002805480602002602001604051908101604052809291908181526020018280548015611b835760200282019190600052602060002090815481526020019060010190808311611b6f575050505050905090565b6001600160a01b038082166000908152601360205260408082205490516370a0823160e01b815291921690819063eab89a5a9082906370a08231906125b9903090600401614d2f565b60206040518083038186803b1580156125d157600080fd5b505afa1580156125e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126099190614adc565b6040518263ffffffff1660e01b815260040161262791815260200190565b60206040518083038186803b15801561263f57600080fd5b505afa158015612653573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf79190614adc565b60606005805480602002602001604051908101604052809291908181526020018280548015611b835760200282019190600052602060002090815481526020019060010190808311611b6f575050505050905090565b6001600160a01b039081166000908152601360205260409020541690565b6000600260085414156127105760405162461bcd60e51b815260040161115590614f7e565b600260085561271e336133b3565b806127aa575061272d84612414565b6001600160a01b0316632972b0f033866040518363ffffffff1660e01b815260040161275a929190614d5d565b60206040518083038186803b15801561277257600080fd5b505afa158015612786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127aa9190614aa4565b6127c65760405162461bcd60e51b815260040161115590614fdd565b6127d18484846134a3565b6001600855949350505050565b60006127e982610e65565b6114c4906000615023565b60008060006128038686612a08565b92506128206128118761282f565b61281a88612357565b86612adb565b93979096509294509192505050565b6000908152601060205260409020600201546001600160a01b031690565b60095460ff1661286f5760405162461bcd60e51b815260040161115590614ee7565b33612878612d6a565b6001600160a01b0316148061289c575033612891612dfd565b6001600160a01b0316145b806128b65750336128ab613c7e565b6001600160a01b0316145b6129115760405162461bcd60e51b81526020600482015260386024820152600080516020615122833981519152604482015277391037b91030baba3437b934bd32b2103234b9b0b13632b960411b6064820152608401611155565b60005b8061291f600e612d60565b11156129fa576000612932600e83613077565b9050600061293f82612570565b9050600061294b6132c0565b9050612958818484612e6e565b5061296e6001600160a01b038416826000613ce2565b6129846001600160a01b03841682600019613ce2565b60405163269974d160e21b81526001600160a01b03821690639a65d344906129b29088908790600401614d43565b600060405180830381600087803b1580156129cc57600080fd5b505af11580156129e0573d6000803e3d6000fd5b5050505050505080806129f2906150b1565b915050612914565b50506009805460ff19169055565b600082815260106020526040812061250681601284612a268861282f565b6001600160a01b03166001600160a01b0316815260200190815260200160002085613df4565b33612a55612d6a565b6001600160a01b03161480612a79575033612a6e612dfd565b6001600160a01b0316145b612a955760405162461bcd60e51b815260040161115590614e9d565b806127101015612ad65760405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606401611155565b601955565b6001600160a01b0380841660009081526006602090815260408083208585168452909152812054909182911680612b9457612b1461325e565b6001600160a01b0316635e73a03487866040518363ffffffff1660e01b8152600401612b41929190614d43565b60206040518083038186803b158015612b5957600080fd5b505afa158015612b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9191906148cb565b90505b6040516313f3552960e21b81526001600160a01b03821690634fcd54a490612bc490899089908990600401614d76565b604080518083038186803b158015612bdb57600080fd5b505afa158015612bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c139190614bce565b9097909650945050505050565b6001600160a01b038084166000908152600660209081526040808320858516845290915281205490911680612cd757612c5761325e565b6001600160a01b0316635e73a03486856040518363ffffffff1660e01b8152600401612c84929190614d43565b60206040518083038186803b158015612c9c57600080fd5b505afa158015612cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd491906148cb565b90505b6040516323aaad6360e21b81526001600160a01b03821690638eaab58c90612d0790889088908890600401614d76565b60206040518083038186803b158015612d1f57600080fd5b505afa158015612d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d579190614adc565b95945050505050565b60006114c4825490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc557600080fd5b505afa158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102391906148cb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612e5a57600080fd5b505af1158015612dd9573d6000803e3d6000fd5b60006001600160a01b038416612e965760405162461bcd60e51b815260040161115590614f4a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614612ee75760405162461bcd60e51b815260040161115590614fb5565b6001600160a01b03838116600090815260136020526040808220549051636ec6726b60e11b815260048101869052921691829063dd8ce4d69060240160206040518083038186803b158015612f3b57600080fd5b505afa158015612f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f739190614adc565b604051632e1a7d4d60e01b81526004810182905290915047906001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b158015612fba57600080fd5b505af1158015612fce573d6000803e3d6000fd5b5050505060008147612fe0919061506e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561303d57600080fd5b505af1158015613051573d6000803e3d6000fd5b5061306c935050506001600160a01b03891690508983613348565b979650505050505050565b6000611cf78383613f0e565b6000818361309086611408565b61309a919061504f565b612506919061503b565b606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b031690565b6000806130e98584613f46565b604051630576cbc360e41b81529091506001600160a01b0382169063576cbc309061311c90889088908890600401614d76565b602060405180830381600087803b15801561313657600080fd5b505af1158015612d33573d6000803e3d6000fd5b60405163f0723d9760e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d979061319d9085906103eb90600401614d5d565b60206040518083038186803b1580156131b557600080fd5b505afa1580156131c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190614aa4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461323e5760405162461bcd60e51b815260040161115590614fb5565b6132538361324e838501856148af565b613655565b61156f838383613ffa565b606a60009081526020527ff3261457f4fd0b7c00a1511877ab27b74183ac470be8db3a7ecdc64335f6f979546001600160a01b031690565b6000611cf7836001600160a01b03841661404d565b6000611cf7836001600160a01b03841661416a565b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6001600160a01b03821660009081526012602090815260408083208054878552601090935292206001015561332d84846141b4565b61334185858461333b611cfe565b89613b24565b5050505050565b61156f8363a9059cbb60e01b8484604051602401613367929190614d5d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614234565b6000611cf7836001600160a01b038416614306565b6001600160a01b0316600090815260016020818152604080842092845291905290205460ff1690565b6000848152601060205260408120906133f48661282f565b90506134018685856134a3565b506134148561340f88612357565b61431e565b9450613421838287612e6e565b5084826000016000828254613436919061506e565b90915550506001600160a01b03811660009081526012602052604081206002810180549192889261346890849061506e565b9091555050600183015481541115613494578581600101600082825461348e919061506e565b90915550505b61195a87838560000154614336565b60008381526010602052604081208054156135db5760028101546001600160a01b03166000818152601260205260408120906134de88612357565b845460008a81526014602052604081205492935090916135019086908490613083565b9050600083821161351357600061351d565b61351d848361506e565b6001600160a01b03871660009081526016602090815260408083205460159092529091205491925061355191889190613083565b61355b9082615023565b6001600160a01b03871660009081526016602052604081209190915561358087611408565b6001600160a01b03881660009081526015602090815260408083208490558f835260149091529020819055600287015490915084906135c0908790615023565b6135ca919061506e565b600290960195909555505050835550505b506000949350505050565b60008060006135f58685613f46565b60405163442fd02b60e11b81529091506001600160a01b0382169063885fa0569061362890899089908990600401614d76565b6040805180830381600087803b15801561364157600080fd5b505af1158015612bef573d6000803e3d6000fd5b6001600160a01b038083166000908152601360205260409020541680156139fa576040516370a0823160e01b81526000906001600160a01b038516906370a08231906136a5903090600401614d2f565b60206040518083038186803b1580156136bd57600080fd5b505afa1580156136d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f59190614adc565b6040516370a0823160e01b81529091506001600160a01b03831690632e1a7d4d9082906370a082319061372c903090600401614d2f565b60206040518083038186803b15801561374457600080fd5b505afa158015613758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377c9190614adc565b6040518263ffffffff1660e01b815260040161379a91815260200190565b600060405180830381600087803b1580156137b457600080fd5b505af11580156137c8573d6000803e3d6000fd5b50505050600081856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016137fb9190614d2f565b60206040518083038186803b15801561381357600080fd5b505afa158015613827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384b9190614adc565b613855919061506e565b60405163b6b55f2560e01b8152600481018290529091506001600160a01b0385169063b6b55f2590602401600060405180830381600087803b15801561389a57600080fd5b505af11580156138ae573d6000803e3d6000fd5b505060405163755c4d2d60e11b8152670de0b6b3a764000060048201526001600160a01b038616925063eab89a5a915060240160206040518083038186803b1580156138f957600080fd5b505afa15801561390d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139319190614adc565b6001600160a01b038681166000908152601760205260409081902054905163755c4d2d60e11b8152670de0b6b3a76400006004820152909187169063eab89a5a9060240160206040518083038186803b15801561398d57600080fd5b505afa1580156139a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c59190614adc565b6139cf919061504f565b6139d9919061503b565b6001600160a01b03861660009081526017602052604090205550613ac29050565b6001600160a01b038381166000908152601360205260409081902080546001600160a01b03191692851692831790555163755c4d2d60e11b8152670de0b6b3a7640000600482015263eab89a5a9060240160206040518083038186803b158015613a6357600080fd5b505afa158015613a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9b9190614adc565b6001600160a01b038416600090815260176020908152604080832084905560159091529020555b60408051818152600c818301526b79616b20737472617465677960a01b60608201526001600160a01b038516602082015290517fbd64fae90eab1019a6c354538cfa598ad3d642c5b1bc8a8613bcb716723fa2d79181900360800190a1505050565b6000613b2f8561282f565b9050613b3c8584846134a3565b50613b48868286614356565b600086815260106020526040902054909450613b648582615023565b6000878152601060209081526040808320939093556001600160a01b03851682526012905290812060028101805491928892613ba1908490615023565b90915550613bbb90508784613bb68986615023565b614336565b5050505050505050565b60606000611cf783614626565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613c03929190614d43565b60206040518083038186803b158015613c1b57600080fd5b505afa158015613c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c539190614adc565b613c5d9190615023565b905061118f8463095ea7b360e01b8584604051602401613367929190614d5d565b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b158015612dc557600080fd5b801580613d6a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90613d189030908690600401614d43565b60206040518083038186803b158015613d3057600080fd5b505afa158015613d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d689190614adc565b155b613dd55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401611155565b61156f8363095ea7b360e01b8484604051602401613367929190614d5d565b6000613dfe611cfe565b6001600160a01b0316826001600160a01b031614613e555760405162461bcd60e51b815260206004820152601460248201527357726f6e67207969656c642063757272656e637960601b6044820152606401611155565b6001840154835484911015613f0457600081866001015481548110613e8a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548260018480549050613ea7919061506e565b81548110613ec557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154613eda919061506e565b9050600160401b818760000154613ef1919061504f565b613efb919061503b565b92505050611cf7565b6000915050611cf7565b6000826000018281548110613f3357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6001600160a01b038083166000908152600660209081526040808320858516845290915290205416806114c457613f7b61325e565b6001600160a01b0316631757616884846040518363ffffffff1660e01b8152600401613fa8929190614d43565b602060405180830381600087803b158015613fc257600080fd5b505af1158015613fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf791906148cb565b614005600a846132ab565b50614011600c84613296565b5061401d600e846132ab565b506001600160a01b03831660009081526012602052604090206127106004820155426003909101556119016132c0565b6000818152600183016020526040812054801561416057600061407160018361506e565b85549091506000906140859060019061506e565b90508181146141065760008660000182815481106140b357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106140e457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061412557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506114c4565b60009150506114c4565b60006141768383614306565b6141ac575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556114c4565b5060006114c4565b6141bf600a8261339e565b6142035760405162461bcd60e51b81526020600482015260156024820152742737ba1030b71030b8383937bb32b2103a37b5b2b760591b6044820152606401611155565b60009182526010602052604090912060020180546001600160a01b0319166001600160a01b03909216919091179055565b6000614289826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146829092919063ffffffff16565b80519091501561156f57808060200190518101906142a79190614aa4565b61156f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611155565b60009081526001919091016020526040902054151590565b60008183111561432f5750806114c4565b50816114c4565b61433f82611408565b600093845260146020526040909320929092555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146143a95760405162461bcd60e51b815260040161115590614fb5565b6143be6001600160a01b038416853085614691565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561442057600080fd5b505af1158015614434573d6000803e3d6000fd5b505050506001600160a01b038381166000908152601360205260408082205490516370a0823160e01b815292169182906370a0823190614478903090600401614d2f565b60206040518083038186803b15801561449057600080fd5b505afa1580156144a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c89190614adc565b9050816001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561450557600080fd5b505af1158015614519573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038616935063eab89a5a925084915083906370a0823190614554903090600401614d2f565b60206040518083038186803b15801561456c57600080fd5b505afa158015614580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145a49190614adc565b6145ae919061506e565b6040518263ffffffff1660e01b81526004016145cc91815260200190565b60206040518083038186803b1580156145e457600080fd5b505afa1580156145f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061461c9190614adc565b9695505050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561467657602002820191906000526020600020905b815481526020019060010190808311614662575b50505050509050919050565b606061250684846000856146c9565b6040516001600160a01b038085166024830152831660448201526064810182905261118f9085906323b872dd60e01b90608401613367565b60608247101561472a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611155565b843b6147785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611155565b600080866001600160a01b031685876040516147949190614d13565b60006040518083038185875af1925050503d80600081146147d1576040519150601f19603f3d011682016040523d82523d6000602084013e6147d6565b606091505b509150915061306c828286606083156147f0575081611cf7565b8251156148005782518084602001fd5b8160405162461bcd60e51b81526004016111559190614e8a565b60405180610180016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000801916815260200160008152602001600081526020016000600281111561489b57634e487b7160e01b600052602160045260246000fd5b815260006020820181905260409091015290565b6000602082840312156148c0578081fd5b8135611cf78161510c565b6000602082840312156148dc578081fd5b8151611cf78161510c565b600080604083850312156148f9578081fd5b82356149048161510c565b915060208301356149148161510c565b809150509250929050565b600080600060408486031215614933578081fd5b833561493e8161510c565b925060208401356001600160401b0380821115614959578283fd5b818601915086601f83011261496c578283fd5b81358181111561497a578384fd5b87602082850101111561498b578384fd5b6020830194508093505050509250925092565b600080604083850312156149b0578182fd5b82356149bb8161510c565b946020939093013593505050565b6000806000606084860312156149dd578283fd5b83356149e88161510c565b92506020840135915060408401356149ff8161510c565b809150509250925092565b600080600080600060a08688031215614a21578081fd5b8535614a2c8161510c565b9450602086013593506040860135614a438161510c565b94979396509394606081013594506080013592915050565b60008060008060808587031215614a70578384fd5b8435614a7b8161510c565b935060208501359250604085013591506060850135614a998161510c565b939692955090935050565b600060208284031215614ab5578081fd5b81518015158114611cf7578182fd5b600060208284031215614ad5578081fd5b5035919050565b600060208284031215614aed578081fd5b5051919050565b60008060408385031215614b06578182fd5b8235915060208301356149148161510c565b600080600060608486031215614b2c578283fd5b833592506020840135614b3e8161510c565b915060408401356149ff8161510c565b60008060008060808587031215614b63578182fd5b843593506020850135614b758161510c565b92506040850135614b858161510c565b91506060850135614a998161510c565b600080600080600060a08688031215614bac578283fd5b853594506020860135614bbe8161510c565b93506040860135614a438161510c565b60008060408385031215614be0578182fd5b505080516020909101519092909150565b60008060008060808587031215614c06578182fd5b84359350602085013592506040850135614b858161510c565b6001600160a01b03169052565b60008151808452614c44816020860160208601615085565b601f01601f19169290920160200192915050565b60038110614c7657634e487b7160e01b600052602160045260246000fd5b9052565b614c85828251614c1f565b6020810151614c976020840182614c1f565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151614cf382850182614c58565b505061014081810151908301526101608082015161118f82850182614c1f565b60008251614d25818460208701615085565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015614dda5783516001600160a01b031683529284019291840191600101614db5565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614dda57614e15838551614c7a565b928401926101809290920191600101614e02565b6020808252825182820181905260009190848201906040850190845b81811015614dda57835183529284019291840191600101614e45565b60008315158252604060208301526125066040830184614c2c565b602081016114c48284614c58565b600060208252611cf76020830184614c2c565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b6020808252601690820152755374726174656779206973206e6f742061637469766560501b604082015260600190565b6020808252601990820152784e6f7420617574686f72697a656420746f206d69677261746560381b604082015260600190565b6020808252601a9082015279446f6e27742073656e6420746f207a65726f206164647265737360301b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600e908201526d09edcd8f240ccdee440ae82ac82b60931b604082015260600190565b6020808252601f908201527f4e6f7420617574686f72697a656420746f20636f6c6c656374207969656c6400604082015260600190565b61018081016114c48284614c7a565b60008219821115615036576150366150e0565b500190565b60008261504a5761504a6150f6565b500490565b6000816000190483118215151615615069576150696150e0565b500290565b600082821015615080576150806150e0565b500390565b60005b838110156150a0578181015183820152602001615088565b8381111561118f5750506000910152565b60006000198214156150c5576150c56150e0565b5060010190565b6000826150db576150db6150f6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461217857600080fdfe43616c6c6572206973206e6f7420746865206f776e65722c206578656375746fa2646970667358221220dbb83d37c20598de5c1b7ef1968c92e189be89ebf33c2f4cba89776fc7b762ee64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "charactersPlayed()": {
        "details": "returns all characters played by this contract (e.g. stable coin, oracle registry)"
      },
      "dependsOnCharacters()": {
        "details": "returns all the character dependencies like FEE_RECIPIENT"
      },
      "dependsOnRoles()": {
        "details": "returns all the roles dependencies of this contract like FUND_TRANSFERER"
      },
      "rolesPlayed()": {
        "details": "returns all roles played by this contract"
      },
      "updateMainCharacterCache(uint256)": {
        "details": "Updates the main character cache for a speciic character"
      },
      "updateRoleCache(uint256,address)": {
        "details": "Updates the role cache for a specific role and address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_viewTVL(address)": {
        "notice": "TVL per token"
      },
      "acceptMigration(uint256,address,address,uint256,uint256)": {
        "notice": "Accept migrated assets from another tranche"
      },
      "approveToken(address,bytes)": {
        "notice": "set up a token to be supported by this strategy"
      },
      "approvedToken(address)": {
        "notice": "Is a token supported by this strategy?"
      },
      "approvedTokensCount()": {
        "notice": "count the number of tokens this strategy currently supports"
      },
      "checkApprovedAndEncode(address,address)": {
        "notice": "Check whether a token is approved and encode params"
      },
      "collectYieldValueBorrowable(uint256,address,address,address)": {
        "notice": "For a specific tranche, collect yield and view value and borrowable per 10k"
      },
      "disapproveToken(address,bytes)": {
        "notice": "Give some token the stink-eye and tell it to never show its face again"
      },
      "disapprovedTokensCount()": {
        "notice": "count the number of tokens this strategy currently supports"
      },
      "harvestPartially(address)": {
        "notice": "Call reinvest"
      },
      "migrateAllTo(address)": {
        "notice": "Migrate all tranches managed to a new strategy, using strategy registry as go-between"
      },
      "migrateStrategy(uint256,address,address,address)": {
        "notice": "Migrate contents of tranche to new strategy"
      },
      "newCurrentOracle(address,address)": {
        "notice": "Notify contract to update oracle cache"
      },
      "registerDepositFor(address,uint256,uint256,address)": {
        "notice": "Register deposit to tranche on behalf of user (to be called by other contract)"
      },
      "registerMintTranche(address,uint256,address,uint256,uint256)": {
        "notice": "Allows tranche contracts to register new tranches"
      },
      "rescueCollateral(address,uint256,address)": {
        "notice": "In an emergency, withdraw tokens from yield generator"
      },
      "rescueNative(uint256,address)": {
        "notice": "Rescue any stranded native currency"
      },
      "rescueStrandedTokens(address,uint256,address)": {
        "notice": "In an emergency, withdraw any tokens stranded in this contract's balance"
      },
      "setApfSmoothingPer10k(uint256)": {
        "notice": "Since return rates vary, we smooth"
      },
      "setYakStrategy(address,address)": {
        "notice": "Set the yy strategy for a token"
      },
      "stabilityFeePer10k(address)": {
        "notice": "View Stability fee if any"
      },
      "trancheToken(uint256)": {
        "notice": "Returns the token associated with a tranche"
      },
      "trancheTokenID(uint256)": {
        "notice": "The ID of the tranche token (relevant if not handling ERC20)"
      },
      "viewAPF(address)": {
        "notice": "Annual percentage factor, APR = APF - 100%"
      },
      "viewAllApprovedTokens()": {
        "notice": "View all tokens currently supported by this strategy"
      },
      "viewAllDisapprovedTokens()": {
        "notice": "View all tokens currently supported by this strategy"
      },
      "viewAllFeesEver()": {
        "notice": "All fees including currently pending and already withdrawn"
      },
      "viewAllStrategyMetadata()": {
        "notice": "view metadata for all tokens in an array"
      },
      "viewAllTokensEver()": {
        "notice": "All the tokens this strategy has ever touched"
      },
      "viewBorrowable(uint256)": {
        "notice": "View borrowable per10k of tranche"
      },
      "viewEstimatedHarvestable(address)": {
        "notice": "View estimated harvestable amount"
      },
      "viewHarvestBalance2Tally(address)": {
        "notice": "View outstanding yield that needs to be distributed to accounts of an asset if any"
      },
      "viewSourceHarvestable(address)": {
        "notice": "View amount of yield that yak strategy could reinvest"
      },
      "viewStrategyMetadata(address)": {
        "notice": "View metadata for a token"
      },
      "viewTargetCollateralAmount(uint256)": {
        "notice": "View collateral owned by tranche, taking into account compounding and fee"
      },
      "viewValue(uint256,address)": {
        "notice": "View the value of a tranche"
      },
      "viewValueBorrowable(uint256,address)": {
        "notice": "View value and borrowable per10k of tranche"
      },
      "viewYield(uint256,address)": {
        "notice": "View accrued yield for a tranche"
      },
      "viewYieldValueBorrowable(uint256,address,address)": {
        "notice": "For a specific tranche, view its accrued yield, value and borrowable per 10k"
      },
      "withdraw(uint256,uint256,address,address)": {
        "notice": "Withdraw tokens from tranche (only callable by fund transferer)"
      },
      "withdrawAllFees()": {
        "notice": "Withdraw all acrrued fees"
      },
      "withdrawFees(address)": {
        "notice": "Withdraw fees for one token"
      },
      "yieldCurrency()": {
        "notice": "The currency used to aggregate yield in this strategy (mintable)"
      },
      "yieldType()": {
        "notice": "compounding"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35318,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35324,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 35327,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 35330,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 35333,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 35336,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 30232,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_oracleCache",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 17380,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_slotTranches",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 223,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 46906,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "isActive",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 46912,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_approvedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(AddressSet)5499_storage"
      },
      {
        "astId": 46915,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_disapprovedTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(AddressSet)5499_storage"
      },
      {
        "astId": 46918,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_allTokensEver",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(AddressSet)5499_storage"
      },
      {
        "astId": 46930,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "_accounts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(CollateralAccount)46925_storage)"
      },
      {
        "astId": 46945,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "apfSmoothingPer10k",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 46950,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "tokenMetadata",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(TokenMetadata)46942_storage)"
      },
      {
        "astId": 50616,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "yakStrategy",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 50620,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "depositedMultiple",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 50624,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "feeMultiple",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 50628,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "feeBase",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 50632,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "startingTokensPerShare",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 50634,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "withdrawnFees",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 50637,
        "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
        "label": "feePer10k",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(TokenMetadata)46942_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Strategy2.TokenMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenMetadata)46942_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(CollateralAccount)46925_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Strategy2.CollateralAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralAccount)46925_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5499_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5498,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5198_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CollateralAccount)46925_storage": {
        "encoding": "inplace",
        "label": "struct Strategy2.CollateralAccount",
        "members": [
          {
            "astId": 46920,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "collateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 46922,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "yieldCheckptIdx",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 46924,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "trancheToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5198_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5193,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5197,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenMetadata)46942_storage": {
        "encoding": "inplace",
        "label": "struct Strategy2.TokenMetadata",
        "members": [
          {
            "astId": 46933,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "yieldCheckpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 46935,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "totalCollateralThisPhase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 46937,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "totalCollateralNow",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 46939,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "apfLastUpdated",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 46941,
            "contract": "contracts/strategies/AltYieldYakAVAXStrategy2.sol:AltYieldYakAVAXStrategy2",
            "label": "apf",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}