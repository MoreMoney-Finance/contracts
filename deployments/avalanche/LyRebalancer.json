{
  "address": "0x0CCC3FC318Eb9139b171BBd5F19535A03e2D0490",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msAVAX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mAVAX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lyLptHolder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SubjectParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        }
      ],
      "name": "SubjectUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "burnMAvax2Avax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "burnMAvax2wAvax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "burnMsAvax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lyLptHolder",
      "outputs": [
        {
          "internalType": "contract LyLptHolder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mAvax",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBalancePer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintMAvax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintMAvax",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintMsAvax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "msAvax",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullAllFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sAvax",
      "outputs": [
        {
          "internalType": "contract IsAvax",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minbalance",
          "type": "uint256"
        }
      ],
      "name": "setMinBalancePer10k",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "setWindowPer10k",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wAvax",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "windowPer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x040c681a074de6e80edfaceb2fdbd03a17367c9b627a76dda751f64e74aa9d6e",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x0CCC3FC318Eb9139b171BBd5F19535A03e2D0490",
    "transactionIndex": 11,
    "gasUsed": "3143382",
    "logsBloom": "0x
    "blockHash": "0xa4825b2aebd8e865ab9efe5e13aa289828df61d86db2859fc6d140ea9ef426a8",
    "transactionHash": "0x040c681a074de6e80edfaceb2fdbd03a17367c9b627a76dda751f64e74aa9d6e",
    "logs": [],
    "blockNumber": 12332519,
    "cumulativeGasUsed": "6565865",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x188B1B39c6Ea974525E36c4ad4A243C3D917cD7a",
    "0xA5916a3c4b9dFccbFe6C27108539EdA3E6b99d56",
    "0xBf1615f0a8c158444e2De263d0631dab34E60d62",
    "0x9e1EE00d45252aA58623F7d771FB414aA38f0878"
  ],
  "numDeployments": 1,
  "solcInputHash": "c2e53b0fe4e3704a2e907c8196abbab4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msAVAX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mAVAX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lyLptHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SubjectParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"SubjectUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burnMAvax2Avax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burnMAvax2wAvax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burnMsAvax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lyLptHolder\",\"outputs\":[{\"internalType\":\"contract LyLptHolder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mAvax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBalancePer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintMAvax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMAvax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintMsAvax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msAvax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sAvax\",\"outputs\":[{\"internalType\":\"contract IsAvax\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minbalance\",\"type\":\"uint256\"}],\"name\":\"setMinBalancePer10k\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setWindowPer10k\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wAvax\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"windowPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"charactersPlayed()\":{\"details\":\"returns all characters played by this contract (e.g. stable coin, oracle registry)\"},\"dependsOnCharacters()\":{\"details\":\"returns all the character dependencies like FEE_RECIPIENT\"},\"dependsOnRoles()\":{\"details\":\"returns all the roles dependencies of this contract like FUND_TRANSFERER\"},\"rolesPlayed()\":{\"details\":\"returns all roles played by this contract\"},\"updateMainCharacterCache(uint256)\":{\"details\":\"Updates the main character cache for a speciic character\"},\"updateRoleCache(uint256,address)\":{\"details\":\"Updates the role cache for a specific role and address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burnMAvax2Avax(uint256,address)\":{\"notice\":\"Withdraw AVAX\"},\"burnMAvax2wAvax(uint256,address)\":{\"notice\":\"Withdraw WAVAX\"},\"burnMsAvax(uint256,address)\":{\"notice\":\"withdraw sAVAX\"},\"depositBalances()\":{\"notice\":\"Put any matching balances into the liquidity pool, if it is close enough to peg\"},\"mintMAvax()\":{\"notice\":\"Deposit AVAX and mint mAVAX\"},\"mintMAvax(uint256)\":{\"notice\":\"Deposit WAVAX and mint mAVAX\"},\"mintMsAvax(uint256)\":{\"notice\":\"Deposit sAVAX and receive msAVAX\"},\"pullAllFunds()\":{\"notice\":\"Pull funds from liquidity pool to balance by admin\"},\"rescueFunds(address,address,uint256)\":{\"notice\":\"Rescue stranded funds\"},\"setMinBalancePer10k(uint256)\":{\"notice\":\"set minbalance parameter -- needs to be adjusted over time, as value of LPT increases (right now it's rougly 1:2)\"},\"setWindowPer10k(uint256)\":{\"notice\":\"Set acceptable deviation from peg\"}},\"notice\":\"Matches up sAvax and Avax deposits to be put in the liquidity pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquid-yield/LyRebalancer.sol\":\"LyRebalancer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x8a763ef5625e97f5287c7ddd5ede434129069e15d83bf0a68ad10a5e56ccb439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/MintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./roles/RoleAware.sol\\\";\\n\\nabstract contract MintableToken is ReentrancyGuard, ERC20Permit, RoleAware {\\n    uint256 public globalSupplyCeiling;\\n\\n    mapping(address => uint256) public minBalance;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 initialSupplyCeiling,\\n        address _roles\\n    ) RoleAware(_roles) ERC20(_name, _symbol) ERC20Permit(_symbol) {\\n        globalSupplyCeiling = initialSupplyCeiling;\\n    }\\n\\n    // --------------------------- Mint / burn --------------------------------------//\\n\\n    /// Mint stable, restricted to MinterBurner role (respecting global debt ceiling)\\n    function mint(address account, uint256 amount) external nonReentrant {\\n        require(\\n            isAuthorizedMinterBurner(msg.sender),\\n            \\\"Not an autorized minter\\\"\\n        );\\n        _mint(account, amount);\\n\\n        require(\\n            globalSupplyCeiling > totalSupply(),\\n            \\\"Total supply exceeds global debt ceiling\\\"\\n        );\\n    }\\n\\n    /// Burn stable, restricted to MinterBurner role\\n    function burn(address account, uint256 amount) external nonReentrant {\\n        require(\\n            isAuthorizedMinterBurner(msg.sender),\\n            \\\"Not an authorized burner\\\"\\n        );\\n        _burn(account, amount);\\n    }\\n\\n    /// Set global supply ceiling\\n    function setGlobalSupplyCeiling(uint256 ceiling) external onlyOwnerExec {\\n        globalSupplyCeiling = ceiling;\\n    }\\n\\n    // --------------------------- Min balances -------------------------------------//\\n\\n    /// For some applications we may want to mint balances that can't be withdrawn or burnt.\\n    /// Contracts using this should first check balance before setting in a transaction\\n    function setMinBalance(address account, uint256 balance) external {\\n        require(\\n            isAuthorizedMinterBurner(msg.sender),\\n            \\\"Not an authorized minter/burner\\\"\\n        );\\n\\n        minBalance[account] = balance;\\n    }\\n\\n    /// Check transfer and burn transactions for minimum balance compliance\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n        require(\\n            balanceOf(from) >= minBalance[from],\\n            \\\"MoreMoney: below min balance\\\"\\n        );\\n    }\\n\\n    /// Minting / burning access control\\n    function isAuthorizedMinterBurner(address caller)\\n        internal\\n        virtual\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x7e08125959857d4408bb1bfece68040dc9683f11721a05031a8122a4300e9722\",\"license\":\"BUSL-1.1\"},\"contracts/liquid-yield/LyLptHolder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../roles/RoleAware.sol\\\";\\nimport \\\"../roles/DependsOnLiquidYield.sol\\\";\\nimport \\\"../../interfaces/IMasterChefJoeV3.sol\\\";\\n\\n/// Holds LPT in masterchef for yield (and forwards yield to redistributor)\\ncontract LyLptHolder is RoleAware, DependsOnLiquidYield {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IMasterChefJoeV3 public constant chef =\\n        IMasterChefJoeV3(0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00);\\n    IERC20 public constant pair =\\n        IERC20(0x4b946c91C2B1a7d7C40FB3C130CdfBaf8389094d);\\n    uint256 constant pid = 51;\\n\\n    EnumerableSet.AddressSet internal rewardTokens;\\n    EnumerableSet.AddressSet internal rewardRecipients;\\n    mapping(address => uint256) public rewardRecipientWeight;\\n    uint256 public rewardWeightTotal = 0;\\n    uint256 public rewardLastDisbursed;\\n    uint256 public disbursalWindow = 6 hours;\\n\\n    constructor(\\n        address[] memory _rewardTokens,\\n        address[] memory recipients,\\n        uint256[] memory weights,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        _charactersPlayed.push(LIQUID_YIELD_HOLDER);\\n\\n        for (uint256 i; recipients.length > i; i++) {\\n            rewardRecipients.add(recipients[i]);\\n            rewardRecipientWeight[recipients[i]] += weights[i];\\n            rewardWeightTotal += weights[i];\\n        }\\n\\n        for (uint256 i; _rewardTokens.length > i; i++) {\\n            rewardTokens.add(_rewardTokens[i]);\\n        }\\n        rewardLastDisbursed = block.timestamp;\\n    }\\n\\n    /// Deposit balance in LPT to masterchef\\n    function deposit() external {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        uint256 balance = pair.balanceOf(address(this));\\n        pair.safeIncreaseAllowance(address(chef), balance);\\n        chef.deposit(pid, balance);\\n        forwardReward();\\n    }\\n\\n    /// Withdraw LPT from masterchef\\n    function withdraw(uint256 amount, address recipient) external {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        chef.withdraw(pid, amount);\\n        forwardReward();\\n        pair.safeTransfer(recipient, amount);\\n    }\\n\\n    /// Harvest yield from masterchef\\n    function harvestPartially() external {\\n        chef.withdraw(pid, 0);\\n        forwardReward();\\n    }\\n\\n    /// Forward rewards to all registered reward recipients\\n    function forwardReward() public {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        if (block.timestamp >= disbursalWindow + rewardLastDisbursed) {\\n            for (uint256 i; rewardTokens.length() > i; i++) {\\n                IERC20 token = IERC20(rewardTokens.at(i));\\n                uint256 rewardTotal = token.balanceOf(address(this));\\n                if (rewardTotal > 0) {\\n                    for (uint256 j; rewardRecipients.length() > j; j++) {\\n                        address recipient = rewardRecipients.at(j);\\n                        token.safeTransfer(\\n                            recipient,\\n                            (rewardTotal * rewardRecipientWeight[recipient]) /\\n                                rewardWeightTotal\\n                        );\\n                    }\\n                }\\n            }\\n            rewardLastDisbursed = block.timestamp;\\n        }\\n    }\\n\\n    /// Withdraw all LPT from masterchef and forward to recipient\\n    function withdrawAll(address recipient) external {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        chef.withdraw(pid, viewStakedBalance());\\n        forwardReward();\\n        pair.safeTransfer(recipient, pair.balanceOf(address(this)));\\n    }\\n\\n    /// View how much LPT is staked\\n    function viewStakedBalance() public view returns (uint256) {\\n        (uint256 balance, ) = chef.userInfo(pid, address(this));\\n        return balance;\\n    }\\n\\n    /// View the list of reward tokens\\n    function viewRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens.values();\\n    }\\n\\n    /// View the list of reward recipients\\n    function viewRewardRecipients()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory recipients = new address[](rewardRecipients.length());\\n        uint256[] memory weights = new uint256[](rewardRecipients.length());\\n\\n        for (uint256 i; rewardRecipients.length() > i; i++) {\\n            address recipient = rewardRecipients.at(i);\\n            recipients[i] = recipient;\\n            weights[i] = rewardRecipientWeight[recipient];\\n        }\\n\\n        return (recipients, weights);\\n    }\\n\\n    /// Set share of reward that recipient should receive\\n    function setRewardWeight(address recipient, uint256 w)\\n        external\\n        onlyOwnerExec\\n    {\\n        uint256 extantWeight = rewardRecipientWeight[recipient];\\n        rewardWeightTotal = rewardWeightTotal + w - extantWeight;\\n        rewardRecipientWeight[recipient] = w;\\n        if (w == 0) {\\n            rewardRecipients.remove(recipient);\\n        } else {\\n            rewardRecipients.add(recipient);\\n        }\\n    }\\n\\n    /// Rescue stranded funds\\n    function rescueFunds(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwnerExec {\\n        IERC20(token).safeTransfer(recipient, amount);\\n    }\\n\\n    /// register a reward token\\n    function addRewardToken(address token) external onlyOwnerExec {\\n        rewardTokens.add(token);\\n    }\\n\\n    /// unregister a reward token\\n    function removeRewardtoken(address token) external onlyOwnerExec {\\n        rewardTokens.remove(token);\\n    }\\n\\n    /// Set reward disbursal window\\n    function setDisbursalWindow(uint256 window) external onlyOwnerExec {\\n        disbursalWindow = window;\\n    }\\n}\\n\",\"keccak256\":\"0xa0210a465e72cc7b3490e07a327b07b941e490a9099a1da4542caa4bc22ce2d5\",\"license\":\"BUSL-1.1\"},\"contracts/liquid-yield/LyRebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./LyLptHolder.sol\\\";\\nimport \\\"../../interfaces/IsAvax.sol\\\";\\nimport \\\"../../interfaces/IWETH.sol\\\";\\nimport \\\"../roles/RoleAware.sol\\\";\\nimport \\\"../smart-liquidity/AuxLPT.sol\\\";\\n\\n/// Matches up sAvax and Avax deposits to be put in the liquidity pool\\ncontract LyRebalancer is RoleAware {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IUniswapV2Pair;\\n    using SafeERC20 for IsAvax;\\n    using SafeERC20 for IWETH;\\n\\n    IUniswapV2Pair public constant pair =\\n        IUniswapV2Pair(0x4b946c91C2B1a7d7C40FB3C130CdfBaf8389094d);\\n    IsAvax public constant sAvax =\\n        IsAvax(0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE);\\n    IWETH public constant wAvax =\\n        IWETH(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    address public immutable msAvax;\\n    address public immutable mAvax;\\n    LyLptHolder public lyLptHolder;\\n    uint256 public windowPer10k = 40;\\n    uint256 public minBalancePer10k = 3000;\\n\\n    constructor(\\n        address msAVAX,\\n        address mAVAX,\\n        address _lyLptHolder,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        msAvax = msAVAX;\\n        mAvax = mAVAX;\\n        lyLptHolder = LyLptHolder(_lyLptHolder);\\n\\n        _rolesPlayed.push(LIQUID_YIELD);\\n        _charactersPlayed.push(LIQUID_YIELD_REBALANCER);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    /// Put any matching balances into the liquidity pool, if it is close enough to peg\\n    function depositBalances() public {\\n        (bool close2Peg, uint256 sAvaxRes, uint256 wAvaxRes) = _arbitrage();\\n\\n        if (close2Peg) {\\n            // If arbitrage is completed we are in peg and can deposit\\n            // close enough to peg (so we don't suffer too much IL)\\n            uint256 sAvaxBalance = sAvax.balanceOf(msAvax);\\n            uint256 wAvaxBalance = wAvax.balanceOf(mAvax);\\n\\n            if (sAvaxBalance > 0 && wAvaxBalance > 0) {\\n                // move whatever we can match up into the liquidity pool\\n                uint256 sAvaxDeposit = min(\\n                    sAvaxBalance,\\n                    (wAvaxBalance * sAvaxRes) / wAvaxRes\\n                );\\n                uint256 wAvaxDeposit = min(\\n                    wAvaxBalance,\\n                    (sAvaxBalance * wAvaxRes) / sAvaxRes\\n                );\\n\\n                AuxLPT(msAvax).transferFunds(\\n                    sAvax,\\n                    address(pair),\\n                    sAvaxDeposit\\n                );\\n                AuxLPT(mAvax).transferFunds(wAvax, address(pair), wAvaxDeposit);\\n\\n                // mint LPT and deposit to staking\\n                pair.mint(address(lyLptHolder));\\n                lyLptHolder.deposit();\\n            }\\n        }\\n    }\\n\\n    /// Deposit sAVAX and receive msAVAX\\n    function mintMsAvax(uint256 amount) external {\\n        sAvax.safeTransferFrom(msg.sender, msAvax, amount);\\n        depositBalances();\\n        AuxLPT(msAvax).mint(msg.sender, amount);\\n    }\\n\\n    /// Deposit WAVAX and mint mAVAX\\n    function mintMAvax(uint256 amount) external {\\n        wAvax.safeTransferFrom(msg.sender, mAvax, amount);\\n        depositBalances();\\n        AuxLPT(mAvax).mint(msg.sender, amount);\\n    }\\n\\n    /// Deposit AVAX and mint mAVAX\\n    function mintMAvax() external payable {\\n        wAvax.deposit{value: msg.value}();\\n        wAvax.safeTransfer(mAvax, msg.value);\\n        depositBalances();\\n        AuxLPT(mAvax).mint(msg.sender, msg.value);\\n    }\\n\\n    /// withdraw sAVAX\\n    function burnMsAvax(uint256 amount, address recipient) external {\\n        AuxLPT(msAvax).burn(msg.sender, amount);\\n        uint256 extantBalance = sAvax.balanceOf(msAvax);\\n        if (amount >= extantBalance) {\\n            _withdrawSAvaxFromLp(amount - extantBalance);\\n        }\\n\\n        AuxLPT(msAvax).transferFunds(sAvax, recipient, amount);\\n        depositBalances();\\n    }\\n\\n    /// Withdraw WAVAX\\n    function burnMAvax2wAvax(uint256 amount, address recipient) external {\\n        AuxLPT(mAvax).burn(msg.sender, amount);\\n        uint256 extantBalance = wAvax.balanceOf(mAvax);\\n        if (amount >= extantBalance) {\\n            _withdrawWAvaxFromLp(amount - extantBalance);\\n        }\\n\\n        AuxLPT(mAvax).transferFunds(wAvax, recipient, amount);\\n        depositBalances();\\n    }\\n\\n    /// Withdraw AVAX\\n    function burnMAvax2Avax(uint256 amount, address recipient) external {\\n        AuxLPT(mAvax).burn(msg.sender, amount);\\n        uint256 extantBalance = wAvax.balanceOf(mAvax);\\n        if (amount >= extantBalance) {\\n            _withdrawWAvaxFromLp(amount - extantBalance);\\n        }\\n\\n        AuxLPT(mAvax).transferFunds(wAvax, address(this), amount);\\n        wAvax.withdraw(amount);\\n        payable(recipient).transfer(amount);\\n        depositBalances();\\n    }\\n\\n    /// Exploit imbalances in liquidity pool\\n    function _arbitrage()\\n        internal\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (uint256 sAvaxRes, uint256 wAvaxRes, ) = pair.getReserves();\\n        uint256 sAvaxResInAVAX = sAvax.getPooledAvaxByShares(sAvaxRes);\\n        bool close2Peg = false;\\n\\n        // k = wAvaxRes * sAvaxRes\\n        // k = wAvaxRes * (sAvaxResInAVAX * CONVERSION_FACTOR)\\n        // if the pool is in peg (sAvaxResInAVAX == wAvaxRes):\\n        // k = wAvaxRes^2 * CONVERSION_FACTOR\\n\\n        uint256 wAvaxResTarget = sqrt(sAvaxResInAVAX * wAvaxRes);\\n\\n        uint256 wAvaxBalance = wAvax.balanceOf(mAvax);\\n        uint256 sAvaxBalance = sAvax.balanceOf(msAvax);\\n\\n        if (\\n            (wAvaxResTarget * (10_000 - 2 * windowPer10k)) / 10_000 > wAvaxRes\\n        ) {\\n            // put in WAVAX, take out sAVAX\\n            uint256 inAmount = ((wAvaxResTarget * (10_000 - windowPer10k)) /\\n                1000 -\\n                wAvaxRes);\\n            uint256 outAmount = getAmountOut(inAmount, wAvaxRes, sAvaxRes);\\n\\n            if (\\n                wAvaxBalance >= inAmount &&\\n                sAvax.getPooledAvaxByShares(outAmount) >= inAmount &&\\n                lyLptHolder.viewStakedBalance() + wAvaxBalance - inAmount >=\\n                (AuxLPT(mAvax).totalSupply() * minBalancePer10k) / 10_000\\n            ) {\\n                AuxLPT(mAvax).transferFunds(wAvax, address(pair), inAmount);\\n                pair.swap(outAmount, 0, msAvax, \\\"\\\");\\n\\n                close2Peg = true;\\n                sAvaxRes -= outAmount;\\n                wAvaxRes += inAmount;\\n            }\\n        } else if (\\n            (wAvaxRes * (10_000 - 2 * windowPer10k)) / 10_000 > wAvaxResTarget\\n        ) {\\n            // put in sAVAX, take out WAVAX\\n            uint256 outAmount = (wAvaxRes -\\n                (wAvaxResTarget * (10_000 + windowPer10k)) /\\n                1000);\\n            uint256 inAmount = getAmountIn(outAmount, sAvaxRes, wAvaxRes);\\n\\n            if (\\n                sAvaxBalance >= inAmount &&\\n                outAmount >= sAvax.getPooledAvaxByShares(inAmount) &&\\n                lyLptHolder.viewStakedBalance() + sAvaxBalance - inAmount >=\\n                (AuxLPT(msAvax).totalSupply() * minBalancePer10k) / 10_000\\n            ) {\\n                AuxLPT(msAvax).transferFunds(sAvax, address(pair), inAmount);\\n                pair.swap(0, outAmount, mAvax, \\\"\\\");\\n\\n                close2Peg = true;\\n                sAvaxRes += inAmount;\\n                wAvaxRes -= outAmount;\\n            }\\n        } else {\\n            // we must be at peg, rougly\\n            close2Peg = true;\\n        }\\n\\n        return (close2Peg, sAvaxRes, wAvaxRes);\\n    }\\n\\n    /// Internall pull all funds\\n    function _pullAllFunds() internal {\\n        // first pull out all our liquidity\\n        lyLptHolder.withdrawAll(address(pair));\\n\\n        if (pair.balanceOf(address(pair)) > 0) {\\n            pair.burn(address(this));\\n\\n            sAvax.safeTransfer(msAvax, sAvax.balanceOf(address(this)));\\n            wAvax.safeTransfer(mAvax, wAvax.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function arbitrage() external {\\n        _pullAllFunds();\\n        depositBalances();\\n    }\\n\\n    /// Pull funds from liquidity pool to balance by admin\\n    function pullAllFunds() external onlyOwnerExecDisabler {\\n        _pullAllFunds();\\n    }\\n\\n    /// set minbalance parameter -- needs to be adjusted over time, as\\n    /// value of LPT increases (right now it's rougly 1:2)\\n    function setMinBalancePer10k(uint256 minbalance) external onlyOwnerExec {\\n        minBalancePer10k = minbalance;\\n    }\\n\\n    /// Internally pull WAVAX out of liquidity pool\\n    function _withdrawWAvaxFromLp(uint256 amount) internal {\\n        (, uint256 wAvaxRes, ) = pair.getReserves();\\n        uint256 supply = pair.totalSupply();\\n\\n        uint256 stakedBalance = lyLptHolder.viewStakedBalance();\\n        uint256 burnAmount = min(\\n            stakedBalance,\\n            1e10 + (supply * amount) / wAvaxRes\\n        );\\n\\n        _burnLpt(burnAmount);\\n    }\\n\\n    //// Internally pull sAVAX out of liquidity pool\\n    function _withdrawSAvaxFromLp(uint256 amount) internal {\\n        (uint256 sAvaxRes, , ) = pair.getReserves();\\n        uint256 supply = pair.totalSupply();\\n\\n        uint256 stakedBalance = lyLptHolder.viewStakedBalance();\\n        uint256 burnAmount = min(\\n            stakedBalance,\\n            1e10 + (supply * amount) / sAvaxRes\\n        );\\n\\n        _burnLpt(burnAmount);\\n    }\\n\\n    /// Move LPT from masterchef back to pool and withdraw funds\\n    function _burnLpt(uint256 burnAmount) internal {\\n        lyLptHolder.withdraw(burnAmount, address(pair));\\n        pair.burn(address(this));\\n\\n        wAvax.safeTransfer(mAvax, wAvax.balanceOf(address(this)));\\n        sAvax.safeTransfer(msAvax, sAvax.balanceOf(address(this)));\\n    }\\n\\n    /// Rescue stranded funds\\n    function rescueFunds(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwnerExec {\\n        IERC20(token).safeTransfer(recipient, amount);\\n    }\\n\\n    /// Set acceptable deviation from peg\\n    function setWindowPer10k(uint256 window) external onlyOwnerExec {\\n        require(10_000 >= window, \\\"Window out of bounds\\\");\\n        windowPer10k = window;\\n    }\\n\\n    /// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) * 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0290853bd15a185365c1ac422bc31a71184f42a726f46a101d7a9820fd717d7e\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title DependentContract.\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    /// @dev returns all characters played by this contract (e.g. stable coin, oracle registry)\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    /// @dev returns all roles played by this contract\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    /// @dev returns all the character dependencies like FEE_RECIPIENT\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    /// @dev returns all the roles dependencies of this contract like FUND_TRANSFERER\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xaea783afd230965aa519d2cc53f26a44f3f507b8d2089b8092c09caf35bd0d81\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnLiquidYield.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnLiquidYield is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(LIQUID_YIELD);\\n    }\\n\\n    function isLiquidYield(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUID_YIELD];\\n    }\\n}\\n\",\"keccak256\":\"0x35af50f870ce104f4ea02577ed978a12827b228e76298f97439f0e842cf96878\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    event SubjectUpdated(string param, address subject);\\n    event ParameterUpdated(string param, uint256 value);\\n    event SubjectParameterUpdated(string param, address subject, uint256 value);\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Roles: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or disabler\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or activator\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Updates the role cache for a specific role and address\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.roles(contr, role);\\n    }\\n\\n    /// @dev Updates the main character cache for a speciic character\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    /// @dev returns the owner's address\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    /// @dev returns the executor address\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    /// @dev returns the disabler address\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    /// @dev checks whether the passed address is activator or not\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.roles(contr, ACTIVATOR);\\n    }\\n}\\n\",\"keccak256\":\"0xeb75105e3789b321336a2f2e81a32ba0b8136809e9e7184629650a374b094871\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant TRANCHE_TRANSFERER = 5;\\nuint256 constant UNDERWATER_LIQUIDATOR = 6;\\nuint256 constant LIQUIDATION_PROTECTED = 7;\\nuint256 constant SMART_LIQUIDITY = 8;\\nuint256 constant LIQUID_YIELD = 9;\\n\\nuint256 constant PROTOCOL_TOKEN = 100;\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\nuint256 constant CURVE_POOL = 109;\\nuint256 constant ISOLATED_LENDING_LIQUIDATION = 110;\\nuint256 constant STABLE_LENDING = 111;\\nuint256 constant STABLE_LENDING_LIQUIDATION = 112;\\nuint256 constant SMART_LIQUIDITY_FACTORY =  113;\\nuint256 constant LIQUID_YIELD_HOLDER = 114;\\nuint256 constant LIQUID_YIELD_REBALANCER = 115;\\nuint256 constant LIQUID_YIELD_REDISTRIBUTOR_MAVAX = 116;\\nuint256 constant LIQUID_YIELD_REDISTRIBUTOR_MSAVAX = 117;\\n\\nuint256 constant DIRECT_LIQUIDATOR = 200;\\nuint256 constant LPT_LIQUIDATOR = 201;\\nuint256 constant DIRECT_STABLE_LIQUIDATOR = 202;\\nuint256 constant LPT_STABLE_LIQUIDATOR = 203;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev assign role to an account\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    /// @dev revoke role of a particular account\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    /// @dev set main character\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    /// @dev returns the current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0687ace0d7468af0b2f6fc960d553cab45cdcfd4e6a00b47f23df15f62ba2be\",\"license\":\"BUSL-1.1\"},\"contracts/smart-liquidity/AuxLPT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../MintableToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract AuxLPT is MintableToken {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 immutable public minterBurnerRole;\\n    constructor(\\n        uint256 _minterBurnerRole,\\n        string memory _name,\\n        string memory _symbol,\\n        address _roles\\n    ) MintableToken(_name, _symbol, type(uint256).max, _roles) {\\n        roleCache[msg.sender][_minterBurnerRole] = Roles(_roles).roles(\\n            msg.sender,\\n            _minterBurnerRole\\n        );\\n        minterBurnerRole = _minterBurnerRole;\\n    }\\n\\n    function isAuthorizedMinterBurner(address caller)\\n        internal\\n        override\\n        returns (bool)\\n    {\\n        if (roleCache[caller][minterBurnerRole]) {\\n            return true;\\n        } else {\\n            updateRoleCache(minterBurnerRole, caller);\\n            return roleCache[caller][minterBurnerRole];\\n        }\\n    }\\n\\n    function setApproval(address approvee, address token, uint256 amount) external {\\n        require(isAuthorizedMinterBurner(msg.sender) || owner() == msg.sender || executor() == msg.sender, \\\"Caller not authorized to set approval\\\");\\n        require(isAuthorizedMinterBurner(approvee), \\\"Approvee is not an authorized minter / burner\\\");\\n        IERC20(token).safeApprove(approvee, amount);\\n    }\\n\\n    function transferFunds(IERC20 token, address to, uint256 amount) external {\\n        require(isAuthorizedMinterBurner(msg.sender) || owner() == msg.sender || executor() == msg.sender, \\\"Caller not authorized to set approval\\\");\\n        token.safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1de9a5f115a9dcce2a7aa918b99345235f9c3e7f65e6dbe5c6af2a3b41b1e10d\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IMasterChefJoeV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChefJoeV3 {\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that JOE distribution occurs.\\n        uint256 accJoePerShare; // Accumulated JOE per share, times 1e12. See below.\\n    }\\n\\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\n    function poolLength() external view returns (uint256 pools);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function joePerSec() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userInfo(uint256 pid, address user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xf73dfd88042daa9df498104894cb1589924f1f7a823d3ab935ca61fbe8c441a7\",\"license\":\"MIT\"},\"interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\npragma solidity ^0.8.0;\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x3241bbccd1c11cffc9673939e0be9b5e8e1c019b86dc87f18b146b5889a1a2e2\",\"license\":\"BUSL-1.1\"},\"interfaces/IsAvax.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IsAvax is IERC20 {\\n  function DEFAULT_ADMIN_ROLE (  ) external view returns ( bytes32 );\\n  function ROLE_ACCRUE_REWARDS (  ) external view returns ( bytes32 );\\n  function ROLE_DEPOSIT (  ) external view returns ( bytes32 );\\n  function ROLE_PAUSE (  ) external view returns ( bytes32 );\\n  function ROLE_PAUSE_MINTING (  ) external view returns ( bytes32 );\\n  function ROLE_RESUME (  ) external view returns ( bytes32 );\\n  function ROLE_RESUME_MINTING (  ) external view returns ( bytes32 );\\n  function ROLE_SET_TOTAL_POOLED_AVAX_CAP (  ) external view returns ( bytes32 );\\n  function ROLE_WITHDRAW (  ) external view returns ( bytes32 );\\n  function accrueRewards ( uint256 amount ) external;\\n  function cancelPendingUnlockRequests (  ) external;\\n  function cancelRedeemableUnlockRequests (  ) external;\\n  function cancelUnlockRequest ( uint256 unlockIndex ) external;\\n  function cooldownPeriod (  ) external view returns ( uint256 );\\n  function decimals (  ) external pure returns ( uint8 );\\n  function deposit (  ) external;\\n//   function getPaginatedUnlockRequests ( address user, uint256 from, uint256 to ) external view returns ( tuple[] memory, uint256[] memory );\\n  function getPooledAvaxByShares ( uint256 shareAmount ) external view returns ( uint256 );\\n  function getRoleAdmin ( bytes32 role ) external view returns ( bytes32 );\\n  function getRoleMember ( bytes32 role, uint256 index ) external view returns ( address );\\n  function getRoleMemberCount ( bytes32 role ) external view returns ( uint256 );\\n  function getSharesByPooledAvax ( uint256 avaxAmount ) external view returns ( uint256 );\\n  function getUnlockRequestCount ( address user ) external view returns ( uint256 );\\n  function grantRole ( bytes32 role, address account ) external;\\n  function hasRole ( bytes32 role, address account ) external view returns ( bool );\\n  function historicalExchangeRateTimestamps ( uint256 ) external view returns ( uint256 );\\n  function historicalExchangeRatesByTimestamp ( uint256 ) external view returns ( uint256 );\\n  function initialize ( uint256 _cooldownPeriod, uint256 _redeemPeriod ) external;\\n  function mintingPaused (  ) external view returns ( bool );\\n  function name (  ) external pure returns ( string memory );\\n  function pause (  ) external;\\n  function pauseMinting (  ) external;\\n  function paused (  ) external view returns ( bool );\\n  function redeem (  ) external;\\n  function redeem ( uint256 unlockIndex ) external;\\n  function redeemOverdueShares (  ) external;\\n  function redeemOverdueShares ( uint256 unlockIndex ) external;\\n  function redeemPeriod (  ) external view returns ( uint256 );\\n  function renounceRole ( bytes32 role, address account ) external;\\n  function requestUnlock ( uint256 shareAmount ) external;\\n  function resume (  ) external;\\n  function resumeMinting (  ) external;\\n  function revokeRole ( bytes32 role, address account ) external;\\n  function setCooldownPeriod ( uint256 newCooldownPeriod ) external;\\n  function setRedeemPeriod ( uint256 newRedeemPeriod ) external;\\n  function setTotalPooledAvaxCap ( uint256 newTotalPooledAvaxCap ) external;\\n  function stakerCount (  ) external view returns ( uint256 );\\n  function submit (  ) external returns ( uint256 );\\n  function symbol (  ) external pure returns ( string memory );\\n  function totalPooledAvax (  ) external view returns ( uint256 );\\n  function totalPooledAvaxCap (  ) external view returns ( uint256 );\\n  function totalShares (  ) external view returns ( uint256 );\\n  function userSharesInCustody ( address ) external view returns ( uint256 );\\n  function userUnlockRequests ( address, uint256 ) external view returns ( uint256 startedAt, uint256 shareAmount );\\n  function withdraw ( uint256 amount ) external;\\n}\",\"keccak256\":\"0xf8fc7c7baac1887154850055ed376c816d509bdc7d19964a1ba535216030c6d5\"}},\"version\":1}",
  "bytecode": "0x60e06040526028600755610bb86008553480156200001c57600080fd5b5060405162003829380380620038298339810160408190526200003f9162000175565b806001600160a01b038116620000a65760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b606090811b6001600160601b031990811660805294811b851660a0529290921b90921660c05250600680546001600160a01b0319166001600160a01b0390921691909117905560058054600181810190925560097f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db09091015560048054918201815560005260737f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910155620001d1565b80516001600160a01b03811681146200017057600080fd5b919050565b600080600080608085870312156200018b578384fd5b620001968562000158565b9350620001a66020860162000158565b9250620001b66040860162000158565b9150620001c66060860162000158565b905092959194509250565b60805160601c60a05160601c60c05160601c6135236200030660003960008181610486015281816105fb0152818161063f0152818161094401528181610abc01528181610e1b01528181610eb001528181610f5a015281816113f001528181611438015281816115760152818161160b015281816116b001528181611a4e01528181611c8901528181611de7015281816122470152818161253a0152612e8e01526000818161043001528181610786015281816107ca0152818161089d01528181610a20015281816110de015281816111730152818161121d01528181611af501528181611e9c01528181612034015281816121920152818161247d0152612ee501526000818161028e015281816106c101528181610c5d015281816117ea0152818161188201526128c001526135236000f3fe6080604052600436106101825760003560e01c806301b59cd21461018b578063071060a6146101ab57806323194fda146101cb5780632396242014610203578063262c1e741461022357806331eeec11146102475780633574758914610267578063392f5f641461027c5780633d05f2c3146102b0578063447d52ba146102d25780634a7a7f41146102f257806369c8d338146103145780636caa9c11146103295780636ccae054146103495780637a1a04df146103695780637bd176e5146103b45780637dad209b146103d45780637fa725b6146103e957806386a57046146104095780638d373e651461041e578063a8aa1b3114610452578063ab926ef314610474578063abcbc4fc146104a8578063aeb38d8b146104c8578063b9dcfb1c146104e8578063bf184ea4146104f0578063cc4efafe14610510578063cc86e7c314610526578063dc94cb7d14610546578063e8ea4fae1461055b578063e9c3f77d14610570578063e9d97a0f146105a6578063f2f42220146105c657610189565b3661018957005b005b34801561019757600080fd5b506101896101a63660046131a2565b6105e6565b3480156101b757600080fd5b506101896101c63660046131a2565b6106ab565b3480156101d757600080fd5b506101ed6000805160206134ce83398151915281565b6040516101fa9190613240565b60405180910390f35b34801561020f57600080fd5b5061018961021e3660046131a2565b610771565b34801561022f57600080fd5b5061023960085481565b6040519081526020016101fa565b34801561025357600080fd5b506101896102623660046131a2565b610801565b34801561027357600080fd5b50610189610858565b34801561028857600080fd5b506101ed7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102bc57600080fd5b506101ed6000805160206134ae83398151915281565b3480156102de57600080fd5b506101896102ed3660046131d2565b610c46565b3480156102fe57600080fd5b50610307610d1c565b6040516101fa9190613291565b34801561032057600080fd5b50610189610d74565b34801561033557600080fd5b506102396103443660046131a2565b610d86565b34801561035557600080fd5b506101896103643660046130c9565b610da7565b34801561037557600080fd5b506103a4610384366004613109565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101fa565b3480156103c057600080fd5b506101896103cf3660046131d2565b610e04565b3480156103e057600080fd5b50610307611071565b3480156103f557600080fd5b506101896104043660046131d2565b6110c7565b34801561041557600080fd5b5061018961129e565b34801561042a57600080fd5b506101ed7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045e57600080fd5b506101ed60008051602061348e83398151915281565b34801561048057600080fd5b506101ed7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b457600080fd5b506102396104c33660046131a2565b61135a565b3480156104d457600080fd5b506102396104e33660046131a2565b61136a565b61018961137a565b3480156104fc57600080fd5b5061023961050b3660046131a2565b6114a3565b34801561051c57600080fd5b5061023960075481565b34801561053257600080fd5b506006546101ed906001600160a01b031681565b34801561055257600080fd5b506103076114b3565b34801561056757600080fd5b50610307611509565b34801561057c57600080fd5b506101ed61058b3660046131a2565b6000602081905290815260409020546001600160a01b031681565b3480156105b257600080fd5b506101896105c13660046131d2565b61155f565b3480156105d257600080fd5b506101896105e13660046131a2565b6116f7565b6106206000805160206134ce833981519152337f00000000000000000000000000000000000000000000000000000000000000008461178e565b610628610858565b6040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906106769033908590600401613278565b600060405180830381600087803b15801561069057600080fd5b505af11580156106a4573d6000803e3d6000fd5b5050505050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074391906130ad565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6107ab6000805160206134ae833981519152337f00000000000000000000000000000000000000000000000000000000000000008461178e565b6107b3610858565b6040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906106769033908590600401613278565b3361080a6117e6565b6001600160a01b0316148061082e57503361082361187e565b6001600160a01b0316145b6108535760405162461bcd60e51b815260040161084a90613336565b60405180910390fd5b600855565b60008060006108656118ef565b9250925092508215610c41576040516370a0823160e01b81526000906000805160206134ae833981519152906370a08231906108c5907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b1580156108dd57600080fd5b505afa1580156108f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091591906131ba565b6040516370a0823160e01b81529091506000906000805160206134ce833981519152906370a082319061096c907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc91906131ba565b90506000821180156109ce5750600081115b156106a45760006109f383856109e48886613400565b6109ee91906133e0565b6122d3565b90506000610a0683876109e48888613400565b604051631501bf0360e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390610a75906000805160206134ae8339815191529060008051602061348e833981519152908790600401613254565b600060405180830381600087803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b5050604051631501bf0360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250631501bf039150610b13906000805160206134ce8339815191529060008051602061348e833981519152908690600401613254565b600060405180830381600087803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b50506006546040516335313c2160e11b815260008051602061348e8339815191529350636a6278429250610b81916001600160a01b031690600401613240565b602060405180830381600087803b158015610b9b57600080fd5b505af1158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd391906131ba565b50600660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c2457600080fd5b505af1158015610c38573d6000803e3d6000fd5b50505050505050505b505050565b60405163f0723d9760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d9790610c949084908690600401613278565b60206040518083038186803b158015610cac57600080fd5b505afa158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce49190613134565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b60606003805480602002602001604051908101604052809291908181526020018280548015610d6a57602002820191906000526020600020905b815481526020019060010190808311610d56575b5050505050905090565b610d7c6122ec565b610d84610858565b565b60058181548110610d9657600080fd5b600091825260209091200154905081565b33610db06117e6565b6001600160a01b03161480610dd4575033610dc961187e565b6001600160a01b0316145b610df05760405162461bcd60e51b815260040161084a90613336565b610c416001600160a01b03841683836125e0565b604051632770a7eb60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90610e529033908690600401613278565b600060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506000805160206134ce83398151915291506370a0823190610ed8907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b158015610ef057600080fd5b505afa158015610f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2891906131ba565b9050808310610f4357610f43610f3e828561341f565b6125ff565b604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390610fa1906000805160206134ce8339815191529030908890600401613254565b600060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b8152600481018690526000805160206134ce8339815191529250632e1a7d4d9150602401600060405180830381600087803b15801561101a57600080fd5b505af115801561102e573d6000803e3d6000fd5b50506040516001600160a01b038516925085156108fc02915085906000818181858888f19350505050158015611068573d6000803e3d6000fd5b50610c41610858565b60606004805480602002602001604051908101604052809291908181526020018280548015610d6a5760200282019190600052602060002090815481526020019060010190808311610d56575050505050905090565b604051632770a7eb60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906111159033908690600401613278565b600060405180830381600087803b15801561112f57600080fd5b505af1158015611143573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506000805160206134ae83398151915291506370a082319061119b907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b1580156111b357600080fd5b505afa1580156111c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111eb91906131ba565b905080831061120657611206611201828561341f565b6127cf565b604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390611264906000805160206134ae8339815191529086908890600401613254565b600060405180830381600087803b15801561127e57600080fd5b505af1158015611292573d6000803e3d6000fd5b50505050610c41610858565b336112a76117e6565b6001600160a01b031614806112cb5750336112c061187e565b6001600160a01b0316145b806112e55750336112da6128a6565b6001600160a01b0316145b6113525760405162461bcd60e51b815260206004820152603860248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f604482015277391037b91030baba3437b934bd32b2103234b9b0b13632b960411b606482015260840161084a565b610d846122ec565b60028181548110610d9657600080fd5b60048181548110610d9657600080fd5b6000805160206134ce8339815191526001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b5061141993506000805160206134ce83398151915292507f000000000000000000000000000000000000000000000000000000000000000091503490506125e0565b611421610858565b6040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f199061146f9033903490600401613278565b600060405180830381600087803b15801561148957600080fd5b505af115801561149d573d6000803e3d6000fd5b50505050565b60038181548110610d9657600080fd5b60606002805480602002602001604051908101604052809291908181526020018280548015610d6a5760200282019190600052602060002090815481526020019060010190808311610d56575050505050905090565b60606005805480602002602001604051908101604052809291908181526020018280548015610d6a5760200282019190600052602060002090815481526020019060010190808311610d56575050505050905090565b604051632770a7eb60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906115ad9033908690600401613278565b600060405180830381600087803b1580156115c757600080fd5b505af11580156115db573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506000805160206134ce83398151915291506370a0823190611633907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b15801561164b57600080fd5b505afa15801561165f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168391906131ba565b905080831061169957611699610f3e828561341f565b604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390611264906000805160206134ce8339815191529086908890600401613254565b336117006117e6565b6001600160a01b0316148061172457503361171961187e565b6001600160a01b0316145b6117405760405162461bcd60e51b815260040161084a90613336565b8061271010156117895760405162461bcd60e51b815260206004820152601460248201527357696e646f77206f7574206f6620626f756e647360601b604482015260640161084a565b600755565b61149d846323b872dd60e01b8585856040516024016117af93929190613254565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261290a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187991906130ad565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118db57600080fd5b505af1158015611855573d6000803e3d6000fd5b600080600080600060008051602061348e8339815191526001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190613154565b50604051634a36d6c160e01b81526001600160701b03928316600482018190529450911691506000906000805160206134ae83398151915290634a36d6c19060240160206040518083038186803b1580156119d057600080fd5b505afa1580156119e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0891906131ba565b9050600080611a1f611a1a8585613400565b6129dc565b6040516370a0823160e01b81529091506000906000805160206134ce833981519152906370a0823190611a76907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b158015611a8e57600080fd5b505afa158015611aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac691906131ba565b6040516370a0823160e01b81529091506000906000805160206134ae833981519152906370a0823190611b1d907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b158015611b3557600080fd5b505afa158015611b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6d91906131ba565b9050856127106007546002611b829190613400565b611b8e9061271061341f565b611b989086613400565b611ba291906133e0565b1115611f1c576000866103e8600754612710611bbe919061341f565b611bc89087613400565b611bd291906133e0565b611bdc919061341f565b90506000611beb82898b612bc3565b9050818410158015611c7a5750604051634a36d6c160e01b81526004810182905282906000805160206134ae83398151915290634a36d6c19060240160206040518083038186803b158015611c3f57600080fd5b505afa158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7791906131ba565b10155b8015611dcb57506127106008547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ce057600080fd5b505afa158015611cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1891906131ba565b611d229190613400565b611d2c91906133e0565b8285600660009054906101000a90046001600160a01b03166001600160a01b03166385f8db106040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7c57600080fd5b505afa158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db491906131ba565b611dbe91906133c8565b611dc8919061341f565b10155b15611f1557604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390611e3c906000805160206134ce8339815191529060008051602061348e833981519152908790600401613254565b600060405180830381600087803b158015611e5657600080fd5b505af1158015611e6a573d6000803e3d6000fd5b505060405163022c0d9f60e01b815260008051602061348e833981519152925063022c0d9f9150611ec49084906000907f0000000000000000000000000000000000000000000000000000000000000000906004016132d5565b600060405180830381600087803b158015611ede57600080fd5b505af1158015611ef2573d6000803e3d6000fd5b50505050600195508089611f06919061341f565b9850611f1282896133c8565b97505b50506122c2565b826127106007546002611f2f9190613400565b611f3b9061271061341f565b611f459089613400565b611f4f91906133e0565b11156122bd5760006103e8600754612710611f6a91906133c8565b611f749086613400565b611f7e91906133e0565b611f88908861341f565b90506000611f97828a8a612ca2565b90508083101580156120255750604051634a36d6c160e01b8152600481018290526000805160206134ae83398151915290634a36d6c19060240160206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202191906131ba565b8210155b801561217657506127106008547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561208b57600080fd5b505afa15801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c391906131ba565b6120cd9190613400565b6120d791906133e0565b8184600660009054906101000a90046001600160a01b03166001600160a01b03166385f8db106040518163ffffffff1660e01b815260040160206040518083038186803b15801561212757600080fd5b505afa15801561213b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215f91906131ba565b61216991906133c8565b612173919061341f565b10155b15611f1557604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf03906121e7906000805160206134ae8339815191529060008051602061348e833981519152908690600401613254565b600060405180830381600087803b15801561220157600080fd5b505af1158015612215573d6000803e3d6000fd5b505060405163022c0d9f60e01b815260008051602061348e833981519152925063022c0d9f915061226f9060009086907f0000000000000000000000000000000000000000000000000000000000000000906004016132d5565b600060405180830381600087803b15801561228957600080fd5b505af115801561229d573d6000803e3d6000fd5b505050506001955080896122b191906133c8565b9850611f12828961341f565b600193505b509198949750929550929350505050565b60008183106122e35750806122e6565b50815b92915050565b600654604051630fa09e6360e41b81526001600160a01b039091169063fa09e6309061232a9060008051602061348e83398151915290600401613240565b600060405180830381600087803b15801561234457600080fd5b505af1158015612358573d6000803e3d6000fd5b50506040516370a0823160e01b81526000925060008051602061348e83398151915291506370a0823190612390908390600401613240565b60206040518083038186803b1580156123a857600080fd5b505afa1580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e091906131ba565b1115610d845760405163226bf2d160e21b815260008051602061348e833981519152906389afcb4490612417903090600401613240565b6040805180830381600087803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124689190613201565b50506040516370a0823160e01b8152612527907f0000000000000000000000000000000000000000000000000000000000000000906000805160206134ae833981519152906370a08231906124c1903090600401613240565b60206040518083038186803b1580156124d957600080fd5b505afa1580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251191906131ba565b6000805160206134ae83398151915291906125e0565b6040516370a0823160e01b8152610d84907f0000000000000000000000000000000000000000000000000000000000000000906000805160206134ce833981519152906370a082319061257e903090600401613240565b60206040518083038186803b15801561259657600080fd5b505afa1580156125aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ce91906131ba565b6000805160206134ce83398151915291905b610c418363a9059cbb60e01b84846040516024016117af929190613278565b600060008051602061348e8339815191526001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561264857600080fd5b505afa15801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190613154565b506001600160701b0316915050600060008051602061348e8339815191526001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270e91906131ba565b90506000600660009054906101000a90046001600160a01b03166001600160a01b03166385f8db106040518163ffffffff1660e01b815260040160206040518083038186803b15801561276057600080fd5b505afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279891906131ba565b905060006127c482856127ab8887613400565b6127b591906133e0565b6109ee906402540be4006133c8565b90506106a481612d87565b600060008051602061348e8339815191526001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561281857600080fd5b505afa15801561282c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128509190613154565b50506001600160701b03169050600060008051602061348e8339815191526001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126d657600080fd5b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561184157600080fd5b600061295f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f2c9092919063ffffffff16565b805190915015610c41578080602001905181019061297d9190613134565b610c415760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161084a565b6000816129eb57506000612bbe565b50600181600160801b8110612a055760409190911b9060801c5b600160401b8110612a1b5760209190911b9060401c5b600160201b8110612a315760109190911b9060201c5b620100008110612a465760089190911b9060101c5b6101008110612a5a5760049190911b9060081c5b60108110612a6d5760029190911b9060041c5b60088110612a7d57600182901b91505b6001828481612a9c57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612ac257634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612ae857634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612b0e57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612b3457634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612b5a57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612b8057634e487b7160e01b600052601260045260246000fd5b048301901c91506000828481612ba657634e487b7160e01b600052601260045260246000fd5b04905080831015612bb75782612bb9565b805b925050505b919050565b6000808411612c285760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b606482015260840161084a565b600083118015612c385750600082115b612c545760405162461bcd60e51b815260040161084a90613380565b6000612c62856103e5613400565b90506000612c708483613400565b9050600082612c81876103e8613400565b612c8b91906133c8565b9050612c9781836133e0565b979650505050505050565b6000808411612d085760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b606482015260840161084a565b600083118015612d185750600082115b612d345760405162461bcd60e51b815260040161084a90613380565b6000612d408585613400565b612d4c906103e8613400565b90506000612d5a868561341f565b612d66906103e5613400565b9050612d7281836133e0565b612d7d9060016133c8565b9695505050505050565b600654604051627b8a6760e11b81526004810183905260008051602061348e83398151915260248201526001600160a01b039091169062f714ce90604401600060405180830381600087803b158015612ddf57600080fd5b505af1158015612df3573d6000803e3d6000fd5b505060405163226bf2d160e21b815260008051602061348e83398151915292506389afcb449150612e28903090600401613240565b6040805180830381600087803b158015612e4157600080fd5b505af1158015612e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e799190613201565b50506040516370a0823160e01b8152612ed2907f0000000000000000000000000000000000000000000000000000000000000000906000805160206134ce833981519152906370a082319061257e903090600401613240565b6040516370a0823160e01b8152612f29907f0000000000000000000000000000000000000000000000000000000000000000906000805160206134ae833981519152906370a08231906124c1903090600401613240565b50565b6060612f3b8484600085612f45565b90505b9392505050565b606082471015612fa65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161084a565b843b612ff45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161084a565b600080866001600160a01b031685876040516130109190613224565b60006040518083038185875af1925050503d806000811461304d576040519150601f19603f3d011682016040523d82523d6000602084013e613052565b606091505b5091509150612c978282866060831561306c575081612f3e565b82511561307c5782518084602001fd5b8160405162461bcd60e51b815260040161084a9190613303565b80516001600160701b0381168114612bbe57600080fd5b6000602082840312156130be578081fd5b8151612f3e81613478565b6000806000606084860312156130dd578182fd5b83356130e881613478565b925060208401356130f881613478565b929592945050506040919091013590565b6000806040838503121561311b578182fd5b823561312681613478565b946020939093013593505050565b600060208284031215613145578081fd5b81518015158114612f3e578182fd5b600080600060608486031215613168578283fd5b61317184613096565b925061317f60208501613096565b9150604084015163ffffffff81168114613197578182fd5b809150509250925092565b6000602082840312156131b3578081fd5b5035919050565b6000602082840312156131cb578081fd5b5051919050565b600080604083850312156131e4578182fd5b8235915060208301356131f681613478565b809150509250929050565b60008060408385031215613213578182fd5b505080516020909101519092909150565b60008251613236818460208701613436565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156132c9578351835292840192918401916001016132ad565b50909695505050505050565b92835260208301919091526001600160a01b0316604082015260806060820181905260009082015260a00190565b6000602082528251806020840152613322816040850160208701613436565b601f01601f19169190910160400192915050565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b600082198211156133db576133db613462565b500190565b6000826133fb57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561341a5761341a613462565b500290565b60008282101561343157613431613462565b500390565b60005b83811015613451578181015183820152602001613439565b8381111561149d5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612f2957600080fdfe0000000000000000000000004b946c91c2b1a7d7c40fb3c130cdfbaf8389094d0000000000000000000000002b2c81e08f1af8835a78bb2a90ae924ace0ea4be000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c7a26469706673582212203ae1ad75d94c435734bc0258eb6ec08eb52c62df2323b183883f3e8c186fb17364736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101825760003560e01c806301b59cd21461018b578063071060a6146101ab57806323194fda146101cb5780632396242014610203578063262c1e741461022357806331eeec11146102475780633574758914610267578063392f5f641461027c5780633d05f2c3146102b0578063447d52ba146102d25780634a7a7f41146102f257806369c8d338146103145780636caa9c11146103295780636ccae054146103495780637a1a04df146103695780637bd176e5146103b45780637dad209b146103d45780637fa725b6146103e957806386a57046146104095780638d373e651461041e578063a8aa1b3114610452578063ab926ef314610474578063abcbc4fc146104a8578063aeb38d8b146104c8578063b9dcfb1c146104e8578063bf184ea4146104f0578063cc4efafe14610510578063cc86e7c314610526578063dc94cb7d14610546578063e8ea4fae1461055b578063e9c3f77d14610570578063e9d97a0f146105a6578063f2f42220146105c657610189565b3661018957005b005b34801561019757600080fd5b506101896101a63660046131a2565b6105e6565b3480156101b757600080fd5b506101896101c63660046131a2565b6106ab565b3480156101d757600080fd5b506101ed6000805160206134ce83398151915281565b6040516101fa9190613240565b60405180910390f35b34801561020f57600080fd5b5061018961021e3660046131a2565b610771565b34801561022f57600080fd5b5061023960085481565b6040519081526020016101fa565b34801561025357600080fd5b506101896102623660046131a2565b610801565b34801561027357600080fd5b50610189610858565b34801561028857600080fd5b506101ed7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102bc57600080fd5b506101ed6000805160206134ae83398151915281565b3480156102de57600080fd5b506101896102ed3660046131d2565b610c46565b3480156102fe57600080fd5b50610307610d1c565b6040516101fa9190613291565b34801561032057600080fd5b50610189610d74565b34801561033557600080fd5b506102396103443660046131a2565b610d86565b34801561035557600080fd5b506101896103643660046130c9565b610da7565b34801561037557600080fd5b506103a4610384366004613109565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101fa565b3480156103c057600080fd5b506101896103cf3660046131d2565b610e04565b3480156103e057600080fd5b50610307611071565b3480156103f557600080fd5b506101896104043660046131d2565b6110c7565b34801561041557600080fd5b5061018961129e565b34801561042a57600080fd5b506101ed7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045e57600080fd5b506101ed60008051602061348e83398151915281565b34801561048057600080fd5b506101ed7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b457600080fd5b506102396104c33660046131a2565b61135a565b3480156104d457600080fd5b506102396104e33660046131a2565b61136a565b61018961137a565b3480156104fc57600080fd5b5061023961050b3660046131a2565b6114a3565b34801561051c57600080fd5b5061023960075481565b34801561053257600080fd5b506006546101ed906001600160a01b031681565b34801561055257600080fd5b506103076114b3565b34801561056757600080fd5b50610307611509565b34801561057c57600080fd5b506101ed61058b3660046131a2565b6000602081905290815260409020546001600160a01b031681565b3480156105b257600080fd5b506101896105c13660046131d2565b61155f565b3480156105d257600080fd5b506101896105e13660046131a2565b6116f7565b6106206000805160206134ce833981519152337f00000000000000000000000000000000000000000000000000000000000000008461178e565b610628610858565b6040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906106769033908590600401613278565b600060405180830381600087803b15801561069057600080fd5b505af11580156106a4573d6000803e3d6000fd5b5050505050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074391906130ad565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6107ab6000805160206134ae833981519152337f00000000000000000000000000000000000000000000000000000000000000008461178e565b6107b3610858565b6040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906106769033908590600401613278565b3361080a6117e6565b6001600160a01b0316148061082e57503361082361187e565b6001600160a01b0316145b6108535760405162461bcd60e51b815260040161084a90613336565b60405180910390fd5b600855565b60008060006108656118ef565b9250925092508215610c41576040516370a0823160e01b81526000906000805160206134ae833981519152906370a08231906108c5907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b1580156108dd57600080fd5b505afa1580156108f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091591906131ba565b6040516370a0823160e01b81529091506000906000805160206134ce833981519152906370a082319061096c907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc91906131ba565b90506000821180156109ce5750600081115b156106a45760006109f383856109e48886613400565b6109ee91906133e0565b6122d3565b90506000610a0683876109e48888613400565b604051631501bf0360e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390610a75906000805160206134ae8339815191529060008051602061348e833981519152908790600401613254565b600060405180830381600087803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b5050604051631501bf0360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250631501bf039150610b13906000805160206134ce8339815191529060008051602061348e833981519152908690600401613254565b600060405180830381600087803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b50506006546040516335313c2160e11b815260008051602061348e8339815191529350636a6278429250610b81916001600160a01b031690600401613240565b602060405180830381600087803b158015610b9b57600080fd5b505af1158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd391906131ba565b50600660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c2457600080fd5b505af1158015610c38573d6000803e3d6000fd5b50505050505050505b505050565b60405163f0723d9760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d9790610c949084908690600401613278565b60206040518083038186803b158015610cac57600080fd5b505afa158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce49190613134565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b60606003805480602002602001604051908101604052809291908181526020018280548015610d6a57602002820191906000526020600020905b815481526020019060010190808311610d56575b5050505050905090565b610d7c6122ec565b610d84610858565b565b60058181548110610d9657600080fd5b600091825260209091200154905081565b33610db06117e6565b6001600160a01b03161480610dd4575033610dc961187e565b6001600160a01b0316145b610df05760405162461bcd60e51b815260040161084a90613336565b610c416001600160a01b03841683836125e0565b604051632770a7eb60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90610e529033908690600401613278565b600060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506000805160206134ce83398151915291506370a0823190610ed8907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b158015610ef057600080fd5b505afa158015610f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2891906131ba565b9050808310610f4357610f43610f3e828561341f565b6125ff565b604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390610fa1906000805160206134ce8339815191529030908890600401613254565b600060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b8152600481018690526000805160206134ce8339815191529250632e1a7d4d9150602401600060405180830381600087803b15801561101a57600080fd5b505af115801561102e573d6000803e3d6000fd5b50506040516001600160a01b038516925085156108fc02915085906000818181858888f19350505050158015611068573d6000803e3d6000fd5b50610c41610858565b60606004805480602002602001604051908101604052809291908181526020018280548015610d6a5760200282019190600052602060002090815481526020019060010190808311610d56575050505050905090565b604051632770a7eb60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906111159033908690600401613278565b600060405180830381600087803b15801561112f57600080fd5b505af1158015611143573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506000805160206134ae83398151915291506370a082319061119b907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b1580156111b357600080fd5b505afa1580156111c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111eb91906131ba565b905080831061120657611206611201828561341f565b6127cf565b604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390611264906000805160206134ae8339815191529086908890600401613254565b600060405180830381600087803b15801561127e57600080fd5b505af1158015611292573d6000803e3d6000fd5b50505050610c41610858565b336112a76117e6565b6001600160a01b031614806112cb5750336112c061187e565b6001600160a01b0316145b806112e55750336112da6128a6565b6001600160a01b0316145b6113525760405162461bcd60e51b815260206004820152603860248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f604482015277391037b91030baba3437b934bd32b2103234b9b0b13632b960411b606482015260840161084a565b610d846122ec565b60028181548110610d9657600080fd5b60048181548110610d9657600080fd5b6000805160206134ce8339815191526001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b5061141993506000805160206134ce83398151915292507f000000000000000000000000000000000000000000000000000000000000000091503490506125e0565b611421610858565b6040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f199061146f9033903490600401613278565b600060405180830381600087803b15801561148957600080fd5b505af115801561149d573d6000803e3d6000fd5b50505050565b60038181548110610d9657600080fd5b60606002805480602002602001604051908101604052809291908181526020018280548015610d6a5760200282019190600052602060002090815481526020019060010190808311610d56575050505050905090565b60606005805480602002602001604051908101604052809291908181526020018280548015610d6a5760200282019190600052602060002090815481526020019060010190808311610d56575050505050905090565b604051632770a7eb60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906115ad9033908690600401613278565b600060405180830381600087803b1580156115c757600080fd5b505af11580156115db573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506000805160206134ce83398151915291506370a0823190611633907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b15801561164b57600080fd5b505afa15801561165f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168391906131ba565b905080831061169957611699610f3e828561341f565b604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390611264906000805160206134ce8339815191529086908890600401613254565b336117006117e6565b6001600160a01b0316148061172457503361171961187e565b6001600160a01b0316145b6117405760405162461bcd60e51b815260040161084a90613336565b8061271010156117895760405162461bcd60e51b815260206004820152601460248201527357696e646f77206f7574206f6620626f756e647360601b604482015260640161084a565b600755565b61149d846323b872dd60e01b8585856040516024016117af93929190613254565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261290a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187991906130ad565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118db57600080fd5b505af1158015611855573d6000803e3d6000fd5b600080600080600060008051602061348e8339815191526001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190613154565b50604051634a36d6c160e01b81526001600160701b03928316600482018190529450911691506000906000805160206134ae83398151915290634a36d6c19060240160206040518083038186803b1580156119d057600080fd5b505afa1580156119e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0891906131ba565b9050600080611a1f611a1a8585613400565b6129dc565b6040516370a0823160e01b81529091506000906000805160206134ce833981519152906370a0823190611a76907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b158015611a8e57600080fd5b505afa158015611aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac691906131ba565b6040516370a0823160e01b81529091506000906000805160206134ae833981519152906370a0823190611b1d907f000000000000000000000000000000000000000000000000000000000000000090600401613240565b60206040518083038186803b158015611b3557600080fd5b505afa158015611b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6d91906131ba565b9050856127106007546002611b829190613400565b611b8e9061271061341f565b611b989086613400565b611ba291906133e0565b1115611f1c576000866103e8600754612710611bbe919061341f565b611bc89087613400565b611bd291906133e0565b611bdc919061341f565b90506000611beb82898b612bc3565b9050818410158015611c7a5750604051634a36d6c160e01b81526004810182905282906000805160206134ae83398151915290634a36d6c19060240160206040518083038186803b158015611c3f57600080fd5b505afa158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7791906131ba565b10155b8015611dcb57506127106008547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ce057600080fd5b505afa158015611cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1891906131ba565b611d229190613400565b611d2c91906133e0565b8285600660009054906101000a90046001600160a01b03166001600160a01b03166385f8db106040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7c57600080fd5b505afa158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db491906131ba565b611dbe91906133c8565b611dc8919061341f565b10155b15611f1557604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf0390611e3c906000805160206134ce8339815191529060008051602061348e833981519152908790600401613254565b600060405180830381600087803b158015611e5657600080fd5b505af1158015611e6a573d6000803e3d6000fd5b505060405163022c0d9f60e01b815260008051602061348e833981519152925063022c0d9f9150611ec49084906000907f0000000000000000000000000000000000000000000000000000000000000000906004016132d5565b600060405180830381600087803b158015611ede57600080fd5b505af1158015611ef2573d6000803e3d6000fd5b50505050600195508089611f06919061341f565b9850611f1282896133c8565b97505b50506122c2565b826127106007546002611f2f9190613400565b611f3b9061271061341f565b611f459089613400565b611f4f91906133e0565b11156122bd5760006103e8600754612710611f6a91906133c8565b611f749086613400565b611f7e91906133e0565b611f88908861341f565b90506000611f97828a8a612ca2565b90508083101580156120255750604051634a36d6c160e01b8152600481018290526000805160206134ae83398151915290634a36d6c19060240160206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202191906131ba565b8210155b801561217657506127106008547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561208b57600080fd5b505afa15801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c391906131ba565b6120cd9190613400565b6120d791906133e0565b8184600660009054906101000a90046001600160a01b03166001600160a01b03166385f8db106040518163ffffffff1660e01b815260040160206040518083038186803b15801561212757600080fd5b505afa15801561213b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215f91906131ba565b61216991906133c8565b612173919061341f565b10155b15611f1557604051631501bf0360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631501bf03906121e7906000805160206134ae8339815191529060008051602061348e833981519152908690600401613254565b600060405180830381600087803b15801561220157600080fd5b505af1158015612215573d6000803e3d6000fd5b505060405163022c0d9f60e01b815260008051602061348e833981519152925063022c0d9f915061226f9060009086907f0000000000000000000000000000000000000000000000000000000000000000906004016132d5565b600060405180830381600087803b15801561228957600080fd5b505af115801561229d573d6000803e3d6000fd5b505050506001955080896122b191906133c8565b9850611f12828961341f565b600193505b509198949750929550929350505050565b60008183106122e35750806122e6565b50815b92915050565b600654604051630fa09e6360e41b81526001600160a01b039091169063fa09e6309061232a9060008051602061348e83398151915290600401613240565b600060405180830381600087803b15801561234457600080fd5b505af1158015612358573d6000803e3d6000fd5b50506040516370a0823160e01b81526000925060008051602061348e83398151915291506370a0823190612390908390600401613240565b60206040518083038186803b1580156123a857600080fd5b505afa1580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e091906131ba565b1115610d845760405163226bf2d160e21b815260008051602061348e833981519152906389afcb4490612417903090600401613240565b6040805180830381600087803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124689190613201565b50506040516370a0823160e01b8152612527907f0000000000000000000000000000000000000000000000000000000000000000906000805160206134ae833981519152906370a08231906124c1903090600401613240565b60206040518083038186803b1580156124d957600080fd5b505afa1580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251191906131ba565b6000805160206134ae83398151915291906125e0565b6040516370a0823160e01b8152610d84907f0000000000000000000000000000000000000000000000000000000000000000906000805160206134ce833981519152906370a082319061257e903090600401613240565b60206040518083038186803b15801561259657600080fd5b505afa1580156125aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ce91906131ba565b6000805160206134ce83398151915291905b610c418363a9059cbb60e01b84846040516024016117af929190613278565b600060008051602061348e8339815191526001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561264857600080fd5b505afa15801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190613154565b506001600160701b0316915050600060008051602061348e8339815191526001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270e91906131ba565b90506000600660009054906101000a90046001600160a01b03166001600160a01b03166385f8db106040518163ffffffff1660e01b815260040160206040518083038186803b15801561276057600080fd5b505afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279891906131ba565b905060006127c482856127ab8887613400565b6127b591906133e0565b6109ee906402540be4006133c8565b90506106a481612d87565b600060008051602061348e8339815191526001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561281857600080fd5b505afa15801561282c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128509190613154565b50506001600160701b03169050600060008051602061348e8339815191526001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126d657600080fd5b60405163b4ed0b6d60e01b81526103e960048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561184157600080fd5b600061295f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f2c9092919063ffffffff16565b805190915015610c41578080602001905181019061297d9190613134565b610c415760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161084a565b6000816129eb57506000612bbe565b50600181600160801b8110612a055760409190911b9060801c5b600160401b8110612a1b5760209190911b9060401c5b600160201b8110612a315760109190911b9060201c5b620100008110612a465760089190911b9060101c5b6101008110612a5a5760049190911b9060081c5b60108110612a6d5760029190911b9060041c5b60088110612a7d57600182901b91505b6001828481612a9c57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612ac257634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612ae857634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612b0e57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612b3457634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612b5a57634e487b7160e01b600052601260045260246000fd5b048301901c91506001828481612b8057634e487b7160e01b600052601260045260246000fd5b048301901c91506000828481612ba657634e487b7160e01b600052601260045260246000fd5b04905080831015612bb75782612bb9565b805b925050505b919050565b6000808411612c285760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b606482015260840161084a565b600083118015612c385750600082115b612c545760405162461bcd60e51b815260040161084a90613380565b6000612c62856103e5613400565b90506000612c708483613400565b9050600082612c81876103e8613400565b612c8b91906133c8565b9050612c9781836133e0565b979650505050505050565b6000808411612d085760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b606482015260840161084a565b600083118015612d185750600082115b612d345760405162461bcd60e51b815260040161084a90613380565b6000612d408585613400565b612d4c906103e8613400565b90506000612d5a868561341f565b612d66906103e5613400565b9050612d7281836133e0565b612d7d9060016133c8565b9695505050505050565b600654604051627b8a6760e11b81526004810183905260008051602061348e83398151915260248201526001600160a01b039091169062f714ce90604401600060405180830381600087803b158015612ddf57600080fd5b505af1158015612df3573d6000803e3d6000fd5b505060405163226bf2d160e21b815260008051602061348e83398151915292506389afcb449150612e28903090600401613240565b6040805180830381600087803b158015612e4157600080fd5b505af1158015612e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e799190613201565b50506040516370a0823160e01b8152612ed2907f0000000000000000000000000000000000000000000000000000000000000000906000805160206134ce833981519152906370a082319061257e903090600401613240565b6040516370a0823160e01b8152612f29907f0000000000000000000000000000000000000000000000000000000000000000906000805160206134ae833981519152906370a08231906124c1903090600401613240565b50565b6060612f3b8484600085612f45565b90505b9392505050565b606082471015612fa65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161084a565b843b612ff45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161084a565b600080866001600160a01b031685876040516130109190613224565b60006040518083038185875af1925050503d806000811461304d576040519150601f19603f3d011682016040523d82523d6000602084013e613052565b606091505b5091509150612c978282866060831561306c575081612f3e565b82511561307c5782518084602001fd5b8160405162461bcd60e51b815260040161084a9190613303565b80516001600160701b0381168114612bbe57600080fd5b6000602082840312156130be578081fd5b8151612f3e81613478565b6000806000606084860312156130dd578182fd5b83356130e881613478565b925060208401356130f881613478565b929592945050506040919091013590565b6000806040838503121561311b578182fd5b823561312681613478565b946020939093013593505050565b600060208284031215613145578081fd5b81518015158114612f3e578182fd5b600080600060608486031215613168578283fd5b61317184613096565b925061317f60208501613096565b9150604084015163ffffffff81168114613197578182fd5b809150509250925092565b6000602082840312156131b3578081fd5b5035919050565b6000602082840312156131cb578081fd5b5051919050565b600080604083850312156131e4578182fd5b8235915060208301356131f681613478565b809150509250929050565b60008060408385031215613213578182fd5b505080516020909101519092909150565b60008251613236818460208701613436565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156132c9578351835292840192918401916001016132ad565b50909695505050505050565b92835260208301919091526001600160a01b0316604082015260806060820181905260009082015260a00190565b6000602082528251806020840152613322816040850160208701613436565b601f01601f19169190910160400192915050565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b600082198211156133db576133db613462565b500190565b6000826133fb57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561341a5761341a613462565b500290565b60008282101561343157613431613462565b500390565b60005b83811015613451578181015183820152602001613439565b8381111561149d5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612f2957600080fdfe0000000000000000000000004b946c91c2b1a7d7c40fb3c130cdfbaf8389094d0000000000000000000000002b2c81e08f1af8835a78bb2a90ae924ace0ea4be000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c7a26469706673582212203ae1ad75d94c435734bc0258eb6ec08eb52c62df2323b183883f3e8c186fb17364736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "charactersPlayed()": {
        "details": "returns all characters played by this contract (e.g. stable coin, oracle registry)"
      },
      "dependsOnCharacters()": {
        "details": "returns all the character dependencies like FEE_RECIPIENT"
      },
      "dependsOnRoles()": {
        "details": "returns all the roles dependencies of this contract like FUND_TRANSFERER"
      },
      "rolesPlayed()": {
        "details": "returns all roles played by this contract"
      },
      "updateMainCharacterCache(uint256)": {
        "details": "Updates the main character cache for a speciic character"
      },
      "updateRoleCache(uint256,address)": {
        "details": "Updates the role cache for a specific role and address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burnMAvax2Avax(uint256,address)": {
        "notice": "Withdraw AVAX"
      },
      "burnMAvax2wAvax(uint256,address)": {
        "notice": "Withdraw WAVAX"
      },
      "burnMsAvax(uint256,address)": {
        "notice": "withdraw sAVAX"
      },
      "depositBalances()": {
        "notice": "Put any matching balances into the liquidity pool, if it is close enough to peg"
      },
      "mintMAvax()": {
        "notice": "Deposit AVAX and mint mAVAX"
      },
      "mintMAvax(uint256)": {
        "notice": "Deposit WAVAX and mint mAVAX"
      },
      "mintMsAvax(uint256)": {
        "notice": "Deposit sAVAX and receive msAVAX"
      },
      "pullAllFunds()": {
        "notice": "Pull funds from liquidity pool to balance by admin"
      },
      "rescueFunds(address,address,uint256)": {
        "notice": "Rescue stranded funds"
      },
      "setMinBalancePer10k(uint256)": {
        "notice": "set minbalance parameter -- needs to be adjusted over time, as value of LPT increases (right now it's rougly 1:2)"
      },
      "setWindowPer10k(uint256)": {
        "notice": "Set acceptable deviation from peg"
      }
    },
    "notice": "Matches up sAvax and Avax deposits to be put in the liquidity pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29522,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 29528,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 29531,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29534,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29537,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29540,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 19196,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "lyLptHolder",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(LyLptHolder)19143"
      },
      {
        "astId": 19199,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "windowPer10k",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 19202,
        "contract": "contracts/liquid-yield/LyRebalancer.sol:LyRebalancer",
        "label": "minBalancePer10k",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(LyLptHolder)19143": {
        "encoding": "inplace",
        "label": "contract LyLptHolder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}