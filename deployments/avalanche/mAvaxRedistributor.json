{
  "address": "0x11bb6E9AEb4919188CC6B5AD570220C5A00d6B78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mAvax",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SubjectParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        }
      ],
      "name": "SubjectUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnCharacters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dependsOnRoles",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cumulRewardPer1e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesPlayed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unstakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardTotal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff749df539205912091cf2eb39b4b6cab44f91a9f09434d1dca8675447493988",
  "receipt": {
    "to": null,
    "from": "0xC74401498312326cE31A23494eCbaC1449bd7235",
    "contractAddress": "0x11bb6E9AEb4919188CC6B5AD570220C5A00d6B78",
    "transactionIndex": 31,
    "gasUsed": "1416201",
    "logsBloom": "0x
    "blockHash": "0xc117b590febfd0656985388a4266767afb40f2661521ff7ac24773e0513dc1f8",
    "transactionHash": "0xff749df539205912091cf2eb39b4b6cab44f91a9f09434d1dca8675447493988",
    "logs": [],
    "blockNumber": 11180007,
    "cumulativeGasUsed": "6742665",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA5916a3c4b9dFccbFe6C27108539EdA3E6b99d56",
    [
      "0x6e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd",
      "0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5"
    ],
    "0x9e1EE00d45252aA58623F7d771FB414aA38f0878"
  ],
  "numDeployments": 1,
  "solcInputHash": "f34724a8126ebefd882a0c9c697b84b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mAvax\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SubjectParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"SubjectUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnCharacters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dependsOnRoles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulRewardPer1e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesPlayed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unstakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"charactersPlayed()\":{\"details\":\"returns all characters played by this contract (e.g. stable coin, oracle registry)\"},\"dependsOnCharacters()\":{\"details\":\"returns all the character dependencies like FEE_RECIPIENT\"},\"dependsOnRoles()\":{\"details\":\"returns all the roles dependencies of this contract like FUND_TRANSFERER\"},\"rolesPlayed()\":{\"details\":\"returns all roles played by this contract\"},\"updateMainCharacterCache(uint256)\":{\"details\":\"Updates the main character cache for a speciic character\"},\"updateRoleCache(uint256,address)\":{\"details\":\"Updates the role cache for a specific role and address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"harvest()\":{\"notice\":\"Claim yield for account without depositing or withdrawing\"},\"rescueFunds(address,address,uint256)\":{\"notice\":\"Rescue stranded funds\"},\"stake(uint256)\":{\"notice\":\"Deposit yield bearing tokens\"},\"stakeFor(address,uint256)\":{\"notice\":\"Deposit yield bearing tokens on behalf of another\"},\"unstake(uint256,address)\":{\"notice\":\"Withdraw yield bearing tokens\"},\"unstakeFor(address,uint256,address)\":{\"notice\":\"Withdraw yield bearing tokens on behalf of another\"},\"updateRewardTotal()\":{\"notice\":\"Account for any incoming rewards, to be distributed, as well as reward outflows in reserve\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquid-yield/mAvaxRedistributor.sol\":\"mAvaxRedistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/liquid-yield/LyRedistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../roles/DependsOnLiquidYield.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../roles/RoleAware.sol\\\";\\n\\n/// Redistribute masterchef (and other) rewards to stakers\\ncontract LyRedistributor is RoleAware, DependsOnLiquidYield {\\n    using SafeERC20 for IERC20;\\n\\n    struct RewardToken {\\n        address token;\\n        uint256 cumulRewardPer1e18;\\n        uint256 reserve;\\n    }\\n\\n    IERC20 public immutable stakeToken;\\n\\n    RewardToken[] public rewardTokens;\\n    mapping(address => uint256) public stakedBalance;\\n    mapping(address => mapping(uint256 => uint256)) public rewardIndex;\\n\\n    constructor(\\n        address _stakeToken,\\n        address[] memory _rewardTokens,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        for (uint256 i; _rewardTokens.length > i; i++) {\\n            rewardTokens.push(\\n                RewardToken({\\n                    token: _rewardTokens[i],\\n                    cumulRewardPer1e18: 0,\\n                    reserve: 0\\n                })\\n            );\\n        }\\n        stakeToken = IERC20(_stakeToken);\\n    }\\n\\n    /// Deposit yield bearing tokens\\n    function stake(uint256 amount) external {\\n        if (amount > 0) {\\n            stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        disburseReward(msg.sender);\\n        stakedBalance[msg.sender] += amount;\\n    }\\n\\n    /// Deposit yield bearing tokens on behalf of another\\n    function stakeFor(address recipient, uint256 amount) external {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        \\n        if (amount > 0) {\\n            stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n            disburseReward(recipient);\\n            stakedBalance[recipient] += amount;\\n        }\\n    }\\n\\n    /// Withdraw yield bearing tokens\\n    function unstake(uint256 amount, address recipient) external {\\n        disburseReward(msg.sender);\\n        stakedBalance[msg.sender] -= amount;\\n        if (amount > 0) {\\n            stakeToken.safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    /// Withdraw yield bearing tokens on behalf of another\\n    function unstakeFor(address holder, uint256 amount, address recipient) external {\\n        require(isLiquidYield(msg.sender), \\\"Only for liquid yield role\\\");\\n        disburseReward(holder);\\n        stakedBalance[holder] -= amount;\\n        if (amount > 0) {\\n            stakeToken.safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    /// Claim yield for account without depositing or withdrawing\\n    function harvest() external {\\n        disburseReward(msg.sender);\\n    }\\n\\n    /// Send the accrued reward to the staker\\n    function disburseReward(address user) internal {\\n        uint256 userStake = stakedBalance[user];\\n        updateRewardTotal();\\n\\n        mapping(uint256 => uint256) storage idxes = rewardIndex[user];\\n        for (uint256 i; rewardTokens.length > i; i++) {\\n            RewardToken storage r = rewardTokens[i];\\n\\n            uint256 idx = idxes[i];\\n            if (r.cumulRewardPer1e18 > idx && userStake > 0) {\\n                IERC20(r.token).safeTransfer(\\n                    user,\\n                    (userStake * (r.cumulRewardPer1e18 - idx)) / 1e18\\n                );\\n            }\\n\\n            // if the user hasn't any yield yet,\\n            // this initializes them without back yield\\n            idxes[i] = r.cumulRewardPer1e18;\\n        }\\n\\n        // important to update reserves after sending reward to users\\n        updateRewardTotal();\\n    }\\n\\n    /// Account for any incoming rewards, to be distributed,\\n    /// as well as reward outflows in reserve\\n    function updateRewardTotal() public {\\n        uint256 totalStaked = stakeToken.balanceOf(address(this));\\n        for (uint256 i; rewardTokens.length > i; i++) {\\n            RewardToken storage r = rewardTokens[i];\\n            IERC20 token = IERC20(r.token);\\n            uint256 balance = token.balanceOf(address(this));\\n            if (balance > r.reserve) {\\n                r.cumulRewardPer1e18 +=\\n                    (1e18 * (balance - r.reserve)) /\\n                    totalStaked;\\n            }\\n            r.reserve = balance;\\n        }\\n    }\\n\\n    function addRewardToken(address token) external onlyOwnerExec {\\n        rewardTokens.push(\\n            RewardToken({token: token, cumulRewardPer1e18: 0, reserve: 0})\\n        );\\n    }\\n\\n    /// Rescue stranded funds\\n    function rescueFunds(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwnerExec {\\n        IERC20(token).safeTransfer(recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7f70592c76612020fa388a53f941c1a31ee01e76f501a19ea41c57a6accee935\",\"license\":\"BUSL-1.1\"},\"contracts/liquid-yield/mAvaxRedistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LyRedistributor.sol\\\";\\n\\ncontract mAvaxRedistributor is LyRedistributor {\\n    constructor(address mAvax, address[] memory _rewardTokens, address _roles) LyRedistributor(mAvax, _rewardTokens, _roles) {\\n        _charactersPlayed.push(LIQUID_YIELD_REDISTRIBUTOR_MAVAX);\\n    }\\n}\",\"keccak256\":\"0x09048ac0292f581f1610b9055d5079de725d8032708bdeb6048c8b16bd246935\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependentContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title DependentContract.\\nabstract contract DependentContract {\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    uint256[] public _dependsOnCharacters;\\n    uint256[] public _dependsOnRoles;\\n\\n    uint256[] public _charactersPlayed;\\n    uint256[] public _rolesPlayed;\\n\\n    /// @dev returns all characters played by this contract (e.g. stable coin, oracle registry)\\n    function charactersPlayed() public view returns (uint256[] memory) {\\n        return _charactersPlayed;\\n    }\\n\\n    /// @dev returns all roles played by this contract\\n    function rolesPlayed() public view returns (uint256[] memory) {\\n        return _rolesPlayed;\\n    }\\n\\n    /// @dev returns all the character dependencies like FEE_RECIPIENT\\n    function dependsOnCharacters() public view returns (uint256[] memory) {\\n        return _dependsOnCharacters;\\n    }\\n\\n    /// @dev returns all the roles dependencies of this contract like FUND_TRANSFERER\\n    function dependsOnRoles() public view returns (uint256[] memory) {\\n        return _dependsOnRoles;\\n    }\\n}\\n\",\"keccak256\":\"0xaea783afd230965aa519d2cc53f26a44f3f507b8d2089b8092c09caf35bd0d81\",\"license\":\"BUSL-1.1\"},\"contracts/roles/DependsOnLiquidYield.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DependentContract.sol\\\";\\n\\nabstract contract DependsOnLiquidYield is DependentContract {\\n    constructor() {\\n        _dependsOnRoles.push(LIQUID_YIELD);\\n    }\\n\\n    function isLiquidYield(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUID_YIELD];\\n    }\\n}\\n\",\"keccak256\":\"0x35af50f870ce104f4ea02577ed978a12827b228e76298f97439f0e842cf96878\",\"license\":\"BUSL-1.1\"},\"contracts/roles/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./DependentContract.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware is DependentContract {\\n    Roles public immutable roles;\\n\\n    event SubjectUpdated(string param, address subject);\\n    event ParameterUpdated(string param, uint256 value);\\n    event SubjectParameterUpdated(string param, address subject, uint256 value);\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Roles: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or disabler\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or executor or activator\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Updates the role cache for a specific role and address\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.roles(contr, role);\\n    }\\n\\n    /// @dev Updates the main character cache for a speciic character\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    /// @dev returns the owner's address\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    /// @dev returns the executor address\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    /// @dev returns the disabler address\\n    function disabler() internal view returns (address) {\\n        return roles.mainCharacters(DISABLER);\\n    }\\n\\n    /// @dev checks whether the passed address is activator or not\\n    function isActivator(address contr) internal view returns (bool) {\\n        return roles.roles(contr, ACTIVATOR);\\n    }\\n}\\n\",\"keccak256\":\"0xeb75105e3789b321336a2f2e81a32ba0b8136809e9e7184629650a374b094871\",\"license\":\"BUSL-1.1\"},\"contracts/roles/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MINTER_BURNER = 2;\\nuint256 constant TRANCHE = 3;\\nuint256 constant ORACLE_LISTENER = 4;\\nuint256 constant TRANCHE_TRANSFERER = 5;\\nuint256 constant UNDERWATER_LIQUIDATOR = 6;\\nuint256 constant LIQUIDATION_PROTECTED = 7;\\nuint256 constant SMART_LIQUIDITY = 8;\\nuint256 constant LIQUID_YIELD = 9;\\n\\nuint256 constant PROTOCOL_TOKEN = 100;\\nuint256 constant FUND = 101;\\nuint256 constant STABLECOIN = 102;\\nuint256 constant FEE_RECIPIENT = 103;\\nuint256 constant STRATEGY_REGISTRY = 104;\\nuint256 constant TRANCHE_ID_SERVICE = 105;\\nuint256 constant ORACLE_REGISTRY = 106;\\nuint256 constant ISOLATED_LENDING = 107;\\nuint256 constant TWAP_ORACLE = 108;\\nuint256 constant CURVE_POOL = 109;\\nuint256 constant ISOLATED_LENDING_LIQUIDATION = 110;\\nuint256 constant STABLE_LENDING = 111;\\nuint256 constant STABLE_LENDING_LIQUIDATION = 112;\\nuint256 constant SMART_LIQUIDITY_FACTORY =  113;\\nuint256 constant LIQUID_YIELD_HOLDER = 114;\\nuint256 constant LIQUID_YIELD_REBALANCER = 115;\\nuint256 constant LIQUID_YIELD_REDISTRIBUTOR_MAVAX = 116;\\nuint256 constant LIQUID_YIELD_REDISTRIBUTOR_MSAVAX = 117;\\n\\nuint256 constant DIRECT_LIQUIDATOR = 200;\\nuint256 constant LPT_LIQUIDATOR = 201;\\nuint256 constant DIRECT_STABLE_LIQUIDATOR = 202;\\nuint256 constant LPT_STABLE_LIQUIDATOR = 203;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\nuint256 constant ACTIVATOR = 1003;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet during\\n/// beta and will then be transfered to governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    event RoleGiven(uint256 indexed role, address player);\\n    event CharacterAssigned(\\n        uint256 indexed character,\\n        address playerBefore,\\n        address playerNew\\n    );\\n    event RoleRemoved(uint256 indexed role, address player);\\n\\n    constructor(address targetOwner) Ownable() {\\n        transferOwnership(targetOwner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev assign role to an account\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleGiven(role, actor);\\n        roles[actor][role] = true;\\n    }\\n\\n    /// @dev revoke role of a particular account\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit RoleRemoved(role, actor);\\n        roles[actor][role] = false;\\n    }\\n\\n    /// @dev set main character\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        emit CharacterAssigned(role, mainCharacters[role], actor);\\n        mainCharacters[role] = actor;\\n    }\\n\\n    /// @dev returns the current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0687ace0d7468af0b2f6fc960d553cab45cdcfd4e6a00b47f23df15f62ba2be\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200191f3803806200191f833981016040819052620000349162000209565b828282806001600160a01b0381166200009e5760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b03191660805260038054600181018255600091825260097fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b909101555b80835111156200019957600660405180606001604052808584815181106200011d57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683526000838301819052604093840181905285546001808201885596825290839020855160039092020180546001600160a01b031916919092161781559083015193810193909355015160029091015580620001908162000306565b915050620000e5565b50505060601b6001600160601b03191660a05250506004805460018101825560009190915260747f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909101555062000344565b80516001600160a01b03811681146200020457600080fd5b919050565b6000806000606084860312156200021e578283fd5b6200022984620001ec565b602085810151919450906001600160401b038082111562000248578485fd5b818701915087601f8301126200025c578485fd5b8151818111156200027157620002716200032e565b8060051b604051601f19603f830116810181811085821117156200029957620002996200032e565b604052828152858101935084860182860187018c1015620002b8578889fd5b8895505b83861015620002e557620002d081620001ec565b855260019590950194938601938601620002bc565b50809750505050505050620002fd60408501620001ec565b90509250925092565b60006000198214156200032757634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c611570620003af6000396000818161022d0152818161042a0152818161065c01528181610949015281816109830152610a250152600081816101c90152818161046c015281816106d601528181610e270152610ebf01526115706000f3fe608060405234801561001057600080fd5b50600436106101335760003560e01c8063026800d014610138578063071060a61461014d578063094d4638146101605780631c03e6cc1461019e5780632ee40908146101b1578063392f5f64146101c4578063447d52ba146101f85780634641257d1461020b5780634a7a7f411461021357806351ed6a3014610228578063602172671461024f5780636caa9c111461026f5780636ccae054146102825780637a1a04df146102955780637bb7bed1146102d35780637dad209b1461030b5780638381e18214610313578063a694fc3a14610326578063abcbc4fc14610339578063aeb38d8b1461034c578063bf184ea41461035f578063d17220cc14610372578063dc94cb7d1461037a578063e8ea4fae14610382578063e9c3f77d1461038a575b600080fd5b61014b610146366004611259565b6103b3565b005b61014b61015b3660046112ba565b610456565b61018b61016e36600461122e565b600860209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61014b6101ac3660046111b6565b61051c565b61014b6101bf36600461122e565b610624565b6101eb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101959190611335565b61014b6102063660046112ea565b6106bf565b61014b610795565b61021b6107a0565b6040516101959190611362565b6101eb7f000000000000000000000000000000000000000000000000000000000000000081565b61018b61025d3660046111b6565b60076020526000908152604090205481565b61018b61027d3660046112ba565b6107f8565b61014b6102903660046111ee565b610819565b6102c36102a336600461122e565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610195565b6102e66102e13660046112ba565b610876565b604080516001600160a01b039094168452602084019290925290820152606001610195565b61021b6108b3565b61014b6103213660046112ea565b610909565b61014b6103343660046112ba565b610970565b61018b6103473660046112ba565b6109db565b61018b61035a3660046112ba565b6109eb565b61018b61036d3660046112ba565b6109fb565b61014b610a0b565b61021b610bde565b61021b610c34565b6101eb6103983660046112ba565b6000602081905290815260409020546001600160a01b031681565b6103bc33610c8a565b6103e15760405162461bcd60e51b81526004016103d890611423565b60405180910390fd5b6103ea83610cb4565b6001600160a01b038316600090815260076020526040812080548492906104129084906114ae565b90915550508115610451576104516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284610dcd565b505050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156104b657600080fd5b505afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee91906111d2565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b33610525610e23565b6001600160a01b0316148061054957503361053e610ebb565b6001600160a01b0316145b6105655760405162461bcd60e51b81526004016103d8906113d9565b604080516060810182526001600160a01b03928316815260006020820181815292820181815260068054600181018255925291517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600390920291820180546001600160a01b031916919095161790935590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4190910155565b61062d33610c8a565b6106495760405162461bcd60e51b81526004016103d890611423565b80156106bb576106846001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610f2c565b61068d82610cb4565b6001600160a01b038216600090815260076020526040812080548392906106b5908490611457565b90915550505b5050565b60405163f0723d9760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d979061070d9084908690600401611349565b60206040518083038186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d919061129a565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b61079e33610cb4565b565b606060038054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020905b8154815260200190600101908083116107da575b5050505050905090565b6005818154811061080857600080fd5b600091825260209091200154905081565b33610822610e23565b6001600160a01b0316148061084657503361083b610ebb565b6001600160a01b0316145b6108625760405162461bcd60e51b81526004016103d8906113d9565b6104516001600160a01b0384168383610dcd565b6006818154811061088657600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925083565b606060048054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020908154815260200190600101908083116107da575050505050905090565b61091233610cb4565b33600090815260076020526040812080548492906109319084906114ae565b909155505081156106bb576106bb6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284610dcd565b80156109ab576109ab6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610f2c565b6109b433610cb4565b33600090815260076020526040812080548392906109d3908490611457565b909155505050565b6002818154811061080857600080fd5b6004818154811061080857600080fd5b6003818154811061080857600080fd5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610a5a903090600401611335565b60206040518083038186803b158015610a7257600080fd5b505afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa91906112d2565b905060005b6006548110156106bb57600060068281548110610adc57634e487b7160e01b600052603260045260246000fd5b60009182526020822060039091020180546040516370a0823160e01b81529193506001600160a01b0316919082906370a0823190610b1e903090600401611335565b60206040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e91906112d2565b90508260020154811115610bc25784836002015482610b8d91906114ae565b610b9f90670de0b6b3a764000061148f565b610ba9919061146f565b836001016000828254610bbc9190611457565b90915550505b6002909201919091555080610bd6816114f1565b915050610aaf565b606060028054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020908154815260200190600101908083116107da575050505050905090565b606060058054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020908154815260200190600101908083116107da575050505050905090565b6001600160a01b031660009081526001602090815260408083206009845290915290205460ff1690565b6001600160a01b038116600090815260076020526040902054610cd5610a0b565b6001600160a01b0382166000908152600860205260408120905b600654811015610dc457600060068281548110610d1c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020190506000836000848152602001908152602001600020549050808260010154118015610d565750600085115b15610d9e57610d9e86670de0b6b3a7640000838560010154610d7891906114ae565b610d82908961148f565b610d8c919061146f565b84546001600160a01b03169190610dcd565b506001015460008281526020849052604090205580610dbc816114f1565b915050610cef565b50610451610a0b565b6104518363a9059cbb60e01b8484604051602401610dec929190611349565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f6a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7e57600080fd5b505afa158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb691906111d2565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f1857600080fd5b505af1158015610e92573d6000803e3d6000fd5b6040516001600160a01b0380851660248301528316604482015260648101829052610f649085906323b872dd60e01b90608401610dec565b50505050565b6000610fbf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661103c9092919063ffffffff16565b8051909150156104515780806020019051810190610fdd919061129a565b6104515760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d8565b606061104b8484600085611055565b90505b9392505050565b6060824710156110b65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d8565b843b6111045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d8565b600080866001600160a01b031685876040516111209190611319565b60006040518083038185875af1925050503d806000811461115d576040519150601f19603f3d011682016040523d82523d6000602084013e611162565b606091505b509150915061117282828661117d565b979650505050505050565b6060831561118c57508161104e565b82511561119c5782518084602001fd5b8160405162461bcd60e51b81526004016103d891906113a6565b6000602082840312156111c7578081fd5b813561104e81611522565b6000602082840312156111e3578081fd5b815161104e81611522565b600080600060608486031215611202578182fd5b833561120d81611522565b9250602084013561121d81611522565b929592945050506040919091013590565b60008060408385031215611240578182fd5b823561124b81611522565b946020939093013593505050565b60008060006060848603121561126d578283fd5b833561127881611522565b925060208401359150604084013561128f81611522565b809150509250925092565b6000602082840312156112ab578081fd5b8151801515811461104e578182fd5b6000602082840312156112cb578081fd5b5035919050565b6000602082840312156112e3578081fd5b5051919050565b600080604083850312156112fc578182fd5b82359150602083013561130e81611522565b809150509250929050565b6000825161132b8184602087016114c5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561139a5783518352928401929184019160010161137e565b50909695505050505050565b60006020825282518060208401526113c58160408501602087016114c5565b601f01601f19169190910160400192915050565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b6020808252601a90820152794f6e6c7920666f72206c6971756964207969656c6420726f6c6560301b604082015260600190565b6000821982111561146a5761146a61150c565b500190565b60008261148a57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156114a9576114a961150c565b500290565b6000828210156114c0576114c061150c565b500390565b60005b838110156114e05781810151838201526020016114c8565b83811115610f645750506000910152565b60006000198214156115055761150561150c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461153757600080fd5b5056fea264697066735822122078dcbf4ec5a73b988aad3f4080f751e931cc9786e78aef91e306c1f4e891cf4264736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101335760003560e01c8063026800d014610138578063071060a61461014d578063094d4638146101605780631c03e6cc1461019e5780632ee40908146101b1578063392f5f64146101c4578063447d52ba146101f85780634641257d1461020b5780634a7a7f411461021357806351ed6a3014610228578063602172671461024f5780636caa9c111461026f5780636ccae054146102825780637a1a04df146102955780637bb7bed1146102d35780637dad209b1461030b5780638381e18214610313578063a694fc3a14610326578063abcbc4fc14610339578063aeb38d8b1461034c578063bf184ea41461035f578063d17220cc14610372578063dc94cb7d1461037a578063e8ea4fae14610382578063e9c3f77d1461038a575b600080fd5b61014b610146366004611259565b6103b3565b005b61014b61015b3660046112ba565b610456565b61018b61016e36600461122e565b600860209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61014b6101ac3660046111b6565b61051c565b61014b6101bf36600461122e565b610624565b6101eb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101959190611335565b61014b6102063660046112ea565b6106bf565b61014b610795565b61021b6107a0565b6040516101959190611362565b6101eb7f000000000000000000000000000000000000000000000000000000000000000081565b61018b61025d3660046111b6565b60076020526000908152604090205481565b61018b61027d3660046112ba565b6107f8565b61014b6102903660046111ee565b610819565b6102c36102a336600461122e565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610195565b6102e66102e13660046112ba565b610876565b604080516001600160a01b039094168452602084019290925290820152606001610195565b61021b6108b3565b61014b6103213660046112ea565b610909565b61014b6103343660046112ba565b610970565b61018b6103473660046112ba565b6109db565b61018b61035a3660046112ba565b6109eb565b61018b61036d3660046112ba565b6109fb565b61014b610a0b565b61021b610bde565b61021b610c34565b6101eb6103983660046112ba565b6000602081905290815260409020546001600160a01b031681565b6103bc33610c8a565b6103e15760405162461bcd60e51b81526004016103d890611423565b60405180910390fd5b6103ea83610cb4565b6001600160a01b038316600090815260076020526040812080548492906104129084906114ae565b90915550508115610451576104516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284610dcd565b505050565b60405163b4ed0b6d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156104b657600080fd5b505afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee91906111d2565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b33610525610e23565b6001600160a01b0316148061054957503361053e610ebb565b6001600160a01b0316145b6105655760405162461bcd60e51b81526004016103d8906113d9565b604080516060810182526001600160a01b03928316815260006020820181815292820181815260068054600181018255925291517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600390920291820180546001600160a01b031916919095161790935590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4190910155565b61062d33610c8a565b6106495760405162461bcd60e51b81526004016103d890611423565b80156106bb576106846001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610f2c565b61068d82610cb4565b6001600160a01b038216600090815260076020526040812080548392906106b5908490611457565b90915550505b5050565b60405163f0723d9760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0723d979061070d9084908690600401611349565b60206040518083038186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d919061129a565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b61079e33610cb4565b565b606060038054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020905b8154815260200190600101908083116107da575b5050505050905090565b6005818154811061080857600080fd5b600091825260209091200154905081565b33610822610e23565b6001600160a01b0316148061084657503361083b610ebb565b6001600160a01b0316145b6108625760405162461bcd60e51b81526004016103d8906113d9565b6104516001600160a01b0384168383610dcd565b6006818154811061088657600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925083565b606060048054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020908154815260200190600101908083116107da575050505050905090565b61091233610cb4565b33600090815260076020526040812080548492906109319084906114ae565b909155505081156106bb576106bb6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284610dcd565b80156109ab576109ab6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610f2c565b6109b433610cb4565b33600090815260076020526040812080548392906109d3908490611457565b909155505050565b6002818154811061080857600080fd5b6004818154811061080857600080fd5b6003818154811061080857600080fd5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610a5a903090600401611335565b60206040518083038186803b158015610a7257600080fd5b505afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa91906112d2565b905060005b6006548110156106bb57600060068281548110610adc57634e487b7160e01b600052603260045260246000fd5b60009182526020822060039091020180546040516370a0823160e01b81529193506001600160a01b0316919082906370a0823190610b1e903090600401611335565b60206040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e91906112d2565b90508260020154811115610bc25784836002015482610b8d91906114ae565b610b9f90670de0b6b3a764000061148f565b610ba9919061146f565b836001016000828254610bbc9190611457565b90915550505b6002909201919091555080610bd6816114f1565b915050610aaf565b606060028054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020908154815260200190600101908083116107da575050505050905090565b606060058054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020908154815260200190600101908083116107da575050505050905090565b6001600160a01b031660009081526001602090815260408083206009845290915290205460ff1690565b6001600160a01b038116600090815260076020526040902054610cd5610a0b565b6001600160a01b0382166000908152600860205260408120905b600654811015610dc457600060068281548110610d1c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020190506000836000848152602001908152602001600020549050808260010154118015610d565750600085115b15610d9e57610d9e86670de0b6b3a7640000838560010154610d7891906114ae565b610d82908961148f565b610d8c919061146f565b84546001600160a01b03169190610dcd565b506001015460008281526020849052604090205580610dbc816114f1565b915050610cef565b50610451610a0b565b6104518363a9059cbb60e01b8484604051602401610dec929190611349565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f6a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7e57600080fd5b505afa158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb691906111d2565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f1857600080fd5b505af1158015610e92573d6000803e3d6000fd5b6040516001600160a01b0380851660248301528316604482015260648101829052610f649085906323b872dd60e01b90608401610dec565b50505050565b6000610fbf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661103c9092919063ffffffff16565b8051909150156104515780806020019051810190610fdd919061129a565b6104515760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d8565b606061104b8484600085611055565b90505b9392505050565b6060824710156110b65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d8565b843b6111045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d8565b600080866001600160a01b031685876040516111209190611319565b60006040518083038185875af1925050503d806000811461115d576040519150601f19603f3d011682016040523d82523d6000602084013e611162565b606091505b509150915061117282828661117d565b979650505050505050565b6060831561118c57508161104e565b82511561119c5782518084602001fd5b8160405162461bcd60e51b81526004016103d891906113a6565b6000602082840312156111c7578081fd5b813561104e81611522565b6000602082840312156111e3578081fd5b815161104e81611522565b600080600060608486031215611202578182fd5b833561120d81611522565b9250602084013561121d81611522565b929592945050506040919091013590565b60008060408385031215611240578182fd5b823561124b81611522565b946020939093013593505050565b60008060006060848603121561126d578283fd5b833561127881611522565b925060208401359150604084013561128f81611522565b809150509250925092565b6000602082840312156112ab578081fd5b8151801515811461104e578182fd5b6000602082840312156112cb578081fd5b5035919050565b6000602082840312156112e3578081fd5b5051919050565b600080604083850312156112fc578182fd5b82359150602083013561130e81611522565b809150509250929050565b6000825161132b8184602087016114c5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561139a5783518352928401929184019160010161137e565b50909695505050505050565b60006020825282518060208401526113c58160408501602087016114c5565b601f01601f19169190910160400192915050565b6020808252602a908201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572206f604082015269391032bc32b1baba37b960b11b606082015260800190565b6020808252601a90820152794f6e6c7920666f72206c6971756964207969656c6420726f6c6560301b604082015260600190565b6000821982111561146a5761146a61150c565b500190565b60008261148a57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156114a9576114a961150c565b500290565b6000828210156114c0576114c061150c565b500390565b60005b838110156114e05781810151838201526020016114c8565b83811115610f645750506000910152565b60006000198214156115055761150561150c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461153757600080fd5b5056fea264697066735822122078dcbf4ec5a73b988aad3f4080f751e931cc9786e78aef91e306c1f4e891cf4264736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "charactersPlayed()": {
        "details": "returns all characters played by this contract (e.g. stable coin, oracle registry)"
      },
      "dependsOnCharacters()": {
        "details": "returns all the character dependencies like FEE_RECIPIENT"
      },
      "dependsOnRoles()": {
        "details": "returns all the roles dependencies of this contract like FUND_TRANSFERER"
      },
      "rolesPlayed()": {
        "details": "returns all roles played by this contract"
      },
      "updateMainCharacterCache(uint256)": {
        "details": "Updates the main character cache for a speciic character"
      },
      "updateRoleCache(uint256,address)": {
        "details": "Updates the role cache for a specific role and address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "harvest()": {
        "notice": "Claim yield for account without depositing or withdrawing"
      },
      "rescueFunds(address,address,uint256)": {
        "notice": "Rescue stranded funds"
      },
      "stake(uint256)": {
        "notice": "Deposit yield bearing tokens"
      },
      "stakeFor(address,uint256)": {
        "notice": "Deposit yield bearing tokens on behalf of another"
      },
      "unstake(uint256,address)": {
        "notice": "Withdraw yield bearing tokens"
      },
      "unstakeFor(address,uint256,address)": {
        "notice": "Withdraw yield bearing tokens on behalf of another"
      },
      "updateRewardTotal()": {
        "notice": "Account for any incoming rewards, to be distributed, as well as reward outflows in reserve"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29200,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 29206,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 29209,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "_dependsOnCharacters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29212,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "_dependsOnRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29215,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "_charactersPlayed",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29218,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "_rolesPlayed",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 20187,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(RewardToken)20180_storage)dyn_storage"
      },
      {
        "astId": 20191,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "stakedBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20197,
        "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
        "label": "rewardIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardToken)20180_storage)dyn_storage": {
        "base": "t_struct(RewardToken)20180_storage",
        "encoding": "dynamic_array",
        "label": "struct LyRedistributor.RewardToken[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RewardToken)20180_storage": {
        "encoding": "inplace",
        "label": "struct LyRedistributor.RewardToken",
        "members": [
          {
            "astId": 20175,
            "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20177,
            "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
            "label": "cumulRewardPer1e18",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20179,
            "contract": "contracts/liquid-yield/mAvaxRedistributor.sol:mAvaxRedistributor",
            "label": "reserve",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}